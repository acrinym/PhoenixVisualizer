--- a/PhoenixVisualizer.App\Rendering\RenderSurface.cs
+++ b/PhoenixVisualizer.App\Rendering\RenderSurface.cs
@@ -65,7 +65,9 @@
         _audio = audioService ?? throw new ArgumentNullException(nameof(audioService));
     }
 
-    public void SetPlugin(IVisualizerPlugin plugin)
+    public void ToggleDiagnostics() => _showDiagnostics = !_showDiagnostics;
+
+        public void SetPlugin(IVisualizerPlugin plugin)
     {
         _plugin?.Dispose();
         _plugin = plugin;
@@ -136,7 +138,7 @@
         // Early exit if no audio provider
         if (_audio == null) return;
 
-        var adapter = new CanvasAdapter(context, Bounds.Width, Bounds.Height);
+        var adapter = new BudgetCanvas(new CanvasAdapter(context, Bounds.Width, Bounds.Height), 40000);
 
         // Handle dynamic resize for plugins that support it
         int w = (int)Bounds.Width;


--- a/PhoenixVisualizer.App\App.axaml.cs
+++ b/PhoenixVisualizer.App\App.axaml.cs
@@ -14,8 +14,27 @@
 
 namespace PhoenixVisualizer.App;
 
-public partial class App : Application
-{
+public partial class App : Application {
+        protected override void OnFrameworkInitializationCompleted()
+        {
+            base.OnFrameworkInitializationCompleted();
+            if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
+            {
+                desktop.MainWindow.KeyDown += (s, e) =>
+                {
+                    if (e.Key == Avalonia.Input.Key.F3)
+                    {
+                        _renderSurface?.GetType().GetMethod("ToggleDiagnostics")?.Invoke(_renderSurface, null);
+                        e.Handled = true;
+                    }
+                    else if (e.Key == Avalonia.Input.Key.R)
+                    {
+                        try { PresetManager?.RandomizeAvoidRepeat(); } catch {}
+                        e.Handled = true;
+                    }
+                };
+            }
+        }
     public override void Initialize()
     {
         // Runtime XAML load (works even if the XAML generator isn't running)


--- a/PhoenixVisualizer.App\Services\SettingsService.cs
+++ b/PhoenixVisualizer.App\Services\SettingsService.cs
@@ -0,0 +1,30 @@
+using System.IO;
+using System.Text.Json;
+
+namespace PhoenixVisualizer.App.Services
+{
+    public sealed class SettingsService
+    {
+        private const string FileName = "phoenix.settings.json";
+        public bool ShowDiagnostics { get; set; }
+        public string? LastPresetPath { get; set; }
+
+        public void Load()
+        {
+            try {
+                if (!File.Exists(FileName)) return;
+                var json = File.ReadAllText(FileName);
+                var s = JsonSerializer.Deserialize<SettingsService>(json);
+                if (s != null) { ShowDiagnostics = s.ShowDiagnostics; LastPresetPath = s.LastPresetPath; }
+            } catch {}
+        }
+
+        public void Save()
+        {
+            try {
+                var json = JsonSerializer.Serialize(this, new JsonSerializerOptions{ WriteIndented = true });
+                File.WriteAllText(FileName, json);
+            } catch {}
+        }
+    }
+}


