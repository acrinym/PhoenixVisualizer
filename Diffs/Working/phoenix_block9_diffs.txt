--- a/PhoenixVisualizer.App\Rendering\RenderSurface.cs
+++ b/PhoenixVisualizer.App\Rendering\RenderSurface.cs
@@ -68,7 +68,8 @@
 
     public void SetPlugin(IVisualizerPlugin plugin)
     {
-        _plugin?.Dispose();
+        
+            _fadeTicks = FADE_TICKS_MAX;_plugin?.Dispose();
         _plugin = plugin;
         if (Bounds.Width > 0 && Bounds.Height > 0)
         {
@@ -372,6 +373,9 @@
         float tau = smoothingMs / 1000f;
         return Math.Clamp(dt / (tau + dt), 0.01f, 1f);
     }
-}
-
-
+    if (_fadeTicks > 0 && adapter is BudgetCanvas bcFade) {
+                float a = _fadeTicks / (float)FADE_TICKS_MAX; // 1->0
+                bcFade.Fade(0xFF000000, a * 0.22f); // subtle dim
+                _fadeTicks--;
+            }
+        }

--- a/PhoenixVisualizer.App\Views\PhxEditorWindow.axaml.cs
+++ b/PhoenixVisualizer.App\Views\PhxEditorWindow.axaml.cs
@@ -48,7 +48,13 @@
     public PhxEditorWindow()
     {
         InitializeComponent();
-        ViewModel = new PhxEditorViewModel();
+        _parameterEditor = this.FindControl<PhoenixVisualizer.App.Views.ParameterEditor>("ParameterEditor");
+        if (_parameterEditor != null)
+        {
+            _parameterEditor.ApplyRequested += (_,__) => { try { ViewModel?.ApplyParameters(); } catch {} };
+            _parameterEditor.RevertRequested += (_,__) => { try { ViewModel?.RevertParameters(); } catch {} };
+            _parameterEditor.LivePreviewChanged += (_,__) => { try { ViewModel?.SetLivePreview(true); } catch {} };
+        }ViewModel = new PhxEditorViewModel();
 
         // Initialize commands after ViewModel is created
         InitializeCommands();


--- a/PhoenixVisualizer.App\Views\QuickCommandWindow.axaml
+++ b/PhoenixVisualizer.App\Views\QuickCommandWindow.axaml
@@ -0,0 +1,10 @@
+<Window xmlns="https://github.com/avaloniaui"
+        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
+        x:Class="PhoenixVisualizer.App.Views.QuickCommandWindow"
+        Width="560" Height="420" CanResize="False"
+        Background="#0F141A" TransparencyLevelHint="AcrylicBlur">
+  <Grid RowDefinitions="Auto,*" Margin="10">
+    <TextBox x:Name="Search" Watermark="Type to search presetsâ€¦" />
+    <ListBox x:Name="List" Grid.Row="1" />
+  </Grid>
+</Window>
--- a/PhoenixVisualizer.App\Views\QuickCommandWindow.axaml.cs
+++ b/PhoenixVisualizer.App\Views\QuickCommandWindow.axaml.cs
@@ -0,0 +1,34 @@
+using Avalonia;
+using Avalonia.Controls;
+using Avalonia.Interactivity;
+using System;
+using System.Linq;
+
+namespace PhoenixVisualizer.App.Views
+{
+    public partial class QuickCommandWindow : Window
+    {
+        private readonly string[] _items;
+        public event Action<string>? ItemChosen;
+
+        public QuickCommandWindow(string[] items)
+        {
+            InitializeComponent();
+            _items = items;
+            var list = this.FindControl<ListBox>("List");
+            list.Items = _items;
+            var search = this.FindControl<TextBox>("Search");
+            search.GetObservable(TextBox.TextProperty).Subscribe(t => {
+                list.Items = string.IsNullOrWhiteSpace(t) ? _items : _items.Where(i => i.Contains(t, StringComparison.OrdinalIgnoreCase)).ToArray();
+            });
+            list.DoubleTapped += (_,__) => Choose();
+            list.KeyDown += (s,e) => { if (e.Key == Avalonia.Input.Key.Enter) Choose(); };
+        }
+
+        private void Choose()
+        {
+            var list = this.FindControl<ListBox>("List");
+            if (list.SelectedItem is string s) { ItemChosen?.Invoke(s); Close(); }
+        }
+    }
+}



--- a/PhoenixVisualizer.Visuals\NodeBarsReactive.cs
+++ b/PhoenixVisualizer.Visuals\NodeBarsReactive.cs
@@ -0,0 +1,22 @@
+using PhoenixVisualizer.Core.Nodes;
+
+namespace PhoenixVisualizer.Visuals
+{
+    public sealed class NodeBarsReactive : IVisualizerPlugin
+    {
+        private IEffectNode[] _stack;
+        public NodeBarsReactive()
+        {
+            _stack = new IEffectNode[] {
+                EffectRegistry.Create("ClearFrame"),
+                EffectRegistry.Create("SpectrumAnalyzer").With("Bars", true).With("Smoothing", 0.35f),
+                EffectRegistry.Create("ColorFade").With("Mode", "HSV").With("Speed", 0.25f),
+                EffectRegistry.Create("Glow").With("Radius", 6f).With("Intensity", 0.6f)
+            };
+        }
+        public void RenderFrame(AudioFeatures f, ISkiaCanvas canvas)
+        {
+            foreach (var node in _stack) node.Process(f, canvas);
+        }
+    }
+}

--- a/PhoenixVisualizer.Visuals\NodePulseTunnel.cs
+++ b/PhoenixVisualizer.Visuals\NodePulseTunnel.cs
@@ -0,0 +1,22 @@
+using PhoenixVisualizer.Core.Nodes;
+
+namespace PhoenixVisualizer.Visuals
+{
+    public sealed class NodePulseTunnel : IVisualizerPlugin
+    {
+        private IEffectNode[] _stack;
+        public NodePulseTunnel()
+        {
+            _stack = new IEffectNode[] {
+                EffectRegistry.Create("ClearFrame"),
+                EffectRegistry.Create("Waveform").With("Mode", "RadialRings").With("Gain", 1.0f),
+                EffectRegistry.Create("PolarWarp").With("Spin", 0.12f).With("Zoom", 0.15f),
+                EffectRegistry.Create("Trails").With("Decay", 0.86f)
+            };
+        }
+        public void RenderFrame(AudioFeatures f, ISkiaCanvas canvas)
+        {
+            foreach (var node in _stack) node.Process(f, canvas);
+        }
+    }
+}

--- a/PhoenixVisualizer.Visuals\NodeButterflyField.cs
+++ b/PhoenixVisualizer.Visuals\NodeButterflyField.cs
@@ -0,0 +1,22 @@
+using PhoenixVisualizer.Core.Nodes;
+
+namespace PhoenixVisualizer.Visuals
+{
+    public sealed class NodeButterflyField : IVisualizerPlugin
+    {
+        private IEffectNode[] _stack;
+        public NodeButterflyField()
+        {
+            _stack = new IEffectNode[] {
+                EffectRegistry.Create("ClearFrame"),
+                EffectRegistry.Create("Parametric").With("Formula", "butterfly").With("Count", 1800),
+                EffectRegistry.Create("ColorCycle").With("Speed", 0.35f),
+                EffectRegistry.Create("GaussianBlur").With("Radius", 2.0f)
+            };
+        }
+        public void RenderFrame(AudioFeatures f, ISkiaCanvas canvas)
+        {
+            foreach (var node in _stack) node.Process(f, canvas);
+        }
+    }
+}

