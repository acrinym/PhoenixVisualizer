--- a/PhoenixVisualizer.App\App.axaml.cs
+++ b/PhoenixVisualizer.App\App.axaml.cs
@@ -12,9 +12,11 @@
 using PhoenixVisualizer.Views;
 using PhoenixVisualizer.Visuals;
 
+using PhoenixVisualizer.App.Services;
+
 namespace PhoenixVisualizer.App;
 
-public partial class App : Application
+public partial class App : Application { private static SettingsService _settings = new SettingsService();
 {
     public override void Initialize()
     {
@@ -179,6 +181,7 @@
         }
 
         base.OnFrameworkInitializationCompleted();
+            _settings.Load();
     }
 
     private void DisableAvaloniaDataAnnotationValidation()


--- a/PhoenixVisualizer.Core\Color\ColorUtil.cs
+++ b/PhoenixVisualizer.Core\Color\ColorUtil.cs
@@ -0,0 +1,22 @@
+namespace PhoenixVisualizer.Core.Color
+{
+    public static class ColorUtil
+    {
+        public static uint HsvToRgb(float h, float s, float v)
+        {
+            h = (h % 360f + 360f) % 360f;
+            float c = v * s;
+            float x = c * (1 - MathF.Abs((h / 60f) % 2 - 1));
+            float m = v - c;
+            float r=0,g=0,b=0;
+            if (h < 60)      { r=c; g=x; b=0; }
+            else if (h <120) { r=x; g=c; b=0; }
+            else if (h <180) { r=0; g=c; b=x; }
+            else if (h <240) { r=0; g=x; b=c; }
+            else if (h <300) { r=x; g=0; b=c; }
+            else             { r=c; g=0; b=x; }
+            byte R=(byte)((r+m)*255), G=(byte)((g+m)*255), B=(byte)((b+m)*255);
+            return 0xFF000000u | ((uint)R<<16) | ((uint)G<<8) | (uint)B;
+        }
+    }
+}

--- a/PhoenixVisualizer.Visuals\RainbowMerkabaSuperscope.cs
+++ b/PhoenixVisualizer.Visuals\RainbowMerkabaSuperscope.cs
@@ -134,7 +134,7 @@
             float saturation = 0.8f + volume * 0.2f;
             float brightness = 0.7f + features.Bass * 0.3f;
 
-            uint color = HsvToRgb(dynamicHue, saturation, brightness);
+            uint color = PhoenixVisualizer.Core.Color.ColorUtil.HsvToRgb(dynamicHue, saturation, brightness);
 
             // Thicker lines on beat
             float lineWidth = beat ? 2.5f : 1.0f;
@@ -149,7 +149,7 @@
     }
 
     // HSV to RGB conversion for proper rainbow colors
-    private uint HsvToRgb(float h, float s, float v)
+    private uint PhoenixVisualizer.Core.Color.ColorUtil.HsvToRgb(float h, float s, float v)
     {
         float c = v * s;
         float x = c * (1 - MathF.Abs((h * 6) % 2 - 1));


--- a/PhoenixVisualizer.Visuals\PhoenixSpectrumPulse.cs
+++ b/PhoenixVisualizer.Visuals\PhoenixSpectrumPulse.cs
@@ -207,7 +207,7 @@
         if (hue < 0) hue += 360f;
 
         // Convert HSV to RGB
-        return HsvToRgb(hue, saturation, brightness);
+        return PhoenixVisualizer.Core.Color.ColorUtil.HsvToRgb(hue, saturation, brightness);
     }
 
     private float CalculatePulseEffect(int barIndex, float magnitude, bool beat)
@@ -291,7 +291,7 @@
         canvas.FillRect(20, indicatorY - 15, volumeBarWidth, 3, 0xFFFFFF00);
     }
 
-    private uint HsvToRgb(float hue, float saturation, float brightness)
+    private uint PhoenixVisualizer.Core.Color.ColorUtil.HsvToRgb(float hue, float saturation, float brightness)
     {
         // HSV to RGB conversion
         float c = brightness * saturation;


--- a/PhoenixVisualizer.Visuals\MinecartRollercoasterVisualizer.cs
+++ b/PhoenixVisualizer.Visuals\MinecartRollercoasterVisualizer.cs
@@ -516,7 +516,7 @@
                 VelocityX = (float)Math.Cos(angle) * 150f,
                 VelocityY = (float)Math.Sin(angle) * 150f,
                 VelocityZ = (_random.NextSingle() - 0.5f) * 50f,
-                Color = HsvToRgb(_random.NextSingle(), 1.0f, 1.0f), // Rainbow colors
+                Color = PhoenixVisualizer.Core.Color.ColorUtil.HsvToRgb(_random.NextSingle(), 1.0f, 1.0f), // Rainbow colors
                 Life = 1.0f,
                 MaxLife = 1.0f,
                 Size = 3f,
@@ -886,7 +886,7 @@
         return (uint)(0xFF000000 | ((uint)r << 16) | ((uint)g << 8) | (uint)b);
     }
 
-    private uint HsvToRgb(float h, float s, float v)
+    private uint PhoenixVisualizer.Core.Color.ColorUtil.HsvToRgb(float h, float s, float v)
     {
         float c = v * s;
         float x = c * (1 - MathF.Abs((h * 6) % 2 - 1));


