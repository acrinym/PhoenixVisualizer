--- a/PhoenixVisualizer.Editor\Views\MainWindow.axaml
+++ b/PhoenixVisualizer.Editor\Views\MainWindow.axaml
@@ -0,0 +1,273 @@
+<Window xmlns="https://github.com/avaloniaui"
+        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
+        xmlns:vm="using:PhoenixVisualizer.Editor.ViewModels"
+        xmlns:r="using:PhoenixVisualizer.Editor.Rendering"
+        xmlns:views="using:PhoenixVisualizer.Editor.Views"
+        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
+        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
+        mc:Ignorable="d" d:DesignWidth="1200" d:DesignHeight="800"
+        x:Class="PhoenixVisualizer.Editor.Views.MainWindow"
+        x:DataType="vm:MainWindowViewModel"
+        Icon="/Assets/avalonia-logo.ico"
+        Title="PhoenixVisualizer.Editor"
+        Width="1200" Height="800">
+
+    <Design.DataContext>
+        <!-- This only sets the DataContext for the previewer in an IDE,
+             to set the actual DataContext for runtime, set the DataContext property in code (look at App.axaml.cs) -->
+        <vm:MainWindowViewModel/>
+    </Design.DataContext>
+
+    <Grid>
+        <Grid.RowDefinitions>
+            <RowDefinition Height="Auto"/>
+            <RowDefinition Height="*"/>
+        </Grid.RowDefinitions>
+        
+        <!-- Top Toolbar -->
+        <Border Grid.Row="0" BorderBrush="Gray" BorderThickness="0,0,0,1" Background="#F0F0F0" Padding="10">
+            <StackPanel Orientation="Horizontal" Spacing="10">
+                <TextBlock Text="Phoenix Visualizer Editor" FontSize="18" FontWeight="Bold" VerticalAlignment="Center"/>
+                <Separator Orientation="Vertical" Margin="10,0"/>
+                <Button Content="New Project" Padding="10,5"/>
+                <Button Content="Open Project" Padding="10,5"/>
+                <Button Content="Save Project" Padding="10,5"/>
+                <Separator Orientation="Vertical" Margin="10,0"/>
+                <Button Content="Settings" Padding="10,5"/>
+                <Button Content="Help" Padding="10,5"/>
+            </StackPanel>
+        </Border>
+
+        <!-- Main Content Area -->
+        <Grid Grid.Row="1">
+            <Grid.ColumnDefinitions>
+                <ColumnDefinition Width="250" MinWidth="200"/>
+                <ColumnDefinition Width="*"/>
+                <ColumnDefinition Width="300" MinWidth="250"/>
+            </Grid.ColumnDefinitions>
+            
+            <!-- Left Panel: Project Browser -->
+            <Border Grid.Column="0" BorderBrush="Gray" BorderThickness="0,0,1,0" Background="#FAFAFA">
+                <Grid>
+                    <Grid.RowDefinitions>
+                        <RowDefinition Height="Auto"/>
+                        <RowDefinition Height="*"/>
+                    </Grid.RowDefinitions>
+                    
+                    <!-- Project Info -->
+                    <Border Grid.Row="0" BorderBrush="Gray" BorderThickness="0,0,0,1" Padding="10">
+                        <StackPanel>
+                            <TextBlock Text="Project Browser" FontSize="16" FontWeight="Bold" Margin="0,0,0,10"/>
+                            <TextBlock Text="Phoenix Visualizer" FontSize="12" Foreground="Gray"/>
+                            <TextBlock Text="Version 1.0.0" FontSize="10" Foreground="Gray"/>
+                        </StackPanel>
+                    </Border>
+                    
+                    <!-- Project Structure -->
+                    <ScrollViewer Grid.Row="1" Padding="10">
+                        <StackPanel>
+                            <Expander Header="Visualizations" IsExpanded="True">
+                                <StackPanel Margin="10,0,0,0">
+                                    <Button Content="+ New Visualization" HorizontalAlignment="Stretch" Margin="0,2"/>
+                                    <Button Content="Preset Editor" HorizontalAlignment="Stretch" Margin="0,2" 
+                                            Command="{Binding SwitchToPresetEditorCommand}"/>
+                                    <Button Content="Effects Graph Editor" HorizontalAlignment="Stretch" Margin="0,2"
+                                            Command="{Binding SwitchToEffectsGraphEditorCommand}"/>
+                                </StackPanel>
+                            </Expander>
+                            
+                            <Expander Header="Assets" IsExpanded="False">
+                                <StackPanel Margin="10,0,0,0">
+                                    <Button Content="+ Import Asset" HorizontalAlignment="Stretch" Margin="0,2"/>
+                                    <Button Content="Images" HorizontalAlignment="Stretch" Margin="0,2"/>
+                                    <Button Content="Audio" HorizontalAlignment="Stretch" Margin="0,2"/>
+                                    <Button Content="Video" HorizontalAlignment="Stretch" Margin="0,2"/>
+                                </StackPanel>
+                            </Expander>
+                            
+                            <Expander Header="Templates" IsExpanded="False">
+                                <StackPanel Margin="10,0,0,0">
+                                    <Button Content="+ Create Template" HorizontalAlignment="Stretch" Margin="0,2"/>
+                                    <Button Content="Starfield" HorizontalAlignment="Stretch" Margin="0,2"/>
+                                    <Button Content="Particle System" HorizontalAlignment="Stretch" Margin="0,2"/>
+                                    <Button Content="Audio Visualizer" HorizontalAlignment="Stretch" Margin="0,2"/>
+                                </StackPanel>
+                            </Expander>
+                        </StackPanel>
+                    </ScrollViewer>
+                </Grid>
+            </Border>
+
+            <!-- Center: Tabbed Editor Area -->
+            <Border Grid.Column="1" BorderBrush="Gray" BorderThickness="1" Margin="5">
+                <TabControl Name="EditorTabs">
+                    <!-- Preset Editor Tab -->
+                    <TabItem Header="Preset Editor">
+                        <Grid>
+                            <Grid.ColumnDefinitions>
+                                <ColumnDefinition Width="250" MinWidth="200"/>
+                                <ColumnDefinition Width="*"/>
+                                <ColumnDefinition Width="300" MinWidth="250"/>
+                            </Grid.ColumnDefinitions>
+                            
+                            <!-- Left Panel: Preset Browser -->
+                            <Border Grid.Column="0" BorderBrush="Gray" BorderThickness="0,0,1,0" Padding="10">
+                                <StackPanel>
+                                    <TextBlock Text="Preset Browser" FontSize="16" FontWeight="Bold" Margin="0,0,0,10"/>
+                                    <TextBox Name="PresetInput" Text="{Binding PresetCode}" Margin="0,0,0,10"/>
+                                    <Button Content="Load Preset" HorizontalAlignment="Stretch" Margin="0,0,0,10" Command="{Binding LoadPresetCommand}"/>
+                                    <Button Content="Save Preset" HorizontalAlignment="Stretch" Margin="0,0,0,10" Command="{Binding SavePresetCommand}"/>
+                                    <Separator Margin="0,10"/>
+                                    <TextBlock Text="Recent Presets" FontSize="14" FontWeight="Bold" Margin="0,0,0,10"/>
+                                    <ListBox Name="RecentPresets" Height="200" ItemsSource="{Binding RecentPresets}" 
+                                             DoubleTapped="OnRecentPresetDoubleTapped">
+                                        <ListBox.ItemTemplate>
+                                            <DataTemplate>
+                                                <TextBlock Text="{Binding}"/>
+                                            </DataTemplate>
+                                        </ListBox.ItemTemplate>
+                                    </ListBox>
+                                </StackPanel>
+                            </Border>
+                            
+                            <!-- Center: Visualization Canvas -->
+                            <Border Grid.Column="1" BorderBrush="Gray" BorderThickness="1" Margin="5">
+                <DockPanel>
+                    <!-- Control Bar -->
+                    <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" Background="#111820" Padding="8" Spacing="8">
+                        <Button Name="BtnPrev" Content="⟨" ToolTip.Tip="Previous preset" />
+                        <Button Name="BtnPlayPause" Content="▶" ToolTip.Tip="Play/Pause" />
+                        <Button Name="BtnNext" Content="⟩" ToolTip.Tip="Next preset" />
+                        <Button Name="BtnRandom" Content="🎲" ToolTip.Tip="Randomize (no repeat)" />
+                        <Separator Width="16"/>
+                        <TextBlock Text="Sensitivity" Foreground="#D0D0D0" VerticalAlignment="Center" Margin="8,0,2,0"/>
+                        <Slider Name="SensitivitySlider" Minimum="0.2" Maximum="2.0" Width="140" Value="1.0"/>
+                        <TextBlock Text="Smoothing" Foreground="#D0D0D0" VerticalAlignment="Center" Margin="12,0,2,0"/>
+                        <Slider Name="SmoothingSlider" Minimum="0.0" Maximum="0.95" Width="140" Value="0.35"/>
+                        <TextBlock Text="MaxDraw" Foreground="#D0D0D0" VerticalAlignment="Center" Margin="12,0,2,0"/>
+                        <Slider Name="MaxDrawSlider" Minimum="10000" Maximum="120000" Width="160" Value="40000"/>
+                        <ToggleSwitch Name="DiagToggle" Content="Diagnostics" Margin="16,0,0,0"/>
+                    </StackPanel>
+
+                    <!-- Render Surface -->
+                    <r:RenderSurface x:Name="RenderHost"/>
+                    
+                    <!-- Status Bar -->
+                    <Border DockPanel.Dock="Bottom" Background="#1d2630" Padding="6">
+                        <StackPanel Orientation="Horizontal" Spacing="12">
+                            <TextBlock Name="StatusFps" Text="FPS: —" Foreground="#CFE8FF"/>
+                            <TextBlock Name="StatusMs" Text="ms: —" Foreground="#CFE8FF"/>
+                            <TextBlock Name="StatusDraw" Text="draw: —" Foreground="#CFE8FF"/>
+                            <TextBlock Name="StatusPreset" Text="Preset: —" Foreground="#CFE8FF"/>
+                        </StackPanel>
+                    </Border>
+                </DockPanel>
+            </Border>
+                            
+                            <!-- Right Panel: Properties -->
+                            <Border Grid.Column="2" BorderBrush="Gray" BorderThickness="1,0,0,0" Padding="10">
+                                <StackPanel>
+                                    <TextBlock Text="Properties" FontSize="16" FontWeight="Bold" Margin="0,0,0,10"/>
+                                    
+                                    <TextBlock Text="Points" FontWeight="Bold" Margin="0,10,0,5"/>
+                                    <Slider Name="PointsSlider" Minimum="16" Maximum="1024" Value="{Binding Points}" TickFrequency="64" IsSnapToTickEnabled="True"/>
+                                    <TextBlock Text="{Binding Points, StringFormat='{}{0:F0}'}" HorizontalAlignment="Center"/>
+                                    
+                                    <TextBlock Text="Mode" FontWeight="Bold" Margin="0,10,0,5"/>
+                                    <ComboBox Name="ModeCombo" SelectedItem="{Binding Mode}" ItemsSource="{Binding AvailableModes}"/>
+                                    
+                                    <TextBlock Text="Source" FontWeight="Bold" Margin="0,10,0,5"/>
+                                    <ComboBox Name="SourceCombo" SelectedItem="{Binding Source}" ItemsSource="{Binding AvailableSources}"/>
+                                    
+                                    <Separator Margin="0,20"/>
+                                    <TextBlock Text="Audio Controls" FontSize="14" FontWeight="Bold" Margin="0,0,0,10"/>
+                                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
+                                        <Button Content="â–¶" Width="40" Height="30" Margin="2" Command="{Binding PlayCommand}"/>
+                                        <Button Content="â¸" Width="40" Height="30" Margin="2" Command="{Binding PauseCommand}"/>
+                                        <Button Content="â¹" Width="40" Height="30" Margin="2" Command="{Binding StopCommand}"/>
+                                    </StackPanel>
+                                    <TextBlock Text="{Binding CurrentTime, StringFormat='Time: {0:mm\\:ss}'}" HorizontalAlignment="Center" Margin="0,5,0,0"/>
+                                    <TextBlock Text="{Binding TotalTime, StringFormat='Total: {0:mm\\:ss}'}" HorizontalAlignment="Center" Margin="0,2,0,0"/>
+                                </StackPanel>
+                            </Border>
+                        </Grid>
+                    </TabItem>
+                    
+                    <!-- Effects Graph Editor Tab -->
+                    <TabItem Header="Effects Graph Editor">
+                        <views:EffectsGraphEditor/>
+                    </TabItem>
+                </TabControl>
+            </Border>
+
+            <!-- Right Panel: Properties & Inspector -->
+            <Border Grid.Column="2" BorderBrush="Gray" BorderThickness="1,0,0,0" Background="#FAFAFA">
+                <Grid>
+                    <Grid.RowDefinitions>
+                        <RowDefinition Height="Auto"/>
+                        <RowDefinition Height="*"/>
+                    </Grid.RowDefinitions>
+                    
+                    <!-- Tab Headers -->
+                    <Border Grid.Row="0" BorderBrush="Gray" BorderThickness="0,0,0,1" Background="#E0E0E0">
+                        <StackPanel Orientation="Horizontal">
+                            <Button Name="PropertiesTab" Content="Properties" Padding="15,8" 
+                                    Background="{Binding SelectedTab, Converter={x:Static ObjectConverters.Equal}, ConverterParameter='Properties'}, ConverterParameter='#CCCCCC,Transparent'}"
+                                    Command="{Binding SelectTabCommand}" CommandParameter="Properties"/>
+                            <Button Name="InspectorTab" Content="Inspector" Padding="15,8"
+                                    Background="{Binding SelectedTab, Converter={x:Static ObjectConverters.Equal}, ConverterParameter='Inspector'}, ConverterParameter='#CCCCCC,Transparent'}"
+                                    Command="{Binding SelectTabCommand}" CommandParameter="Inspector"/>
+                        </StackPanel>
+                    </Border>
+                    
+                    <!-- Tab Content -->
+                    <Grid Grid.Row="1">
+                        <!-- Properties Tab -->
+                        <ScrollViewer Name="PropertiesContent" IsVisible="{Binding SelectedTab, Converter={x:Static ObjectConverters.Equal}, ConverterParameter='Properties'}" Padding="10">
+                            <StackPanel>
+                                <TextBlock Text="Project Properties" FontSize="16" FontWeight="Bold" Margin="0,0,0,15"/>
+                                
+                                <TextBlock Text="Project Name" FontWeight="Bold" Margin="0,10,0,5"/>
+                                <TextBox Text="{Binding ProjectName}" Margin="0,0,0,10"/>
+                                
+                                <TextBlock Text="Description" FontWeight="Bold" Margin="0,10,0,5"/>
+                                <TextBox Text="{Binding ProjectDescription}" Height="60" AcceptsReturn="True" Margin="0,0,0,10"/>
+                                
+                                <TextBlock Text="Author" FontWeight="Bold" Margin="0,10,0,5"/>
+                                <TextBox Text="{Binding ProjectAuthor}" Margin="0,0,0,10"/>
+                                
+                                <TextBlock Text="Version" FontWeight="Bold" Margin="0,10,0,5"/>
+                                <TextBox Text="{Binding ProjectVersion}" Margin="0,0,0,10"/>
+                                
+                                <Separator Margin="0,15"/>
+                                <TextBlock Text="Rendering Settings" FontSize="14" FontWeight="Bold" Margin="0,0,0,10"/>
+                                
+                                <TextBlock Text="Target FPS" FontWeight="Bold" Margin="0,10,0,5"/>
+                                <Slider Minimum="15" Maximum="120" Value="{Binding TargetFPS}" TickFrequency="15" IsSnapToTickEnabled="True"/>
+                                <TextBlock Text="{Binding TargetFPS, StringFormat='{}{0} FPS'}" HorizontalAlignment="Center" Margin="0,0,0,10"/>
+                                
+                                <TextBlock Text="Resolution" FontWeight="Bold" Margin="0,10,0,5"/>
+                                <ComboBox SelectedItem="{Binding Resolution}" ItemsSource="{Binding AvailableResolutions}"/>
+                            </StackPanel>
+                        </ScrollViewer>
+                        
+                        <!-- Inspector Tab -->
+                        <ScrollViewer Name="InspectorContent" IsVisible="{Binding SelectedTab, Converter={x:Static ObjectConverters.Equal}, ConverterParameter='Inspector'}" Padding="10">
+                            <StackPanel>
+                                <TextBlock Text="Project Inspector" FontSize="16" FontWeight="Bold" Margin="0,0,0,15"/>
+                                
+                                <TextBlock Text="Selected Item" FontWeight="Bold" Margin="0,10,0,5"/>
+                                <TextBlock Text="{Binding SelectedItemName}" FontStyle="Italic" Margin="0,0,0,15"/>
+                                
+                                <TextBlock Text="Item Properties" FontSize="14" FontWeight="Bold" Margin="0,0,0,10"/>
+                                <TextBlock Text="No item selected" FontStyle="Italic" Foreground="Gray"/>
+                            </StackPanel>
+                        </ScrollViewer>
+                    </Grid>
+                </Grid>
+            </Border>
+        </Grid>
+    </Grid>
+</Window>
+
+


--- a/PhoenixVisualizer.Editor\Views\MainWindow.axaml.cs
+++ b/PhoenixVisualizer.Editor\Views\MainWindow.axaml.cs
@@ -6,13 +6,37 @@
 
 public partial class MainWindow : Window
 {
+    private readonly DispatcherTimer _uiTimer = new() { Interval = TimeSpan.FromMilliseconds(250) };
+{
     private RenderSurface? RenderSurfaceControl => this.FindControl<RenderSurface>("RenderHost");
 
     public MainWindow()
     {
         InitializeComponent();
-        
-        // Set up the ViewModel
+
+        var prev = this.FindControl<Button>("BtnPrev");
+        var next = this.FindControl<Button>("BtnNext");
+        var play = this.FindControl<Button>("BtnPlayPause");
+        var rand = this.FindControl<Button>("BtnRandom");
+        var diag = this.FindControl<ToggleSwitch>("DiagToggle");
+        var sens = this.FindControl<Slider>("SensitivitySlider");
+        var smooth = this.FindControl<Slider>("SmoothingSlider");
+        var maxdraw = this.FindControl<Slider>("MaxDrawSlider");
+
+        prev.Click += (_,__) => (DataContext as MainWindowViewModel)?.PrevPreset();
+        next.Click += (_,__) => (DataContext as MainWindowViewModel)?.NextPreset();
+        rand.Click += (_,__) => (DataContext as MainWindowViewModel)?.RandomizePreset();
+        play.Click += (_,__) => (DataContext as MainWindowViewModel)?.TogglePlayPause();
+
+        diag.Checked += (_,__) => RenderSurfaceControl?.ToggleDiagnostics();
+        diag.Unchecked += (_,__) => RenderSurfaceControl?.ToggleDiagnostics();
+
+        sens.PropertyChanged += (_,e) => { if (e.Property == RangeBase.ValueProperty) RenderSurfaceControl?.SetSensitivity((float)sens.Value); };
+        smooth.PropertyChanged += (_,e) => { if (e.Property == RangeBase.ValueProperty) RenderSurfaceControl?.SetSmoothing((float)smooth.Value); };
+        maxdraw.PropertyChanged += (_,e) => { if (e.Property == RangeBase.ValueProperty) RenderSurfaceControl?.SetMaxDrawCalls((int)maxdraw.Value); };
+
+        _uiTimer.Tick += (_,__) => UpdateStatusBar();
+        _uiTimer.Start();// Set up the ViewModel
         DataContext = new MainWindowViewModel();
         
         // spin up a default AVS plugin so the canvas isn't blank


--- a/PhoenixVisualizer.Editor\Views\ParameterEditor.axaml
+++ b/PhoenixVisualizer.Editor\Views\ParameterEditor.axaml
@@ -0,0 +1,17 @@
+<UserControl xmlns="https://github.com/avaloniaui"
+             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
+             x:Class="PhoenixVisualizer.Editor.Views.ParameterEditor">
+  <ScrollViewer>
+    <StackPanel>
+      <DockPanel Margin="0,0,0,8">
+        <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" Spacing="8">
+          <ToggleSwitch Name="LivePreviewToggle" Content="Live Preview" IsChecked="True"/>
+          <Button Name="ApplyBtn" Content="Apply" />
+          <Button Name="RevertBtn" Content="Revert" />
+          <TextBox Name="SearchBox" Watermark="Filter parameters…" Width="220"/>
+        </StackPanel>
+      </DockPanel>
+      <StackPanel x:Name="Root" Margin="6" Spacing="8"/>
+    </StackPanel>
+  </ScrollViewer>
+</UserControl>


--- a/PhoenixVisualizer.Editor\Views\ParameterEditor.axaml.cs
+++ b/PhoenixVisualizer.Editor\Views\ParameterEditor.axaml.cs
@@ -1,221 +1,51 @@
+using Avalonia;
 using Avalonia.Controls;
 using Avalonia.Interactivity;
-using PhoenixVisualizer.Parameters;
-using System.Collections.Generic;
+using Avalonia.Controls.Primitives;
+using System;
+using System.Linq;
 
-namespace PhoenixVisualizer.Editor.Views;
+namespace PhoenixVisualizer.Editor.Views
+{
+    public partial class ParameterEditor : UserControl
+    {
+        public ParameterEditor()
+        {
+            InitializeComponent();
 
-public partial class ParameterEditor : UserControl
-{
-    public string? VisualizerId { get; private set; }
-    public string VisualizerName { get; private set; } = "";
+            var live = this.FindControl<ToggleSwitch>("LivePreviewToggle");
+            var apply = this.FindControl<Button>("ApplyBtn");
+            var revert = this.FindControl<Button>("RevertBtn");
+            var search = this.FindControl<TextBox>("SearchBox");
 
-    public ParameterEditor()
-    {
-        InitializeComponent();
-        ParamRegistry.DefinitionsChanged += OnDefs;
-    }
+            live.Checked += (_,__) => RaiseEvent(new RoutedEventArgs(LivePreviewChangedEvent));
+            live.Unchecked += (_,__) => RaiseEvent(new RoutedEventArgs(LivePreviewChangedEvent));
+            apply.Click += (_,__) => RaiseEvent(new RoutedEventArgs(ApplyRequestedEvent));
+            revert.Click += (_,__) => RaiseEvent(new RoutedEventArgs(RevertRequestedEvent));
+            search.GetObservable(TextBox.TextProperty).Subscribe(_ => FilterParameters(search.Text));
+        }
 
-    public void LoadFor(string visualizerId, string visualizerName)
-    {
-        VisualizerId = visualizerId;
-        VisualizerName = visualizerName;
-        Rebuild();
-    }
+        public static readonly RoutedEvent<RoutedEventArgs> LivePreviewChangedEvent =
+            RoutedEvent.Register<ParameterEditor, RoutedEventArgs>(nameof(LivePreviewChanged), RoutingStrategies.Bubble);
+        public static readonly RoutedEvent<RoutedEventArgs> ApplyRequestedEvent =
+            RoutedEvent.Register<ParameterEditor, RoutedEventArgs>(nameof(ApplyRequested), RoutingStrategies.Bubble);
+        public static readonly RoutedEvent<RoutedEventArgs> RevertRequestedEvent =
+            RoutedEvent.Register<ParameterEditor, RoutedEventArgs>(nameof(RevertRequested), RoutingStrategies.Bubble);
 
-    private void OnDefs(string vid) { if (VisualizerId == vid) Rebuild(); }
+        public event EventHandler<RoutedEventArgs> LivePreviewChanged { add => AddHandler(LivePreviewChangedEvent, value); remove => RemoveHandler(LivePreviewChangedEvent, value); }
+        public event EventHandler<RoutedEventArgs> ApplyRequested { add => AddHandler(ApplyRequestedEvent, value); remove => RemoveHandler(ApplyRequestedEvent, value); }
+        public event EventHandler<RoutedEventArgs> RevertRequested { add => AddHandler(RevertRequestedEvent, value); remove => RemoveHandler(RevertRequestedEvent, value); }
 
-    private void Rebuild()
-    {
-        Root.Children.Clear();
-        if (VisualizerId is null) return;
-        
-        var defs = ParamRegistry.GetDefs(VisualizerId);
-        var vals = ParamRegistry.GetValues(VisualizerId);
-        
-        foreach (var def in defs.Values)
+        private void FilterParameters(string? term)
         {
-            Control ctrl = def.Type switch
+            var root = this.FindControl<StackPanel>("Root");
+            if (root == null) return;
+            foreach (var child in root.Children.OfType<Control>())
             {
-                ParamType.Checkbox => BuildCheckbox(def, vals),
-                ParamType.Dropdown => BuildDropdown(def, vals),
-                ParamType.Color    => BuildText(def, vals),
-                ParamType.Slider or ParamType.Dial => BuildSlider(def, vals),
-                ParamType.File or ParamType.Directory => BuildText(def, vals),
-                _ => BuildText(def, vals)
-            };
-            
-            var panel = new StackPanel { Spacing = 4 };
-            panel.Children.Add(new TextBlock { Text = def.Label, FontWeight = Avalonia.Media.FontWeight.Bold });
-            panel.Children.Add(ctrl);
-            if (!string.IsNullOrWhiteSpace(def.Description))
-                panel.Children.Add(new TextBlock { Text = def.Description, Classes = { "muted" } });
-            
-            Root.Children.Add(panel);
+                if (string.IsNullOrWhiteSpace(term)) { child.IsVisible = true; continue; }
+                var text = child.ToString() ?? "";
+                child.IsVisible = text.Contains(term, StringComparison.OrdinalIgnoreCase);
+            }
         }
     }
-
-    private Control BuildCheckbox(ParamDef def, IReadOnlyDictionary<string, object?> vals)
-    {
-        var cb = new CheckBox { IsChecked = vals.TryGetValue(def.Key, out var v) && v is bool b && b };
-        cb.IsCheckedChanged += (_, __) => Update(def.Key, cb.IsChecked ?? false);
-        return cb;
-    }
-
-    private Control BuildDropdown(ParamDef def, IReadOnlyDictionary<string, object?> vals)
-    {
-        var combo = new ComboBox { ItemsSource = def.Options ?? new(), SelectedIndex = 0 };
-        if (vals.TryGetValue(def.Key, out var v) && v is string s && def.Options is { Count: >0 })
-            combo.SelectedIndex = Math.Max(0, def.Options.IndexOf(s));
-        combo.SelectionChanged += (_, __) =>
-        {
-            var sel = combo.SelectedItem as string ?? "";
-            Update(def.Key, sel);
-        };
-        return combo;
-    }
-
-    private Control BuildSlider(ParamDef def, IReadOnlyDictionary<string, object?> vals)
-    {
-        var min = def.Min ?? 0; var max = def.Max ?? 1;
-        var s = new Slider { Minimum = min, Maximum = max, TickFrequency = (max-min)/100.0 };
-        if (vals.TryGetValue(def.Key, out var v) && v is IConvertible)
-            s.Value = Convert.ToDouble(v);
-        s.PropertyChanged += (_, e) =>
-        {
-            if (e.Property.Name == nameof(Slider.Value))
-                Update(def.Key, s.Value);
-        };
-        return s;
-    }
-
-    private Control BuildText(ParamDef def, IReadOnlyDictionary<string, object?> vals)
-    {
-        var tb = new TextBox { Text = vals.TryGetValue(def.Key, out var v) ? v?.ToString() ?? "" : "" };
-        tb.LostFocus += (_, __) => Update(def.Key, tb.Text ?? "");
-        return tb;
-    }
-
-    private void Update(string key, object? value)
-    {
-        if (VisualizerId is null) return;
-        ParamRegistry.Set(VisualizerId, key, value);
-    }
-}
-
-
-[PhoenixVisualizer.Editor\Views\PhxEditorWindow.axaml]
-<Window xmlns="https://github.com/avaloniaui"
-        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
-        xmlns:edit="clr-namespace:AvaloniaEdit;assembly=AvaloniaEdit"
-        xmlns:r="using:PhoenixVisualizer.Rendering"
-        xmlns:views="using:PhoenixVisualizer.Editor.Views"
-        xmlns:cvt="using:PhoenixVisualizer.Editor.Converters"
-        xmlns:Behaviors="clr-namespace:PhoenixVisualizer.Editor.Behaviors"
-        xmlns:vm="using:PhoenixVisualizer.Editor.ViewModels"
-        x:Class="PhoenixVisualizer.Editor.Views.PhxEditorWindow"
-        x:DataType="vm:PhxEditorViewModel"
-        Width="1280" Height="830" Title="Phoenix Visualizer - PHX Editor">
-  <Window.Styles>
-    <!-- High-contrast for readability -->
-    <Style Selector="TextBox">
-      <Setter Property="Foreground" Value="#EAEAEA"/>
-      <Setter Property="Background" Value="#1E1E1E"/>
-      <Setter Property="BorderBrush" Value="#3A3A3A"/>
-    </Style>
-    <Style Selector="TextBlock">
-      <Setter Property="Foreground" Value="#EAEAEA"/>
-    </Style>
-    <Style Selector="ListBox">
-      <Setter Property="Foreground" Value="#EAEAEA"/>
-      <Setter Property="Background" Value="#151515"/>
-    </Style>
-  </Window.Styles>
-  <Grid RowDefinitions="Auto,*" >
-    <!-- Toolbar -->
-    <StackPanel Orientation="Horizontal" Spacing="8" Margin="8">
-      <Button Content="Import AVS"   Command="{Binding ImportAvsCommand}" />
-      <Button Content="Reimport"     Command="{Binding ReimportCommand}" />
-      <Button Content="New Phoenix"  Command="{Binding NewPhxVisCommand}" />
-      <Button Content="Export AVS"   Command="{Binding ExportAvsCommand}" />
-      <Button Content="Export PHXVis" Command="{Binding ExportPhxVisCommand}" />
-      <Separator Width="12"/>
-      <Button Content="Compile" Command="{Binding CompileCommand}" />
-      <Button Content="Test"    Command="{Binding TestCodeCommand}" />
-      <Separator Width="12"/>
-      <Button Content="{Binding PreviewDockButtonText}" Command="{Binding ToggleUndockCommand}" />
-      <CheckBox Content="Live Apply" IsChecked="{Binding LiveApply}" Margin="8,0,0,0"/>
-      <TextBlock Text="{Binding StatusText}" Margin="12,0,0,0" VerticalAlignment="Center"/>
-    </StackPanel>
-
-    <!-- 3-pane layout -->
-    <Grid Grid.Row="1" ColumnDefinitions="*,Auto,1.3*,Auto,2*">
-      <!-- LEFT: Code editor (visible when Superscope selected) -->
-      <Border Grid.Column="0" Background="#151515" Padding="6">
-        <Grid RowDefinitions="Auto,*">
-          <TextBlock Text="Unified Phoenix Code" FontWeight="Bold" Margin="0,0,0,6"/>
-          <TabControl IsVisible="{Binding IsSuperscopeSelected}">
-            <TabItem Header="Init">
-              <edit:TextEditor x:Name="InitEditor" ShowLineNumbers="True" FontFamily="Consolas"
-                               SyntaxHighlighting="C#" Document="{Binding ScriptInit, Converter={x:Static cvt:StringToDocumentConverter.Instance}}"/>
-            </TabItem>
-            <TabItem Header="Frame">
-              <edit:TextEditor x:Name="FrameEditor" ShowLineNumbers="True" FontFamily="Consolas"
-                               SyntaxHighlighting="C#" Document="{Binding ScriptFrame, Converter={x:Static cvt:StringToDocumentConverter.Instance}}"/>
-            </TabItem>
-            <TabItem Header="Beat">
-              <edit:TextEditor x:Name="BeatEditor" ShowLineNumbers="True" FontFamily="Consolas"
-                               SyntaxHighlighting="C#" Document="{Binding ScriptBeat, Converter={x:Static cvt:StringToDocumentConverter.Instance}}"/>
-            </TabItem>
-            <TabItem Header="Point">
-              <edit:TextEditor x:Name="PointEditor" ShowLineNumbers="True" FontFamily="Consolas"
-                               SyntaxHighlighting="C#" Document="{Binding ScriptPoint, Converter={x:Static cvt:StringToDocumentConverter.Instance}}"/>
-            </TabItem>
-          </TabControl>
-        </Grid>
-      </Border>
-
-      <GridSplitter Grid.Column="1" Width="6" Background="#2B2B2B" ResizeBehavior="BasedOnAlignment" />
-
-      <!-- MIDDLE: Palette + Stack + Parameters -->
-      <Grid Grid.Column="2" RowDefinitions="Auto,*,Auto,*"
-            ColumnDefinitions="220,6,*">
-        <TextBlock Grid.ColumnSpan="3" Text="Effects" FontWeight="Bold" Margin="6,0,0,6"/>
-
-        <!-- Palette (drag from here) -->
-        <Border Grid.Row="1" Grid.Column="0" Margin="6,0,0,0" Background="#1B1B1B">
-          <ListBox x:Name="NodePalette"
-                   ItemsSource="{Binding AvailableNodes}"
-                   SelectionMode="Single"
-                   PointerPressed="OnPalettePointerPressed"
-                   Background="#1B1B1B"/>
-        </Border>
-        <GridSplitter Grid.Row="1" Grid.Column="1" Width="6" Background="#2B2B2B" ResizeBehavior="BasedOnAlignment"/>
-
-        <!-- Stack (reorder + accept drops) -->
-        <Border Grid.Row="1" Grid.Column="2" Margin="0,0,6,0" Background="#151515">
-          <ListBox x:Name="EffectStackList"
-                   ItemsSource="{Binding EffectStack}"
-                   SelectedItem="{Binding SelectedEffect}"
-                   DragDrop.DragOver="OnEffectStackDragOver"
-                   DragDrop.Drop="OnEffectStackDrop"
-                   Behaviors:ReorderableListBoxBehavior.IsEnabled="True"/>
-        </Border>
-
-        <TextBlock Grid.Row="2" Grid.ColumnSpan="3" Text="Parameters" FontWeight="Bold" Margin="6,12,0,6"/>
-        <views:ParameterEditor Grid.Row="3" Grid.ColumnSpan="3" x:Name="ParameterEditor"/>
-      </Grid>
-
-      <GridSplitter Grid.Column="3" Width="6" Background="#2B2B2B" ResizeBehavior="BasedOnAlignment" />
-
-      <!-- RIGHT: Docked Preview (passive; cannot take focus) -->
-      <Border Grid.Column="4" Background="#0E0E0E">
-        <Grid>
-          <r:RenderSurface x:Name="PreviewSurface" Focusable="False" IsHitTestVisible="False"/>
-        </Grid>
-      </Border>
-    </Grid>
-  </Grid>
-</Window>
-
-
+}

--- a/PhoenixVisualizer.App\Rendering\RenderSurface.cs
+++ b/PhoenixVisualizer.App\Rendering\RenderSurface.cs
@@ -319,6 +319,8 @@
             
             // Create PluginHost AudioFeatures for plugin rendering
             var pluginFeatures = AudioFeaturesImpl.CreateEnhanced(
+                gain: _uiSensitivity,
+                smoothing: _uiSmoothing,
                 _smoothFft,  // fft
                 wave,        // waveform
                 rms,         // rms


