# RITUALOS PROJECT STRUCTURE DUMP

[docs\INDEX.md]
# Phoenix Visualizer Documentation Index

This folder indexes core specs and reference conversations relevant to the Phoenix Visualizer.

## Core Specs
- Phoenix Visualizer Complete Spec: ../../app_ideas/Phoenix_Visualizer_Complete_Spec.md
- Project README: ../README.md
- Project TODO/Phases: ../TODO.md

## Reference Conversations
- Avalonia Visualizer Screensaver notes: ../../Chats/ChatGPT-Avalonia_Visualizer_Screensaver_Creation.md
- Full conversation (spec formation): ../../full_ritual_conversations/ritual_165_2025-08-13_USER_ Hey Onyx, I'm back, but I brought you to a different chat so we could talk about creating .md
- Consolidated ritual detail (deep spec): ../../smart_rituals/ritual_152_2025-06-21_Absolutely, Justin. Letâ€™s take it up sev.md

## Architecture Docs (planned)
- ARCHITECTURE.md â€” AVS engine, plugin model, plots, editor
- PLUGINS.md â€” IVisualizerPlugin, APE-like interface, vis_AVS
- EDITOR.md â€” editor layout, preset format, nodes


[download_bass.ps1]
# Download BASS Native Libraries for PhoenixVisualizer
# This script downloads the required native DLLs that ManagedBass depends on

Write-Host "Downloading BASS Native Libraries..." -ForegroundColor Green

$libsDir = "libs"
if (!(Test-Path $libsDir)) {
    New-Item -ItemType Directory -Path $libsDir | Out-Null
}

# BASS Core Library (x64)
$bassUrl = "https://www.un4seen.com/files/bass24.zip"
$bassZip = "$libsDir\bass24.zip"
$bassExtract = "$libsDir\bass24"

Write-Host "Downloading BASS Core..." -ForegroundColor Yellow
Invoke-WebRequest -Uri $bassUrl -OutFile $bassZip

Write-Host "Extracting BASS Core..." -ForegroundColor Yellow
Expand-Archive -Path $bassZip -DestinationPath $bassExtract -Force

# Copy the x64 DLL to the main libs directory
$bassDll = "$bassExtract\x64\bass.dll"
if (Test-Path $bassDll) {
    Copy-Item $bassDll -Destination "$libsDir\bass.dll" -Force
    Write-Host "âœ“ BASS Core DLL copied" -ForegroundColor Green
} else {
    Write-Host "âœ— BASS Core DLL not found" -ForegroundColor Red
}

# BASS FX Library (x64)
$bassFxUrl = "https://www.un4seen.com/files/bass_fx24.zip"
$bassFxZip = "$libsDir\bass_fx24.zip"
$bassFxExtract = "$libsDir\bass_fx24"

Write-Host "Downloading BASS FX..." -ForegroundColor Yellow
Invoke-WebRequest -Uri $bassFxUrl -OutFile $bassFxZip

Write-Host "Extracting BASS FX..." -ForegroundColor Yellow
Expand-Archive -Path $bassFxZip -DestinationPath $bassFxExtract -Force

# Copy the x64 DLL to the main libs directory
$bassFxDll = "$bassFxExtract\x64\bass_fx.dll"
if (Test-Path $bassFxDll) {
    Copy-Item $bassFxDll -Destination "$libsDir\bass_fx.dll" -Force
    Write-Host "âœ“ BASS FX DLL copied" -ForegroundColor Green
} else {
    Write-Host "âœ— BASS FX DLL not found" -ForegroundColor Red
}

# Clean up temporary files
Write-Host "Cleaning up..." -ForegroundColor Yellow
Remove-Item $bassZip -Force -ErrorAction SilentlyContinue
Remove-Item $bassFxZip -Force -ErrorAction SilentlyContinue
Remove-Item $bassExtract -Recurse -Force -ErrorAction SilentlyContinue
Remove-Item $bassFxExtract -Recurse -Force -ErrorAction SilentlyContinue

Write-Host "`nBASS Libraries downloaded to: $libsDir" -ForegroundColor Green
Write-Host "Files:" -ForegroundColor Cyan
Get-ChildItem $libsDir -Name

Write-Host "`nNext steps:" -ForegroundColor Yellow
Write-Host "1. Copy these DLLs to your output directory" -ForegroundColor White
Write-Host "2. Or add them to your project as content files" -ForegroundColor White
Write-Host "3. Build and run PhoenixVisualizer" -ForegroundColor White


[export_script.ps1]
$output = "# RITUALOS PROJECT STRUCTURE DUMP`n`n"
$files = Get-ChildItem -Recurse -File | Where-Object { 
    $_.Extension -match "\.(cs|axaml|csproj|json|md|txt|sh|ps1|py|html)$" -and 
    $_.FullName -notmatch "\\bin\\|\\obj\\|\\tools\\|\\DreamDictionary\\|\.git\\|\.dotnet\\|\.vscode\\|misc\\|allfiles\.txt|update_.*\.ps1|fix_.*\.ps1|simplify_.*\.ps1|combine_.*\.py|convert_.*\.py|process_.*\.py|capture\.sh|PHASE2_FEATURES\.md|PORTABLE_THEMEBUILDER\.md|project_context\.txt|README_SPRINT.*\.md|RitualOS_TODO\.md|wishlist\.md" 
} | Sort-Object FullName

foreach ($file in $files) {
    $relativePath = $file.FullName.Replace((Get-Location).Path + "\", "")
    $output += "[$relativePath]`n"
    try {
        $content = Get-Content $file.FullName -Raw -ErrorAction Stop
        $output += $content + "`n`n"
    } catch {
        $output += "ERROR READING FILE: $($_.Exception.Message)`n`n"
    }
}

$output | Out-File -FilePath "ritualos_project_dump.txt" -Encoding UTF8
Write-Host "Project dump created: ritualos_project_dump.txt with $($files.Count) files"


[libs_etc\WAMPSDK\in_raw\README.TXT]
There are actually two examples here, a tone generator and a RAW
player. Remove main.c from the project, and add in_raw or in_tone to
try it out..

-J


[libs_etc\WAMPSDK\lang_b\TIPS.TXT]
Note that these keyboard shortcuts are a good starting point, but this list
is far from complete. :)

******* Keyboard Shortcuts (these can be used in most Winamp windows) *******

Key		Action
-----------------------------------------------------------------------------
F1		Open Help
Ctrl+F1		About Box
Ctrl+A		Toggle Always on Top (N/A in playlist editor and media library)
Ctrl+Alt+A		Toggle always on top (playlist editor)
Ctrl+W		Toggle Windowshade mode (main window, unless in playlist editor)
Ctrl+D		Toggle Doublesize Mode
Ctrl+E		Toggle Easymove (only applicable in classic skins)
Ctrl+T		Toggle Time Display Mode 
Alt+W		Toggle Main Window
Alt+E		Toggle Playlist Editor
Alt+G		Toggle Graphical Equalizer
Alt+V		Toggle Video Window
Alt+L		Toggle Media Library
Ctrl+Tab		Cycle through different Winamp windows
Alt+S		Go to Skin selection
Ctrl+P		Go to Preferences
Alt+F		Open Main Menu
Alt+K		Configure current visualization plug-in
Ctrl+Sh+K		Start/stop current visualization plug-In
Ctrl+K		Open visualization plug-in section of preferences
Ctrl+J		Jump to time in current track
J or Keypad .	Open jump-to-file box
Ctrl+Alt+N		Spawn new Winamp instance
Alt+M		Minimize Winamp
Ctrl+H		Show recently played files/streams (History :)


******* Main Window Keyboard Shortcuts *******

Key		Action
-----------------------------------------------------------------------------
(options/toggles)
R		Toggle Repeat
S		Toggle Shuffle

Alt+3		Current file info box/tag editor

(playback controls)
Z		Previous Track
X		Play/Restart/Unpause
C		Pause/Unpause
V		Stop
Shift+V		Stop with Fadeout
Ctrl+V		Stop after current track
B		Next Track
L		Open/Play File
Ctrl+L		Open/Play location
Shift+L		Open/Play Directory

Left Arrow	Rewind 5 seconds
Right Arrow	Fast-forward 5 seconds
Up Arrow		Turn Volume Up
Down Arrow	Turn Volume Down

Keypad 1		Jump Ten Songs Back
Keypad 6		Next Track
Keypad 5		Play/Restart/Unpause
Keypad 4		Previous Track
Keypad 3		Jump Ten Songs Forward
Keypad 7		Rewind 5 seconds
Keypad 9		Fast-forward 5 seconds
Keypad 8		Turn Volume Up
Keypad 2		Turn Volume Down
Keypad 0		Open/Play File
Ctrl+Keypad 0	Open/Play location
Insert		Open/Play Directory


******* Playlist Window Keyboard Shortcuts *******

Key		Action
-----------------------------------------------------------------------------
R		Toggle Repeat
S		Toggle Shuffle

(file io)
L		Add File
Ctrl+L		Add Location
Shift+L 	Add Directory
Ctrl+N		New (Clear) Playlist
Ctrl+O		Open (Load) Playlist
Ctrl+S		Save Playlist
Alt+3		View/Edit Track Info for selected track(s)
Ctrl+E		Edit Selected Track Filename(s)
Ctrl+Keypad 0	Add Location
Insert		Add Directory

(playlist manipulation)		
Ctrl+A		Select All
Ctrl+I		Invert Selection
Delete		Remove Selected Files from Playlist
Ctrl+Delete	Crop Playlist
Ctrl+Sh+Del	Clear Playlist (same as Ctrl+N)

Alt+Down Arrow	Move Selected Files Down
Alt+Up Arrow	Move Selected Files Up

Down Arrow	Move Cursor Down
Up Arrow		Move Cursor Up
Enter		Play Selected File
End		Jump to End of List
Home		Jump to Start of List
Page Up		Move up by a fifth of a page
Page Down	Move down by a fifth of a page

Alt+Delete	Remove missing files from playlist

(playlist sorting)
Ctrl+Sh+1		Sort Playlist by Title
Ctrl+Sh+2		Sort Playlist by File Name
Ctrl+Sh+3		Sort Playlist by File Path and Name
Ctrl+R		Reverse Playlist
Ctrl+Sh+R	Randomize Playlist

Most main window playback controls also work in the playlist editor.


******* Equalizer Keyboard Shortcuts (Classic skins only) *******

Key		Action
-----------------------------------------------------------------------------
1 - 0		Increase EQ bands 1-10
Q - P		Decrease EQ bands 1-10
`		Increase EQ Preamp
TAB		Decrease EQ Preamp
N		Toggle EQ Enabled
A		Toggle EQ Auto-Loading
S		Open Presets Menu
Ctrl+S		Load Preset



[libs_etc\WAMPSDK\out_raw\readme.txt]
This mini SDK demonstrates the base structure of an output plug-in for Winamp.
Much like Disk Writer, RAW Writer takes an input file and converts it to the 
output format; in this case, the RAW format.  It bypasses playback and writes the 
output file as quickly as the input file can be decoded.  I hope this has helped.

-Denzil


[libs_etc\WAMPSDK\readme.txt]
Winamp 5 SDK
------------

This ZIP file contains various SDKs for creating new plugins for Winamp 5.

Here's a description of the various folders:

/dsp_test - Sample code for a DSP test plugin

/gen_ml - Headers and IPC calls for accessing/controlling/querying the Media 
          Library

/gen_ml/ml_ex - Sample code for a Media Library plugin

/gen_tray - Sample code for a General Purpose plugin

/in_raw - Sample code for an Input plugin

/lang_b - Sample code for a Language Pack plugin

/maki - Compiler for building Maki binaries

/out_raw - Sample code for an Output plugin

/vis/vis_avs/apesdk - Sample code for an AVS APE plugin

/vis/vis_avs/ns-eel - Nullsoft Expression Evaluator Library (NS-EEL)
                      This is what powers AVS's expression evaluators, feel free
                      to include/modify the code in your own AVS APE plugins

The AVS source tree above (`vis/vis_avs`) is the canonical location in this
repository. Older copies under `vis/avs` have been removed.

/vis/vis_test - Sample code for a Visualisation plugin

/vis/wa5vis.txt - Describes how to embed your visualisation plugin in the 
                  Winamp 5 drawer

/winamp - Headers and IPC calls for controlling Winamp


[libs_etc\WAMPSDK\vis\avs\vis_avs\vis_avs.txt]

  LICENSE
  -------
Copyright 2005 Nullsoft, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer. 

  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution. 

  * Neither the name of Nullsoft nor the names of its contributors may be used to 
    endorse or promote products derived from this software without specific prior written permission. 
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



Nullsoft Advanced Visualization Studio (AVS) v2.0a4 README
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Nullsoft Advanced Visualization Studio (AVS) is Winamp's visualization
plugin. It lets you load community presets or create your own to
generate real-time graphics reacting to your music. AVS is distributed
under a BSD-style license permitting modification and redistribution as
outlined above.

Thanks to Paul Holden for the FunkyFX Firewurx APE  

Once you install this baby, fire up Winamp, open up the preferences 
(CTRL+P), go to the Plugins/Visualization section, and select 
Nullsoft AVS as the visualization plug-in. Hit start. 

Once the AVS opens, it will probably be showing a nice black output.
To get AVS to display something more interesting, hit space, or right
click in the black area and select a preset to load.

If you want to create your own presets, click the left mouse button in 
the black area of the window to bring up the AVS Editor window.

The editor lets you create new visuals by adding effects from your Effect
Library (in the upper right) to the Active Effect list (on the left side).
Once you've added effects, you can configure each effect by selecting them
from the Active Effect list. You can also clear the list, or load or save
the list to be loaded later as a preset. 

You can also configure some of AVS's settings by selecting items from the 
Settings section of the Editor. 

Hotkeys for main window:
 *  Any winamp key
 *  R toggles randomswitching
 *  F toggles fullscreen framerate counter
 *  Y and U cycle through presets in order
 *  Space goes to random preset
 *  Enter toggles fullscreen
 *  0,1-9, F1-F10 load presets
 *  Ctrl+above save presets

That's it for now, and enjoy!


Version history:
2.0a4:
- auto fullscreen window resizing
2.0a3:
- updated fullscreen vis code to handle leaving fullscreen
  unexpectedly better
- made configwnd repopulation more robust
- made transitions work when preinit is disabled and you just
  started up
2.0a2:
- updated options of display/fullscreen/trans
- added doublesize for windowed
- added seperate opts for windowed/fullscreen for text
- fixed bug in mosaic.
2.0a1:
- preinit of presets for better transitions
- integrated laser support (built-time option)
- changed name to 'Winamp AVS'
- Improved SVP/UVS loading
- Made superscope support 'red' 'green' and 'blue'

1.5a6:
- preset transitions, woohoo
- yay

1.5a4:
- presets for superscope
- more superscope options
- made random preset loading on beat
- bugfixes

1.5a3:
- line width option
- ability to use buffer as alpha channel for blending sub-effects back in
- tons more

1.5a2:
- deadbeef: cleanups
- lone: adjustable blend for sub-effects

1.5a1:
- deadbeef: made new effect system completely hiererchical and scaleable. 
			reorganized code a lot. cleaned things up. made it nice.

1.0a53:
- deadbeef: superscope effect
			made it save to plugins\vis_avs.dat, instead.

a52:
- deadbeef: optimized/simplified evallib. made it limited to 8 char variable names,
			32 variables max.
			improved ddm effect.
			improved color clip effect

a51:
- deadbeef:	optimized mosaic, grain, brightness, and bump effects
			optimized and added more functionality to interleave effect
- lone :	clear - fixed 'first frame only'
			eval - added sigmoid, sign, max, min, rand, band, bor, bnot, if, equal, above, below
			ddm  - added code for init and beat
			bump - added 'bi' var to control bump intensity thru exps.
			     - added depth source
			clear - fixed 'first frame only' (again)
			onbeat clear - fixed 'skip n beats' which was not saved
- ron : picture - fixed picture border bugs when aspect ratio was on

a50:
- deadbeef: added subtractive blend, every other line blend to stack
			fixed window-no-erase bug.
			added new dynamic distance modifier effect
			added 'go' button to fullscreen options
			added wait for retrace options
			revised logarithmic spectrum scaling table
- ron: better no-minimize-on-winamp (now displays a separate window in taskman)
- lone : bpm - better out of range detection in average calculation
						 - better confidence calculation
						 - added option to predict beats only if bpm has been found
						 - fixed relearn/adapt on new song option
						 - fixed unwanted resets when using 'don't minimize avs when minimizing winamp' option
				 brightness - now works actually like a brightness filter (bit slower tho)
				 text - fixed crash when window is smaller than width/height of text and random mode was checked
				 bump - added invert depth
				      - fixed exclusive use of eval lib, was choking with misc trans/custom
							  or additional bump effects, now saves/restores vars in a clean way.
							- changed 0-100 range to 0-1 which is much easier to use with math exps
							  (for backward compatibility, old settings are still using the old range)

a49:

- ron: added transparency settings (win2k only). 
			added AVI and Water Bump effects.
			settings are now drageable (fixed).
			deleting a setting now doesn't loose selection.
			evallib now works when AVS is compiled in debug mode.
			added "don't minimize avs with winamp" setting in Display tab.
			added BMP Picture rendering.
- lone: disabled resize in fullscreen mode, fixes directx lockups
      added Custom BPM filter
			fixed stuck moving particles when no beat occurs for a long time
			fixed random word option in text renderer
			added beat learning - fixed broken version, now better than ever :>
			added option to dock AVS into litestep's wharfamp window :)
- deadbeef: restyled editor. 
			made rotation switching variable in rotoblitter, and onbeat zoom changes
			made loading/saving of unsupported effects/ape's better
            fixed text drawing bugs. 
			fixed fullscreen-when-no-mode-selected, and made it verify video modes
            made skin change detection
			added vertical blank wait options
			fixed rotoblitter crashing effect
			tons of other stuff. 



a46: more effects, etc from lone/ron. Improved main interface.
     a few small bugfixes.
a44: crashing bugfixes. border drawing bugfixes.
a43: skinnability. Put the avs.bmp in the skin directory. 
     avs.bmp.
a42: improved mirror effect. Misc trans now has mixed mapping mode 
     (onbeat changes). should either have fixed or broken coming out 
     of fullscreen modes. Fixed a few cosmetic bugs.
a41: added lone's mirror effect.
a40: comment bugfix, lone's effects, MUCH better beat detection
a39: source mapping translation mode. Fadeto has color to fade to.
a38: clone button. One level of presets directories allowed. Lets 
     you select a preset directory to pull random/cycles from.
     Neato.
a37: comment thingy. Status line. More improvements. No more keyboard
     controls for config, though :(
a36: optimized colorfade, moving particle is nicer circle, water effect,
     little cleanups, AVS editor now in own thread, keyboard controls 
     work better, etc etc .
a35: more blur options, more presets, new APE module (FyreWurx)
a33: ultra-fast expression eval. test those custom trantabs to make sure they didn't break.
a32: unfucks blur for older presets
a31: dot fountain, baby.
a30: made effects alpha-channel-safe, made random switching adjustable,
     a lot of little tastey cleanups, etc.
a29: nifty-ass framebuffer saving/restoring effect
a28: adjustable CPU usage. better beat detection stuff. etc.
a26: new effect (dot grid), widescreen fullscreen modes, etc.
a25: bugfixes, you can now drop .avs's into the window, etc.
a24: much better custom transtab stuff (thanks, LONE, not lore. no 
     offense, lore, though :)
a23: custom transtabs much faster. buggier, though. will be fixed soon.
     lone owns. :)
a22: higher framerate, custom transtabs, more effects, etc.
a21 adds new "Scatter" effect
a20 adds DLL effect loading (APE)
a18 fixes close-winamp die bug.
a18 speeds up colorfade (all table driven)
a17 fixes win2k fullscreen issues (afaik)
a16 adds some fixes, and new winamp styled window

and before:

Started out as wVis 5.0. Started out pretty lame.

[libs_etc\WAMPSDK\vis\README.md]
# vis_avs - Advanced Visualization Studio

## Description

Advanced Visualization Studio (AVS), is a music visualization plugin for Winamp. It was designed by Winamp's creator, Justin Frankel. AVS has a customizable design which allows users to create their own visualization effects, or "presets". AVS was made open source software in May 2005, released under a BSD-style license. â€”[Wikipedia](http://en.wikipedia.org/wiki/Advanced_Visualization_Studio)

**Note:** The canonical location of the AVS source code is `vis/vis_avs`. Any
previous copies under `vis/avs` have been removed.

## Notes

What follows is a reformatted copy from the original `readme.txt` which came with the source code.

> [DrO](http://forums.winamp.com/member.php?s=&action=getinfo&userid=122037) has updated v2.81b to v2.81d by changing a few files, as he posted [here](http://forums.winamp.com/showthread.php?postid=2054764#post2054764)  
>
> This file you have here is the sourcecode from [nullsoft.com](http://www.nullsoft.com/free/avs/) (v2.81b), with the few files from [vis_avs_changed.zip](http://www.nunzioweb.com/daz/temp/avs/vis_avs_changed.zip) (2.81d) overwritten over v2.81b  >
> Since DrO's download location sais that it's temporary, I've put this file up as a backup for his server and to have a complete file.  
>
> If you have questions or comments, the AVS forums are over [here](http://forums.winamp.com/forumdisplay.php?s=&forumid=85)  
>
> Keep in mind though, that there is currently only little, if any, development going on over there. If you have suggestions, your best chances are to make a start and post your results there with your questions, rather than to ask 'us' to do it, as none of  us are Nullsoft employees.  
>
> You'll also need the Winamp SDK. Search the forums for the lastest version.  
>
> Greetings,  
> 'Warrior of the Light'  
> http://Warrior-of-the-Light.net  
> [email hidden]

## License

Copyright 2005 Nullsoft, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer. 

  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution. 

  * Neither the name of Nullsoft nor the names of its contributors may be used to 
    endorse or promote products derived from this software without specific prior written permission. 
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


[libs_etc\WAMPSDK\vis\vis_avs\evallib\readme.txt]

  LICENSE
  -------
Copyright 2005 Nullsoft, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer. 

  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution. 

  * Neither the name of Nullsoft nor the names of its contributors may be used to 
    endorse or promote products derived from this software without specific prior written permission. 
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



  Expression evaluation library v1.0 - by lone
  --------------------------------------------


    How to use
    ~~~~~~~~~~

 
      ¦ resetVars
      -----------

      void resetVars(void);

      Resets the variables table. It is necessary to call it prior to evaluate your first
      expression or variables contents may be random instead of zero


      ¦ evaluate
      ----------

      double evaluate(char *expression, int *col);

      Evaluates an expression and returns the result.
      If a syntax error was encountered during the parsing of the expression, then col will
      be non-null and col-1 will be the index of the char which triggered the error.


    Limitations
    ~~~~~~~~~~~

       ¦ you can set only up to 1024 variables.
       ¦ only decimal and hexadecimal bases available
       ¦ operators are limited to :
               + - / * % & | 
       ¦ functions are limited to :
               sin, cos, tan,
               asin, acos, atan,
               atan2, sqr, sqrt,
               pow, exp, log, log10


    Some examples
    ~~~~~~~~~~~~~

      - assignments :

               pi=3.1415927
               a=atan2(cos(pi/4),2)

      - direct evaluations :

               cos(pi/4)
               sin(45)

      - base notations :

               3bh      (this is 0x3B)
               17d      (this is 17)   
               17dh     (this is 0x17D) 


    Adding new functions
    ~~~~~~~~~~~~~~~~~~~~

       The file EVAL.C contains the functions table (fnTable). Just add an entry with the name,
       the number of parameters, and a pointer to the function body. Implement the body and
       you're done. If your function ahs more than 2 parameters, you'll need to extend the grammar
       description file (CAL.Y) to add the FUNCTION3 (and eventually subsequent) token(s) and
       parsing informations.

    SCAN.L & CAL.Y
    ~~~~~~~~~~~~~~

       SCAN.L contains description for the lexical analyzer generator (LEX). Use makel.bat to rebuild
              LEXTAB.C
       CAL.Y  contains the LALR formal grammar description for the parser generator (BISON). Use makey.bat
              to rebuild CAL_TAB.C


    Compiling
    ~~~~~~~~~

       Just include all source files to your project, and include EVAL.H into your main source code.


[libs_etc\WAMPSDK\vis\vis_avs\LICENSE.TXT]
Copyright 2005 Nullsoft, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer. 

  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution. 

  * Neither the name of Nullsoft nor the names of its contributors may be used to 
    endorse or promote products derived from this software without specific prior written permission. 
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


[libs_etc\WAMPSDK\vis\vis_avs\vis_avs.txt]

  LICENSE
  -------
Copyright 2005 Nullsoft, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer. 

  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution. 

  * Neither the name of Nullsoft nor the names of its contributors may be used to 
    endorse or promote products derived from this software without specific prior written permission. 
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



Nullsoft Advanced Visualization Studio (AVS) v2.0a4 README
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Nullsoft Advanced Visualization Studio (AVS) is Winamp's visualization
plugin. It lets you load community presets or create your own to
generate real-time graphics reacting to your music. AVS is distributed
under a BSD-style license permitting modification and redistribution as
outlined above.

Thanks to Paul Holden for the FunkyFX Firewurx APE  

Once you install this baby, fire up Winamp, open up the preferences 
(CTRL+P), go to the Plugins/Visualization section, and select 
Nullsoft AVS as the visualization plug-in. Hit start. 

Once the AVS opens, it will probably be showing a nice black output.
To get AVS to display something more interesting, hit space, or right
click in the black area and select a preset to load.

If you want to create your own presets, click the left mouse button in 
the black area of the window to bring up the AVS Editor window.

The editor lets you create new visuals by adding effects from your Effect
Library (in the upper right) to the Active Effect list (on the left side).
Once you've added effects, you can configure each effect by selecting them
from the Active Effect list. You can also clear the list, or load or save
the list to be loaded later as a preset. 

You can also configure some of AVS's settings by selecting items from the 
Settings section of the Editor. 

Hotkeys for main window:
 *  Any winamp key
 *  R toggles randomswitching
 *  F toggles fullscreen framerate counter
 *  Y and U cycle through presets in order
 *  Space goes to random preset
 *  Enter toggles fullscreen
 *  0,1-9, F1-F10 load presets
 *  Ctrl+above save presets

That's it for now, and enjoy!


Version history:
2.0a4:
- auto fullscreen window resizing
2.0a3:
- updated fullscreen vis code to handle leaving fullscreen
  unexpectedly better
- made configwnd repopulation more robust
- made transitions work when preinit is disabled and you just
  started up
2.0a2:
- updated options of display/fullscreen/trans
- added doublesize for windowed
- added seperate opts for windowed/fullscreen for text
- fixed bug in mosaic.
2.0a1:
- preinit of presets for better transitions
- integrated laser support (built-time option)
- changed name to 'Winamp AVS'
- Improved SVP/UVS loading
- Made superscope support 'red' 'green' and 'blue'

1.5a6:
- preset transitions, woohoo
- yay

1.5a4:
- presets for superscope
- more superscope options
- made random preset loading on beat
- bugfixes

1.5a3:
- line width option
- ability to use buffer as alpha channel for blending sub-effects back in
- tons more

1.5a2:
- deadbeef: cleanups
- lone: adjustable blend for sub-effects

1.5a1:
- deadbeef: made new effect system completely hiererchical and scaleable. 
			reorganized code a lot. cleaned things up. made it nice.

1.0a53:
- deadbeef: superscope effect
			made it save to plugins\vis_avs.dat, instead.

a52:
- deadbeef: optimized/simplified evallib. made it limited to 8 char variable names,
			32 variables max.
			improved ddm effect.
			improved color clip effect

a51:
- deadbeef:	optimized mosaic, grain, brightness, and bump effects
			optimized and added more functionality to interleave effect
- lone :	clear - fixed 'first frame only'
			eval - added sigmoid, sign, max, min, rand, band, bor, bnot, if, equal, above, below
			ddm  - added code for init and beat
			bump - added 'bi' var to control bump intensity thru exps.
			     - added depth source
			clear - fixed 'first frame only' (again)
			onbeat clear - fixed 'skip n beats' which was not saved
- ron : picture - fixed picture border bugs when aspect ratio was on

a50:
- deadbeef: added subtractive blend, every other line blend to stack
			fixed window-no-erase bug.
			added new dynamic distance modifier effect
			added 'go' button to fullscreen options
			added wait for retrace options
			revised logarithmic spectrum scaling table
- ron: better no-minimize-on-winamp (now displays a separate window in taskman)
- lone : bpm - better out of range detection in average calculation
						 - better confidence calculation
						 - added option to predict beats only if bpm has been found
						 - fixed relearn/adapt on new song option
						 - fixed unwanted resets when using 'don't minimize avs when minimizing winamp' option
				 brightness - now works actually like a brightness filter (bit slower tho)
				 text - fixed crash when window is smaller than width/height of text and random mode was checked
				 bump - added invert depth
				      - fixed exclusive use of eval lib, was choking with misc trans/custom
							  or additional bump effects, now saves/restores vars in a clean way.
							- changed 0-100 range to 0-1 which is much easier to use with math exps
							  (for backward compatibility, old settings are still using the old range)

a49:

- ron: added transparency settings (win2k only). 
			added AVI and Water Bump effects.
			settings are now drageable (fixed).
			deleting a setting now doesn't loose selection.
			evallib now works when AVS is compiled in debug mode.
			added "don't minimize avs with winamp" setting in Display tab.
			added BMP Picture rendering.
- lone: disabled resize in fullscreen mode, fixes directx lockups
      added Custom BPM filter
			fixed stuck moving particles when no beat occurs for a long time
			fixed random word option in text renderer
			added beat learning - fixed broken version, now better than ever :>
			added option to dock AVS into litestep's wharfamp window :)
- deadbeef: restyled editor. 
			made rotation switching variable in rotoblitter, and onbeat zoom changes
			made loading/saving of unsupported effects/ape's better
            fixed text drawing bugs. 
			fixed fullscreen-when-no-mode-selected, and made it verify video modes
            made skin change detection
			added vertical blank wait options
			fixed rotoblitter crashing effect
			tons of other stuff. 



a46: more effects, etc from lone/ron. Improved main interface.
     a few small bugfixes.
a44: crashing bugfixes. border drawing bugfixes.
a43: skinnability. Put the avs.bmp in the skin directory. 
     avs.bmp.
a42: improved mirror effect. Misc trans now has mixed mapping mode 
     (onbeat changes). should either have fixed or broken coming out 
     of fullscreen modes. Fixed a few cosmetic bugs.
a41: added lone's mirror effect.
a40: comment bugfix, lone's effects, MUCH better beat detection
a39: source mapping translation mode. Fadeto has color to fade to.
a38: clone button. One level of presets directories allowed. Lets 
     you select a preset directory to pull random/cycles from.
     Neato.
a37: comment thingy. Status line. More improvements. No more keyboard
     controls for config, though :(
a36: optimized colorfade, moving particle is nicer circle, water effect,
     little cleanups, AVS editor now in own thread, keyboard controls 
     work better, etc etc .
a35: more blur options, more presets, new APE module (FyreWurx)
a33: ultra-fast expression eval. test those custom trantabs to make sure they didn't break.
a32: unfucks blur for older presets
a31: dot fountain, baby.
a30: made effects alpha-channel-safe, made random switching adjustable,
     a lot of little tastey cleanups, etc.
a29: nifty-ass framebuffer saving/restoring effect
a28: adjustable CPU usage. better beat detection stuff. etc.
a26: new effect (dot grid), widescreen fullscreen modes, etc.
a25: bugfixes, you can now drop .avs's into the window, etc.
a24: much better custom transtab stuff (thanks, LONE, not lore. no 
     offense, lore, though :)
a23: custom transtabs much faster. buggier, though. will be fixed soon.
     lone owns. :)
a22: higher framerate, custom transtabs, more effects, etc.
a21 adds new "Scatter" effect
a20 adds DLL effect loading (APE)
a18 fixes close-winamp die bug.
a18 speeds up colorfade (all table driven)
a17 fixes win2k fullscreen issues (afaik)
a16 adds some fixes, and new winamp styled window

and before:

Started out as wVis 5.0. Started out pretty lame.

[libs_etc\WAMPSDK\vis\vis_avs\whatsnew.txt]
-francis:
added floor(), ceil() and $Phi
added "cancel fullscreen on deactivation" toggle option

-mig:
added example infrastructure to dmove.  :)
now there are 8 examples in dmove.  also tuned up my beat-interpolation algos!  woo!

-justin
added blend modes to misc / buffer save
made config expand trees by default

-mig:
started work on undo/redo system.
infrastructure seems to work, but I can't figure out the magical
  incantation to make the UI reflect the newly altered render list
  although it seems to actually go back to the last values in the renderer.
"Do you want to save?" dirty flag now contained (mostly) in the undo object.
(In fact, it saves a dirty bit for every undo state, so you can undo twice,
  save, then redo and you should have your dirty bit still set.  If you then
  undo yet again, you're back to what you saved and you have no dirty bit)
added more examples to SuperScope

-justin:
fixed memory leak in evallib stuff I made a bit back
added debug window, moved register watch to it, added error listing
added option for clear variables on recompile in debug window
fixed bugs, too.

-justin:
started adding setting for reinit on edit for evallib stuff
made config change detection a little more accurate
made superscope/dmove/shift/etc reinit on edit work right
made trans / movement only replace usereval with preseteval if editted
fyi: trans / movement also provides 'sw' and 'sh' for screen width and height,
  so things like 'd=d*0.93 + (((x*sw/2)&(y*sh/2)&1)*-0.3);' are fun :)
fixed trans / movement backwards compatible stuff (no crashy at least)
updated eval documentation stuff, need people to write docs for it, too.. heheh
lots of ui cleanups (more edit room!)
fixed some fullscreen new fbresize bugs
updated fullscreen overlay mode some
updated maximum local variables to 256 from 64 
added global registers [reg00,reg01,... reg99] for debug 
  and effect synchronization (or inter-preset communication) 
added global register watch in root list window (for debugging) 
added comments for eval code. // and /* bla */ 
updated eval documentation 
added gettime() function to eval 
made annoying grey rectangle below tree go away when you aren't docked 
added new color modifier effect, which can be used to replace 
  (with script) a lot of different effects (and be faster and more flexible). 
added 'minimum blend' mode for effect lists/line drawing 
added 'round up' option for Blur. 
made a generic avs directory scanner routine for subdirs (yay!)
   made it only generate menus when opened, for speed
made effects that use evallib reset variables to empty on recompile
made avs track dirtiness of presets, and (optionally) prompt to save etc
made avs resize images when resizing (optionally)
added extended APE interface, that lets you access evallib, global registers,
  line blend/width modes. (see apesdk.zip)




- mig: made most of the presets in Trans/Movement show their algos in the edit field (so you can tune them yourself)
       added multiple new algos to the preset list

- mig: removed ability to RMB in fullscreen mode.  Bug 331 from the database.  want make new gui.  want make now.
- basu: added 'onbeat enabled' option to lists
- christophe: added thread priority settings (so you can set avs in idle prority while keeping winamp in
  high prio.)
2.0a7:
- made better multimonitor support -- still needs more work (making it able to go fullscreen and you do other things
2.0a6:
- added 'skip first' in misc/custom bpm
- added interferences effect
2.0a4:
- auto fullscreen window resizing
2.0a3:
- updated fullscreen vis code to handle leaving fullscreen
  unexpectedly better
- made configwnd repopulation more robust
- made transitions work when preinit is disabled and you just
  started up
2.0a2:
- updated options of display/fullscreen/trans
- added doublesize for windowed
- added seperate opts for windowed/fullscreen for text
- fixed bug in mosaic.

2.0a1:
- preinit of presets for better transitions
- integrated laser support (built-time option)
- changed name to 'Winamp AVS'
- Improved SVP/UVS loading
- Made superscope support 'red' 'green' and 'blue'

1.5a6:
- preset transitions, woohoo
- yay

1.5a4:
- presets for superscope
- more superscope options
- made random preset loading on beat
- bugfixes

1.5a3:
- line width option
- ability to use buffer as alpha channel for blending sub-effects back in
- tons more

1.5a2:
- deadbeef: cleanups
- lone: adjustable blend for sub-effects

1.5a1:
- deadbeef: made new effect system completely hiererchical and scaleable. 
			reorganized code a lot. cleaned things up. made it nice.

1.0a53:
- deadbeef: superscope effect
			made it save to plugins\vis_avs.dat, instead.
-lone :		added Trans / Invert
			added Trans / Unique tone
			added Render / Timescope

a52:
- deadbeef: optimized/simplified evallib. made it limited to 8 char variable names,
			32 variables max.
			improved ddm effect.
			improved color clip effect

a51:
- deadbeef:	optimized mosaic, grain, brightness, and bump effects
			optimized and added more functionality to interleave effect
- lone :	clear - fixed 'first frame only'
			eval - added sigmoid, sign, max, min, rand, band, bor, bnot, if, equal, above, below
			ddm  - added code for init and beat
			bump - added 'bi' var to control bump intensity thru exps.
			     - added depth source
			clear - fixed 'first frame only' (again)
			onbeat clear - fixed 'skip n beats' which was not saved
- ron : picture - fixed picture border bugs when aspect ratio was on

a50:
- deadbeef: added subtractive blend, every other line blend to stack
			fixed window-no-erase bug.
			added new dynamic distance modifier effect
			added 'go' button to fullscreen options
			added wait for retrace options
			revised logarithmic spectrum scaling table
- ron: better no-minimize-on-winamp (now displays a separate window in taskman)
- lone : bpm - better out of range detection in average calculation
						 - better confidence calculation
						 - added option to predict beats only if bpm has been found
						 - fixed relearn/adapt on new song option
						 - fixed unwanted resets when using 'don't minimize avs when minimizing winamp' option
				 brightness - now works actually like a brightness filter (bit slower tho)
				 text - fixed crash when window is smaller than width/height of text and random mode was checked
				 bump - added invert depth
				      - fixed exclusive use of eval lib, was choking with misc trans/custom
							  or additional bump effects, now saves/restores vars in a clean way.
							- changed 0-100 range to 0-1 which is much easier to use with math exps
							  (for backward compatibility, old settings are still using the old range)

a49:

- ron: added transparency settings (win2k only). 
			added AVI and Water Bump effects.
			settings are now drageable (fixed).
			deleting a setting now doesn't loose selection.
			evallib now works when AVS is compiled in debug mode.
			added "don't minimize avs with winamp" setting in Display tab.
			added BMP Picture rendering.
- lone: disabled resize in fullscreen mode, fixes directx lockups
      added Custom BPM filter
			fixed stuck moving particles when no beat occurs for a long time
			fixed random word option in text renderer
			added beat learning - fixed broken version, now better than ever :>
			added option to dock AVS into litestep's wharfamp window :)
- deadbeef: restyled editor. 
			made rotation switching variable in rotoblitter, and onbeat zoom changes
			made loading/saving of unsupported effects/ape's better
            fixed text drawing bugs. 
			fixed fullscreen-when-no-mode-selected, and made it verify video modes
            made skin change detection
			added vertical blank wait options
			fixed rotoblitter crashing effect
			tons of other stuff. 



a46: more effects, etc from lone/ron. Improved main interface.
     a few small bugfixes.
a44: crashing bugfixes. border drawing bugfixes.
a43: skinnability. Put the avs.bmp in the skin directory. 
     avs.bmp.
a42: improved mirror effect. Misc trans now has mixed mapping mode 
     (onbeat changes). should either have fixed or broken coming out 
     of fullscreen modes. Fixed a few cosmetic bugs.
a41: added lone's mirror effect.
a40: comment bugfix, lone's effects, MUCH better beat detection
a39: source mapping translation mode. Fadeto has color to fade to.
a38: clone button. One level of presets directories allowed. Lets 
     you select a preset directory to pull random/cycles from.
     Neato.
a37: comment thingy. Status line. More improvements. No more keyboard
     controls for config, though :(
a36: optimized colorfade, moving particle is nicer circle, water effect,
     little cleanups, AVS editor now in own thread, keyboard controls 
     work better, etc etc .
a35: more blur options, more presets, new APE module (FyreWurx)
a33: ultra-fast expression eval. test those custom trantabs to make sure they didn't break.
a32: unfucks blur for older presets
a31: dot fountain, baby.
a30: made effects alpha-channel-safe, made random switching adjustable,
     a lot of little tastey cleanups, etc.
a29: nifty-ass framebuffer saving/restoring effect
a28: adjustable CPU usage. better beat detection stuff. etc.
a26: new effect (dot grid), widescreen fullscreen modes, etc.
a25: bugfixes, you can now drop .avs's into the window, etc.
a24: much better custom transtab stuff (thanks, LONE, not lore. no 
     offense, lore, though :)
a23: custom transtabs much faster. buggier, though. will be fixed soon.
     lone owns. :)
a22: higher framerate, custom transtabs, more effects, etc.
a21 adds new "Scatter" effect
a20 adds DLL effect loading (APE)
a18 fixes close-winamp die bug.
a18 speeds up colorfade (all table driven)
a17 fixes win2k fullscreen issues (afaik)
a16 adds some fixes, and new winamp styled window


[libs_etc\WAMPSDK\vis\wa5vis.txt]
Winamp 5 VIS Drawer API
-----------------------


Here are the steps to get your visualization plugin in the Winamp 5 drawer :

1) Create an embedded window to serve as a parent for your vis Wnd using the Winamp 5 Embedded Window SDK :

HWND parent = NULL;
HWND (*e)(embedWindowState *v);
*(void**)&e = (void *)SendMessage(this_mod->hwndParent,WM_WA_IPC,(LPARAM)0,IPC_GET_EMBEDIF);
if (e) parent = e(&myWindowState);

2) Create your vis window (say, g_hwnd) for your vis plugin, using the embedded window as a parent.

3) BEFORE showing your parent window, notify Winamp that you are a VIS window :

SendMessage(this_mod->hwndParent, WM_WA_IPC, (int)g_hwnd, IPC_SETVISWND);
ShowWindow(parent, SW_SHOWNA);

4) When your plugin is asked to terminate, notify winamp that the VIS has gone away :

SendMessage(g_mod->hwndParent, WM_WA_IPC, NULL, IPC_SETVISWND);

5) From now on, your vis is going to be automatically inserted in the drawer, and your window (the one you sent to winamp
using SETVISWND) is going to receive commands when the user clicks in the vis buttons (ie, next/previous/random, etc). You 
should implement these commands by trapping WM_COMMAND:

case WM_COMMAND: {
  int id = LOWORD(wParam);
  switch (id) {

    // user clicked on 'next' preset button
    case ID_VIS_NEXT: next_preset(); break;

    // user clicked on 'previous' preset button
    case ID_VIS_PREV: previous_preset(); break;

    // user clicked on 'random' togglebutton
    case ID_VIS_RANDOM: {
      // determine if we're switching random on or off or if Winamp is asking us about the state of our random flag
      int v = HIWORD(wParam) ? 1 : 0; 

      // are we being asked about the state of our random flag ?
      if (wParam >> 16 == 0xFFFF) {
        // tell winamp about our state
        SendMessage(g_mod->hwndParent,WM_WA_IPC,random_presets_flag,IPC_CB_VISRANDOM);
        break;
      }
      
      // changes random_preset_flag 
      set_random(v); 

      // if we are turning random on, we should switch to a new random preset right away
      if (v) load_random_preset();

      break;
    }
    case ID_VIS_FS: go_fullscreen(); break;
    case ID_VIS_CFG: open_configuration(); break;
    case ID_VIS_MENU: open_popup_menu(); break;
  }
  break;
}

6) Before turning fullscreen on, you should check wether video is already fullscreen or not :

if (SendMessage(g_mod->hwndParent,WM_WA_IPC,0,IPC_IS_PLAYING_VIDEO)>1) 
{
  cant_go_fullscreen_dlg();
}

7) You're almost done, the last thing to do is to notify Winamp when you go fullscreen :

go_fullscreen() 
{
  if (SendMessage(g_mod->hwndParent,WM_WA_IPC,0,IPC_IS_PLAYING_VIDEO)>1) 
  {
    cant_go_fullscreen_dlg();
  }
  else
  {
    SendMessage(g_mod->hwndParent,WM_WA_IPC,1,IPC_SET_VIS_FS_FLAG);

    ... now do the work of actually going fullscreen ...

  }
}

go_windowed()
{
  SendMessage(g_mod->hwndParent,WM_WA_IPC,0,IPC_SET_VIS_FS_FLAG);

  ... now do the work of going back to windowed mode ...

}


That should be all. Feel free to send your questions to francis@winamp.com


[Matplotlib.Net\libs\Python.Runtime.deps.json]
{
  "runtimeTarget": {
    "name": ".NETStandard,Version=v2.0/",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETStandard,Version=v2.0": {},
    ".NETStandard,Version=v2.0/": {
      "Python.Runtime/1.0.0": {
        "dependencies": {
          "NETStandard.Library": "2.0.3",
          "System.Reflection.Emit": "4.3.0"
        },
        "runtime": {
          "Python.Runtime.dll": {}
        }
      },
      "Microsoft.NETCore.Platforms/1.1.0": {},
      "Microsoft.NETCore.Targets/1.1.0": {},
      "NETStandard.Library/2.0.3": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0"
        }
      },
      "System.IO/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0",
          "System.Text.Encoding": "4.3.0",
          "System.Threading.Tasks": "4.3.0"
        }
      },
      "System.Reflection/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.IO": "4.3.0",
          "System.Reflection.Primitives": "4.3.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Reflection.Emit/4.3.0": {
        "dependencies": {
          "System.IO": "4.3.0",
          "System.Reflection": "4.3.0",
          "System.Reflection.Emit.ILGeneration": "4.3.0",
          "System.Reflection.Primitives": "4.3.0",
          "System.Runtime": "4.3.0"
        },
        "runtime": {
          "lib/netstandard1.3/System.Reflection.Emit.dll": {
            "assemblyVersion": "4.0.2.0",
            "fileVersion": "4.6.24705.1"
          }
        }
      },
      "System.Reflection.Emit.ILGeneration/4.3.0": {
        "dependencies": {
          "System.Reflection": "4.3.0",
          "System.Reflection.Primitives": "4.3.0",
          "System.Runtime": "4.3.0"
        },
        "runtime": {
          "lib/netstandard1.3/System.Reflection.Emit.ILGeneration.dll": {
            "assemblyVersion": "4.0.2.0",
            "fileVersion": "4.6.24705.1"
          }
        }
      },
      "System.Reflection.Primitives/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Runtime/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0"
        }
      },
      "System.Text.Encoding/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Threading.Tasks/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0"
        }
      }
    }
  },
  "libraries": {
    "Python.Runtime/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "Microsoft.NETCore.Platforms/1.1.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-513B791Shr06YFOf/W9oL/Hu84tdMQNG8JiBoHlBCcyTluZ9WDyqvOwHnPK3TGzZ5FB03PwwfG0KbA0h5tPQMg==",
      "path": "microsoft.netcore.platforms/1.1.0",
      "hashPath": "microsoft.netcore.platforms.1.1.0.nupkg.sha512"
    },
    "Microsoft.NETCore.Targets/1.1.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-sk2W8cUfcxgz6bhE9Rw77hMA8T9ipJZpuxQY8uLdQtSwvQXSCBlQ/wEF/4EvDv1jEc4WyJi+8rY/fEY7ZlBEvA==",
      "path": "microsoft.netcore.targets/1.1.0",
      "hashPath": "microsoft.netcore.targets.1.1.0.nupkg.sha512"
    },
    "NETStandard.Library/2.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-st47PosZSHrjECdjeIzZQbzivYBJFv6P2nv4cj2ypdI204DO+vZ7l5raGMiX4eXMJ53RfOIg+/s4DHVZ54Nu2A==",
      "path": "netstandard.library/2.0.3",
      "hashPath": "netstandard.library.2.0.3.nupkg.sha512"
    },
    "System.IO/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-9OxM0mz9lRKeLWOqAqOMFQu5Kavl+QjyZVKs1v/h6PLXaWPo7A0CDwV47wO+P245blpMEiqkAcNlyhUO3scqtw==",
      "path": "system.io/4.3.0",
      "hashPath": "system.io.4.3.0.nupkg.sha512"
    },
    "System.Reflection/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Jg6u7Wrfaour/Ks3BN3ciJbp58ZQ5TSPt/Exy25LIgNYj3Hw4nH9U+aCckFvBtUZEDJ3Lm21BPdFoNdL7o56+Q==",
      "path": "system.reflection/4.3.0",
      "hashPath": "system.reflection.4.3.0.nupkg.sha512"
    },
    "System.Reflection.Emit/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-W5uUXmJQu9Voh9TW1bET56rXyZ5VJtL+vLNiqg8kQ4zeoAynkLGxuLE5/l8iWV2aqx2J3Jt87ZsA9gBcG2po+A==",
      "path": "system.reflection.emit/4.3.0",
      "hashPath": "system.reflection.emit.4.3.0.nupkg.sha512"
    },
    "System.Reflection.Emit.ILGeneration/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-nrz0dV+KVzSZltVB9WWID7mA82vys4fQMsb4w2vNI8IZqZGXVWL/WULKU4HgiamR9zjelXXn09k/8x5dAbmaLA==",
      "path": "system.reflection.emit.ilgeneration/4.3.0",
      "hashPath": "system.reflection.emit.ilgeneration.4.3.0.nupkg.sha512"
    },
    "System.Reflection.Primitives/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-sI1Jbm9BCi+upTjKL8/KH7RTxGrOc0rTI/LWcxL+OCbT1YAV/daMkKeoXJPSDzwm2gMmq/0ZKT+ofcG4dEzi5w==",
      "path": "system.reflection.primitives/4.3.0",
      "hashPath": "system.reflection.primitives.4.3.0.nupkg.sha512"
    },
    "System.Runtime/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-tKaf4WBkVHtcs/BLGRIl71MOvp3elSNHh8RIb2XXqNJgwxrN5PSfYGjKj/W0FwHk1IKG9xrIIT//4GqYdcAUgQ==",
      "path": "system.runtime/4.3.0",
      "hashPath": "system.runtime.4.3.0.nupkg.sha512"
    },
    "System.Text.Encoding/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-5jd2TTmL72V2icUy5kNIRrPyYLO6lG8nPkHEKovLIekLXdMe1aVb2xGC6C+8qSa7o2wQkgilm3rJneAhZSaCKQ==",
      "path": "system.text.encoding/4.3.0",
      "hashPath": "system.text.encoding.4.3.0.nupkg.sha512"
    },
    "System.Threading.Tasks/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3zLTxblEvlqXnHGzgElyOc/sdBark6mMPNO71gjpFkdQXit3ZFjSFlqJS6OFqq2gcRs8j3IcyntgrPLKRFMXSw==",
      "path": "system.threading.tasks/4.3.0",
      "hashPath": "system.threading.tasks.4.3.0.nupkg.sha512"
    }
  }
}

[Matplotlib.Net\README.md]
# Matplotlib.Net

.NET wrapper for the Python plotting library Matplotlib

[Matplotlib.Net\src\Matplotlib.Net\Matplotlib.Net.csproj]
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Python.Runtime">
      <HintPath>..\..\libs\Python.Runtime.dll</HintPath>
    </Reference>
  </ItemGroup>
</Project>


[Matplotlib.Net\src\Matplotlib.Net\PyPlot.cs]
using System;
using Python.Runtime;

namespace Matplotlib.Net
{
    public class PyPlot
    {
        public float[] YValues { get; private set; }

        public float[] XValues { get; private set; }

        public PyPlot()
        {

        }

        public PyPlot X(float[] values)
        {
            XValues = values;
            return this;
        }

        public PyPlot Y(float[] values)
        {
            YValues = values;
            return this;
        }

        public object Show()
        {
            using (Py.GIL())
            {
                dynamic mpl = Py.Import("matplotlib");
                dynamic plt = Py.Import("matplotlib.pyplot");

                plt.plot(XValues, YValues);
                plt.show();
            }

            return null;
        }
    }
}


[out.txt]
  Determining projects to restore...
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'OpenTK 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'OpenTK.GLControl 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'SkiaSharp.Views 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'SkiaSharp.Views.Gtk2 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'OpenTK 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'OpenTK.GLControl 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'SkiaSharp.Views 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'SkiaSharp.Views.Gtk2 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
  All projects are up-to-date for restore.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'OpenTK 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'OpenTK.GLControl 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'SkiaSharp.Views 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'SkiaSharp.Views.Gtk2 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'OpenTK 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'OpenTK.GLControl 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'SkiaSharp.Views 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'SkiaSharp.Views.Gtk2 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
  PhoenixVisualizer.Core -> D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Core\bin\Debug\net8.0\PhoenixVisualizer.Core.dll
  PhoenixVisualizer.Visuals -> D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\bin\Debug\net8.0\PhoenixVisualizer.Visuals.dll
  PhoenixVisualizer.Audio -> D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Audio\bin\Debug\net8.0\PhoenixVisualizer.Audio.dll
  PhoenixVisualizer -> D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\bin\Debug\net8.0\PhoenixVisualizer.dll

Build succeeded.

D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'OpenTK 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'OpenTK.GLControl 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'SkiaSharp.Views 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'SkiaSharp.Views.Gtk2 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'OpenTK 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'OpenTK.GLControl 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'SkiaSharp.Views 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'SkiaSharp.Views.Gtk2 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'OpenTK 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'OpenTK.GLControl 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'SkiaSharp.Views 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'SkiaSharp.Views.Gtk2 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'OpenTK 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'OpenTK.GLControl 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'SkiaSharp.Views 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'SkiaSharp.Views.Gtk2 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
    16 Warning(s)
    0 Error(s)

Time Elapsed 00:00:01.58


[Phoenix_visualizer_project_dump.txt]
# Phoenix_Visualizer PROJECT STRUCTURE DUMP

[docs\INDEX.md]
# Phoenix Visualizer Documentation Index

This folder indexes core specs and reference conversations relevant to the Phoenix Visualizer.

## Core Specs
- Phoenix Visualizer Complete Spec: ../../app_ideas/Phoenix_Visualizer_Complete_Spec.md
- Project README: ../README.md
- Project TODO/Phases: ../TODO.md

## Reference Conversations
- Avalonia Visualizer Screensaver notes: ../../Chats/ChatGPT-Avalonia_Visualizer_Screensaver_Creation.md
- Full conversation (spec formation): ../../full_ritual_conversations/ritual_165_2025-08-13_USER_ Hey Onyx, I'm back, but I brought you to a different chat so we could talk about creating .md
- Consolidated ritual detail (deep spec): ../../smart_rituals/ritual_152_2025-06-21_Absolutely, Justin. Letâ€™s take it up sev.md

## Architecture Docs (planned)
- ARCHITECTURE.md â€” AVS engine, plugin model, plots, editor
- PLUGINS.md â€” IVisualizerPlugin, APE-like interface, vis_AVS
- EDITOR.md â€” editor layout, preset format, nodes


[export_script.ps1]
$output = "# RITUALOS PROJECT STRUCTURE DUMP`n`n"
$files = Get-ChildItem -Recurse -File | Where-Object { 
    $_.Extension -match "\.(cs|axaml|csproj|json|md|txt|sh|ps1|py|html)$" -and 
    $_.FullName -notmatch "\\bin\\|\\obj\\|\\tools\\|\\DreamDictionary\\|\.git\\|\.dotnet\\|\.vscode\\|misc\\|allfiles\.txt|update_.*\.ps1|fix_.*\.ps1|simplify_.*\.ps1|combine_.*\.py|convert_.*\.py|process_.*\.py|capture\.sh|PHASE2_FEATURES\.md|PORTABLE_THEMEBUILDER\.md|project_context\.txt|README_SPRINT.*\.md|RitualOS_TODO\.md|wishlist\.md" 
} | Sort-Object FullName

foreach ($file in $files) {
    $relativePath = $file.FullName.Replace((Get-Location).Path + "\", "")
    $output += "[$relativePath]`n"
    try {
        $content = Get-Content $file.FullName -Raw -ErrorAction Stop
        $output += $content + "`n`n"
    } catch {
        $output += "ERROR READING FILE: $($_.Exception.Message)`n`n"
    }
}

$output | Out-File -FilePath "ritualos_project_dump.txt" -Encoding UTF8
Write-Host "Project dump created: ritualos_project_dump.txt with $($files.Count) files"


[libs_etc\WAMPSDK\in_raw\README.TXT]
There are actually two examples here, a tone generator and a RAW
player. Remove main.c from the project, and add in_raw or in_tone to
try it out..

-J


[libs_etc\WAMPSDK\lang_b\TIPS.TXT]
Note that these keyboard shortcuts are a good starting point, but this list
is far from complete. :)

******* Keyboard Shortcuts (these can be used in most Winamp windows) *******

Key		Action
-----------------------------------------------------------------------------
F1		Open Help
Ctrl+F1		About Box
Ctrl+A		Toggle Always on Top (N/A in playlist editor and media library)
Ctrl+Alt+A		Toggle always on top (playlist editor)
Ctrl+W		Toggle Windowshade mode (main window, unless in playlist editor)
Ctrl+D		Toggle Doublesize Mode
Ctrl+E		Toggle Easymove (only applicable in classic skins)
Ctrl+T		Toggle Time Display Mode 
Alt+W		Toggle Main Window
Alt+E		Toggle Playlist Editor
Alt+G		Toggle Graphical Equalizer
Alt+V		Toggle Video Window
Alt+L		Toggle Media Library
Ctrl+Tab		Cycle through different Winamp windows
Alt+S		Go to Skin selection
Ctrl+P		Go to Preferences
Alt+F		Open Main Menu
Alt+K		Configure current visualization plug-in
Ctrl+Sh+K		Start/stop current visualization plug-In
Ctrl+K		Open visualization plug-in section of preferences
Ctrl+J		Jump to time in current track
J or Keypad .	Open jump-to-file box
Ctrl+Alt+N		Spawn new Winamp instance
Alt+M		Minimize Winamp
Ctrl+H		Show recently played files/streams (History :)


******* Main Window Keyboard Shortcuts *******

Key		Action
-----------------------------------------------------------------------------
(options/toggles)
R		Toggle Repeat
S		Toggle Shuffle

Alt+3		Current file info box/tag editor

(playback controls)
Z		Previous Track
X		Play/Restart/Unpause
C		Pause/Unpause
V		Stop
Shift+V		Stop with Fadeout
Ctrl+V		Stop after current track
B		Next Track
L		Open/Play File
Ctrl+L		Open/Play location
Shift+L		Open/Play Directory

Left Arrow	Rewind 5 seconds
Right Arrow	Fast-forward 5 seconds
Up Arrow		Turn Volume Up
Down Arrow	Turn Volume Down

Keypad 1		Jump Ten Songs Back
Keypad 6		Next Track
Keypad 5		Play/Restart/Unpause
Keypad 4		Previous Track
Keypad 3		Jump Ten Songs Forward
Keypad 7		Rewind 5 seconds
Keypad 9		Fast-forward 5 seconds
Keypad 8		Turn Volume Up
Keypad 2		Turn Volume Down
Keypad 0		Open/Play File
Ctrl+Keypad 0	Open/Play location
Insert		Open/Play Directory


******* Playlist Window Keyboard Shortcuts *******

Key		Action
-----------------------------------------------------------------------------
R		Toggle Repeat
S		Toggle Shuffle

(file io)
L		Add File
Ctrl+L		Add Location
Shift+L 	Add Directory
Ctrl+N		New (Clear) Playlist
Ctrl+O		Open (Load) Playlist
Ctrl+S		Save Playlist
Alt+3		View/Edit Track Info for selected track(s)
Ctrl+E		Edit Selected Track Filename(s)
Ctrl+Keypad 0	Add Location
Insert		Add Directory

(playlist manipulation)		
Ctrl+A		Select All
Ctrl+I		Invert Selection
Delete		Remove Selected Files from Playlist
Ctrl+Delete	Crop Playlist
Ctrl+Sh+Del	Clear Playlist (same as Ctrl+N)

Alt+Down Arrow	Move Selected Files Down
Alt+Up Arrow	Move Selected Files Up

Down Arrow	Move Cursor Down
Up Arrow		Move Cursor Up
Enter		Play Selected File
End		Jump to End of List
Home		Jump to Start of List
Page Up		Move up by a fifth of a page
Page Down	Move down by a fifth of a page

Alt+Delete	Remove missing files from playlist

(playlist sorting)
Ctrl+Sh+1		Sort Playlist by Title
Ctrl+Sh+2		Sort Playlist by File Name
Ctrl+Sh+3		Sort Playlist by File Path and Name
Ctrl+R		Reverse Playlist
Ctrl+Sh+R	Randomize Playlist

Most main window playback controls also work in the playlist editor.


******* Equalizer Keyboard Shortcuts (Classic skins only) *******

Key		Action
-----------------------------------------------------------------------------
1 - 0		Increase EQ bands 1-10
Q - P		Decrease EQ bands 1-10
`		Increase EQ Preamp
TAB		Decrease EQ Preamp
N		Toggle EQ Enabled
A		Toggle EQ Auto-Loading
S		Open Presets Menu
Ctrl+S		Load Preset



[libs_etc\WAMPSDK\out_raw\readme.txt]
This mini SDK demonstrates the base structure of an output plug-in for Winamp.
Much like Disk Writer, RAW Writer takes an input file and converts it to the 
output format; in this case, the RAW format.  It bypasses playback and writes the 
output file as quickly as the input file can be decoded.  I hope this has helped.

-Denzil


[libs_etc\WAMPSDK\readme.txt]
Winamp 5 SDK
------------

This ZIP file contains various SDKs for creating new plugins for Winamp 5.

Here's a description of the various folders:

/dsp_test - Sample code for a DSP test plugin

/gen_ml - Headers and IPC calls for accessing/controlling/querying the Media 
          Library

/gen_ml/ml_ex - Sample code for a Media Library plugin

/gen_tray - Sample code for a General Purpose plugin

/in_raw - Sample code for an Input plugin

/lang_b - Sample code for a Language Pack plugin

/maki - Compiler for building Maki binaries

/out_raw - Sample code for an Output plugin

/vis/vis_avs/apesdk - Sample code for an AVS APE plugin

/vis/vis_avs/ns-eel - Nullsoft Expression Evaluator Library (NS-EEL)
                      This is what powers AVS's expression evaluators, feel free
                      to include/modify the code in your own AVS APE plugins

The AVS source tree above (`vis/vis_avs`) is the canonical location in this
repository. Older copies under `vis/avs` have been removed.

/vis/vis_test - Sample code for a Visualisation plugin

/vis/wa5vis.txt - Describes how to embed your visualisation plugin in the 
                  Winamp 5 drawer

/winamp - Headers and IPC calls for controlling Winamp


[libs_etc\WAMPSDK\vis\avs\vis_avs\vis_avs.txt]

  LICENSE
  -------
Copyright 2005 Nullsoft, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer. 

  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution. 

  * Neither the name of Nullsoft nor the names of its contributors may be used to 
    endorse or promote products derived from this software without specific prior written permission. 
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



Nullsoft Advanced Visualization Studio (AVS) v2.0a4 README
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Nullsoft Advanced Visualization Studio (AVS) is Winamp's visualization
plugin. It lets you load community presets or create your own to
generate real-time graphics reacting to your music. AVS is distributed
under a BSD-style license permitting modification and redistribution as
outlined above.

Thanks to Paul Holden for the FunkyFX Firewurx APE  

Once you install this baby, fire up Winamp, open up the preferences 
(CTRL+P), go to the Plugins/Visualization section, and select 
Nullsoft AVS as the visualization plug-in. Hit start. 

Once the AVS opens, it will probably be showing a nice black output.
To get AVS to display something more interesting, hit space, or right
click in the black area and select a preset to load.

If you want to create your own presets, click the left mouse button in 
the black area of the window to bring up the AVS Editor window.

The editor lets you create new visuals by adding effects from your Effect
Library (in the upper right) to the Active Effect list (on the left side).
Once you've added effects, you can configure each effect by selecting them
from the Active Effect list. You can also clear the list, or load or save
the list to be loaded later as a preset. 

You can also configure some of AVS's settings by selecting items from the 
Settings section of the Editor. 

Hotkeys for main window:
 *  Any winamp key
 *  R toggles randomswitching
 *  F toggles fullscreen framerate counter
 *  Y and U cycle through presets in order
 *  Space goes to random preset
 *  Enter toggles fullscreen
 *  0,1-9, F1-F10 load presets
 *  Ctrl+above save presets

That's it for now, and enjoy!


Version history:
2.0a4:
- auto fullscreen window resizing
2.0a3:
- updated fullscreen vis code to handle leaving fullscreen
  unexpectedly better
- made configwnd repopulation more robust
- made transitions work when preinit is disabled and you just
  started up
2.0a2:
- updated options of display/fullscreen/trans
- added doublesize for windowed
- added seperate opts for windowed/fullscreen for text
- fixed bug in mosaic.
2.0a1:
- preinit of presets for better transitions
- integrated laser support (built-time option)
- changed name to 'Winamp AVS'
- Improved SVP/UVS loading
- Made superscope support 'red' 'green' and 'blue'

1.5a6:
- preset transitions, woohoo
- yay

1.5a4:
- presets for superscope
- more superscope options
- made random preset loading on beat
- bugfixes

1.5a3:
- line width option
- ability to use buffer as alpha channel for blending sub-effects back in
- tons more

1.5a2:
- deadbeef: cleanups
- lone: adjustable blend for sub-effects

1.5a1:
- deadbeef: made new effect system completely hiererchical and scaleable. 
			reorganized code a lot. cleaned things up. made it nice.

1.0a53:
- deadbeef: superscope effect
			made it save to plugins\vis_avs.dat, instead.

a52:
- deadbeef: optimized/simplified evallib. made it limited to 8 char variable names,
			32 variables max.
			improved ddm effect.
			improved color clip effect

a51:
- deadbeef:	optimized mosaic, grain, brightness, and bump effects
			optimized and added more functionality to interleave effect
- lone :	clear - fixed 'first frame only'
			eval - added sigmoid, sign, max, min, rand, band, bor, bnot, if, equal, above, below
			ddm  - added code for init and beat
			bump - added 'bi' var to control bump intensity thru exps.
			     - added depth source
			clear - fixed 'first frame only' (again)
			onbeat clear - fixed 'skip n beats' which was not saved
- ron : picture - fixed picture border bugs when aspect ratio was on

a50:
- deadbeef: added subtractive blend, every other line blend to stack
			fixed window-no-erase bug.
			added new dynamic distance modifier effect
			added 'go' button to fullscreen options
			added wait for retrace options
			revised logarithmic spectrum scaling table
- ron: better no-minimize-on-winamp (now displays a separate window in taskman)
- lone : bpm - better out of range detection in average calculation
						 - better confidence calculation
						 - added option to predict beats only if bpm has been found
						 - fixed relearn/adapt on new song option
						 - fixed unwanted resets when using 'don't minimize avs when minimizing winamp' option
				 brightness - now works actually like a brightness filter (bit slower tho)
				 text - fixed crash when window is smaller than width/height of text and random mode was checked
				 bump - added invert depth
				      - fixed exclusive use of eval lib, was choking with misc trans/custom
							  or additional bump effects, now saves/restores vars in a clean way.
							- changed 0-100 range to 0-1 which is much easier to use with math exps
							  (for backward compatibility, old settings are still using the old range)

a49:

- ron: added transparency settings (win2k only). 
			added AVI and Water Bump effects.
			settings are now drageable (fixed).
			deleting a setting now doesn't loose selection.
			evallib now works when AVS is compiled in debug mode.
			added "don't minimize avs with winamp" setting in Display tab.
			added BMP Picture rendering.
- lone: disabled resize in fullscreen mode, fixes directx lockups
      added Custom BPM filter
			fixed stuck moving particles when no beat occurs for a long time
			fixed random word option in text renderer
			added beat learning - fixed broken version, now better than ever :>
			added option to dock AVS into litestep's wharfamp window :)
- deadbeef: restyled editor. 
			made rotation switching variable in rotoblitter, and onbeat zoom changes
			made loading/saving of unsupported effects/ape's better
            fixed text drawing bugs. 
			fixed fullscreen-when-no-mode-selected, and made it verify video modes
            made skin change detection
			added vertical blank wait options
			fixed rotoblitter crashing effect
			tons of other stuff. 



a46: more effects, etc from lone/ron. Improved main interface.
     a few small bugfixes.
a44: crashing bugfixes. border drawing bugfixes.
a43: skinnability. Put the avs.bmp in the skin directory. 
     avs.bmp.
a42: improved mirror effect. Misc trans now has mixed mapping mode 
     (onbeat changes). should either have fixed or broken coming out 
     of fullscreen modes. Fixed a few cosmetic bugs.
a41: added lone's mirror effect.
a40: comment bugfix, lone's effects, MUCH better beat detection
a39: source mapping translation mode. Fadeto has color to fade to.
a38: clone button. One level of presets directories allowed. Lets 
     you select a preset directory to pull random/cycles from.
     Neato.
a37: comment thingy. Status line. More improvements. No more keyboard
     controls for config, though :(
a36: optimized colorfade, moving particle is nicer circle, water effect,
     little cleanups, AVS editor now in own thread, keyboard controls 
     work better, etc etc .
a35: more blur options, more presets, new APE module (FyreWurx)
a33: ultra-fast expression eval. test those custom trantabs to make sure they didn't break.
a32: unfucks blur for older presets
a31: dot fountain, baby.
a30: made effects alpha-channel-safe, made random switching adjustable,
     a lot of little tastey cleanups, etc.
a29: nifty-ass framebuffer saving/restoring effect
a28: adjustable CPU usage. better beat detection stuff. etc.
a26: new effect (dot grid), widescreen fullscreen modes, etc.
a25: bugfixes, you can now drop .avs's into the window, etc.
a24: much better custom transtab stuff (thanks, LONE, not lore. no 
     offense, lore, though :)
a23: custom transtabs much faster. buggier, though. will be fixed soon.
     lone owns. :)
a22: higher framerate, custom transtabs, more effects, etc.
a21 adds new "Scatter" effect
a20 adds DLL effect loading (APE)
a18 fixes close-winamp die bug.
a18 speeds up colorfade (all table driven)
a17 fixes win2k fullscreen issues (afaik)
a16 adds some fixes, and new winamp styled window

and before:

Started out as wVis 5.0. Started out pretty lame.

[libs_etc\WAMPSDK\vis\README.md]
# vis_avs - Advanced Visualization Studio

## Description

Advanced Visualization Studio (AVS), is a music visualization plugin for Winamp. It was designed by Winamp's creator, Justin Frankel. AVS has a customizable design which allows users to create their own visualization effects, or "presets". AVS was made open source software in May 2005, released under a BSD-style license. â€”[Wikipedia](http://en.wikipedia.org/wiki/Advanced_Visualization_Studio)

**Note:** The canonical location of the AVS source code is `vis/vis_avs`. Any
previous copies under `vis/avs` have been removed.

## Notes

What follows is a reformatted copy from the original `readme.txt` which came with the source code.

> [DrO](http://forums.winamp.com/member.php?s=&action=getinfo&userid=122037) has updated v2.81b to v2.81d by changing a few files, as he posted [here](http://forums.winamp.com/showthread.php?postid=2054764#post2054764)  
>
> This file you have here is the sourcecode from [nullsoft.com](http://www.nullsoft.com/free/avs/) (v2.81b), with the few files from [vis_avs_changed.zip](http://www.nunzioweb.com/daz/temp/avs/vis_avs_changed.zip) (2.81d) overwritten over v2.81b  >
> Since DrO's download location sais that it's temporary, I've put this file up as a backup for his server and to have a complete file.  
>
> If you have questions or comments, the AVS forums are over [here](http://forums.winamp.com/forumdisplay.php?s=&forumid=85)  
>
> Keep in mind though, that there is currently only little, if any, development going on over there. If you have suggestions, your best chances are to make a start and post your results there with your questions, rather than to ask 'us' to do it, as none of  us are Nullsoft employees.  
>
> You'll also need the Winamp SDK. Search the forums for the lastest version.  
>
> Greetings,  
> 'Warrior of the Light'  
> http://Warrior-of-the-Light.net  
> [email hidden]

## License

Copyright 2005 Nullsoft, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer. 

  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution. 

  * Neither the name of Nullsoft nor the names of its contributors may be used to 
    endorse or promote products derived from this software without specific prior written permission. 
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


[libs_etc\WAMPSDK\vis\vis_avs\evallib\readme.txt]

  LICENSE
  -------
Copyright 2005 Nullsoft, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer. 

  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution. 

  * Neither the name of Nullsoft nor the names of its contributors may be used to 
    endorse or promote products derived from this software without specific prior written permission. 
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



  Expression evaluation library v1.0 - by lone
  --------------------------------------------


    How to use
    ~~~~~~~~~~

 
      ¦ resetVars
      -----------

      void resetVars(void);

      Resets the variables table. It is necessary to call it prior to evaluate your first
      expression or variables contents may be random instead of zero


      ¦ evaluate
      ----------

      double evaluate(char *expression, int *col);

      Evaluates an expression and returns the result.
      If a syntax error was encountered during the parsing of the expression, then col will
      be non-null and col-1 will be the index of the char which triggered the error.


    Limitations
    ~~~~~~~~~~~

       ¦ you can set only up to 1024 variables.
       ¦ only decimal and hexadecimal bases available
       ¦ operators are limited to :
               + - / * % & | 
       ¦ functions are limited to :
               sin, cos, tan,
               asin, acos, atan,
               atan2, sqr, sqrt,
               pow, exp, log, log10


    Some examples
    ~~~~~~~~~~~~~

      - assignments :

               pi=3.1415927
               a=atan2(cos(pi/4),2)

      - direct evaluations :

               cos(pi/4)
               sin(45)

      - base notations :

               3bh      (this is 0x3B)
               17d      (this is 17)   
               17dh     (this is 0x17D) 


    Adding new functions
    ~~~~~~~~~~~~~~~~~~~~

       The file EVAL.C contains the functions table (fnTable). Just add an entry with the name,
       the number of parameters, and a pointer to the function body. Implement the body and
       you're done. If your function ahs more than 2 parameters, you'll need to extend the grammar
       description file (CAL.Y) to add the FUNCTION3 (and eventually subsequent) token(s) and
       parsing informations.

    SCAN.L & CAL.Y
    ~~~~~~~~~~~~~~

       SCAN.L contains description for the lexical analyzer generator (LEX). Use makel.bat to rebuild
              LEXTAB.C
       CAL.Y  contains the LALR formal grammar description for the parser generator (BISON). Use makey.bat
              to rebuild CAL_TAB.C


    Compiling
    ~~~~~~~~~

       Just include all source files to your project, and include EVAL.H into your main source code.


[libs_etc\WAMPSDK\vis\vis_avs\LICENSE.TXT]
Copyright 2005 Nullsoft, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer. 

  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution. 

  * Neither the name of Nullsoft nor the names of its contributors may be used to 
    endorse or promote products derived from this software without specific prior written permission. 
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


[libs_etc\WAMPSDK\vis\vis_avs\vis_avs.txt]

  LICENSE
  -------
Copyright 2005 Nullsoft, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer. 

  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution. 

  * Neither the name of Nullsoft nor the names of its contributors may be used to 
    endorse or promote products derived from this software without specific prior written permission. 
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



Nullsoft Advanced Visualization Studio (AVS) v2.0a4 README
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Nullsoft Advanced Visualization Studio (AVS) is Winamp's visualization
plugin. It lets you load community presets or create your own to
generate real-time graphics reacting to your music. AVS is distributed
under a BSD-style license permitting modification and redistribution as
outlined above.

Thanks to Paul Holden for the FunkyFX Firewurx APE  

Once you install this baby, fire up Winamp, open up the preferences 
(CTRL+P), go to the Plugins/Visualization section, and select 
Nullsoft AVS as the visualization plug-in. Hit start. 

Once the AVS opens, it will probably be showing a nice black output.
To get AVS to display something more interesting, hit space, or right
click in the black area and select a preset to load.

If you want to create your own presets, click the left mouse button in 
the black area of the window to bring up the AVS Editor window.

The editor lets you create new visuals by adding effects from your Effect
Library (in the upper right) to the Active Effect list (on the left side).
Once you've added effects, you can configure each effect by selecting them
from the Active Effect list. You can also clear the list, or load or save
the list to be loaded later as a preset. 

You can also configure some of AVS's settings by selecting items from the 
Settings section of the Editor. 

Hotkeys for main window:
 *  Any winamp key
 *  R toggles randomswitching
 *  F toggles fullscreen framerate counter
 *  Y and U cycle through presets in order
 *  Space goes to random preset
 *  Enter toggles fullscreen
 *  0,1-9, F1-F10 load presets
 *  Ctrl+above save presets

That's it for now, and enjoy!


Version history:
2.0a4:
- auto fullscreen window resizing
2.0a3:
- updated fullscreen vis code to handle leaving fullscreen
  unexpectedly better
- made configwnd repopulation more robust
- made transitions work when preinit is disabled and you just
  started up
2.0a2:
- updated options of display/fullscreen/trans
- added doublesize for windowed
- added seperate opts for windowed/fullscreen for text
- fixed bug in mosaic.
2.0a1:
- preinit of presets for better transitions
- integrated laser support (built-time option)
- changed name to 'Winamp AVS'
- Improved SVP/UVS loading
- Made superscope support 'red' 'green' and 'blue'

1.5a6:
- preset transitions, woohoo
- yay

1.5a4:
- presets for superscope
- more superscope options
- made random preset loading on beat
- bugfixes

1.5a3:
- line width option
- ability to use buffer as alpha channel for blending sub-effects back in
- tons more

1.5a2:
- deadbeef: cleanups
- lone: adjustable blend for sub-effects

1.5a1:
- deadbeef: made new effect system completely hiererchical and scaleable. 
			reorganized code a lot. cleaned things up. made it nice.

1.0a53:
- deadbeef: superscope effect
			made it save to plugins\vis_avs.dat, instead.

a52:
- deadbeef: optimized/simplified evallib. made it limited to 8 char variable names,
			32 variables max.
			improved ddm effect.
			improved color clip effect

a51:
- deadbeef:	optimized mosaic, grain, brightness, and bump effects
			optimized and added more functionality to interleave effect
- lone :	clear - fixed 'first frame only'
			eval - added sigmoid, sign, max, min, rand, band, bor, bnot, if, equal, above, below
			ddm  - added code for init and beat
			bump - added 'bi' var to control bump intensity thru exps.
			     - added depth source
			clear - fixed 'first frame only' (again)
			onbeat clear - fixed 'skip n beats' which was not saved
- ron : picture - fixed picture border bugs when aspect ratio was on

a50:
- deadbeef: added subtractive blend, every other line blend to stack
			fixed window-no-erase bug.
			added new dynamic distance modifier effect
			added 'go' button to fullscreen options
			added wait for retrace options
			revised logarithmic spectrum scaling table
- ron: better no-minimize-on-winamp (now displays a separate window in taskman)
- lone : bpm - better out of range detection in average calculation
						 - better confidence calculation
						 - added option to predict beats only if bpm has been found
						 - fixed relearn/adapt on new song option
						 - fixed unwanted resets when using 'don't minimize avs when minimizing winamp' option
				 brightness - now works actually like a brightness filter (bit slower tho)
				 text - fixed crash when window is smaller than width/height of text and random mode was checked
				 bump - added invert depth
				      - fixed exclusive use of eval lib, was choking with misc trans/custom
							  or additional bump effects, now saves/restores vars in a clean way.
							- changed 0-100 range to 0-1 which is much easier to use with math exps
							  (for backward compatibility, old settings are still using the old range)

a49:

- ron: added transparency settings (win2k only). 
			added AVI and Water Bump effects.
			settings are now drageable (fixed).
			deleting a setting now doesn't loose selection.
			evallib now works when AVS is compiled in debug mode.
			added "don't minimize avs with winamp" setting in Display tab.
			added BMP Picture rendering.
- lone: disabled resize in fullscreen mode, fixes directx lockups
      added Custom BPM filter
			fixed stuck moving particles when no beat occurs for a long time
			fixed random word option in text renderer
			added beat learning - fixed broken version, now better than ever :>
			added option to dock AVS into litestep's wharfamp window :)
- deadbeef: restyled editor. 
			made rotation switching variable in rotoblitter, and onbeat zoom changes
			made loading/saving of unsupported effects/ape's better
            fixed text drawing bugs. 
			fixed fullscreen-when-no-mode-selected, and made it verify video modes
            made skin change detection
			added vertical blank wait options
			fixed rotoblitter crashing effect
			tons of other stuff. 



a46: more effects, etc from lone/ron. Improved main interface.
     a few small bugfixes.
a44: crashing bugfixes. border drawing bugfixes.
a43: skinnability. Put the avs.bmp in the skin directory. 
     avs.bmp.
a42: improved mirror effect. Misc trans now has mixed mapping mode 
     (onbeat changes). should either have fixed or broken coming out 
     of fullscreen modes. Fixed a few cosmetic bugs.
a41: added lone's mirror effect.
a40: comment bugfix, lone's effects, MUCH better beat detection
a39: source mapping translation mode. Fadeto has color to fade to.
a38: clone button. One level of presets directories allowed. Lets 
     you select a preset directory to pull random/cycles from.
     Neato.
a37: comment thingy. Status line. More improvements. No more keyboard
     controls for config, though :(
a36: optimized colorfade, moving particle is nicer circle, water effect,
     little cleanups, AVS editor now in own thread, keyboard controls 
     work better, etc etc .
a35: more blur options, more presets, new APE module (FyreWurx)
a33: ultra-fast expression eval. test those custom trantabs to make sure they didn't break.
a32: unfucks blur for older presets
a31: dot fountain, baby.
a30: made effects alpha-channel-safe, made random switching adjustable,
     a lot of little tastey cleanups, etc.
a29: nifty-ass framebuffer saving/restoring effect
a28: adjustable CPU usage. better beat detection stuff. etc.
a26: new effect (dot grid), widescreen fullscreen modes, etc.
a25: bugfixes, you can now drop .avs's into the window, etc.
a24: much better custom transtab stuff (thanks, LONE, not lore. no 
     offense, lore, though :)
a23: custom transtabs much faster. buggier, though. will be fixed soon.
     lone owns. :)
a22: higher framerate, custom transtabs, more effects, etc.
a21 adds new "Scatter" effect
a20 adds DLL effect loading (APE)
a18 fixes close-winamp die bug.
a18 speeds up colorfade (all table driven)
a17 fixes win2k fullscreen issues (afaik)
a16 adds some fixes, and new winamp styled window

and before:

Started out as wVis 5.0. Started out pretty lame.

[libs_etc\WAMPSDK\vis\vis_avs\whatsnew.txt]
-francis:
added floor(), ceil() and $Phi
added "cancel fullscreen on deactivation" toggle option

-mig:
added example infrastructure to dmove.  :)
now there are 8 examples in dmove.  also tuned up my beat-interpolation algos!  woo!

-justin
added blend modes to misc / buffer save
made config expand trees by default

-mig:
started work on undo/redo system.
infrastructure seems to work, but I can't figure out the magical
  incantation to make the UI reflect the newly altered render list
  although it seems to actually go back to the last values in the renderer.
"Do you want to save?" dirty flag now contained (mostly) in the undo object.
(In fact, it saves a dirty bit for every undo state, so you can undo twice,
  save, then redo and you should have your dirty bit still set.  If you then
  undo yet again, you're back to what you saved and you have no dirty bit)
added more examples to SuperScope

-justin:
fixed memory leak in evallib stuff I made a bit back
added debug window, moved register watch to it, added error listing
added option for clear variables on recompile in debug window
fixed bugs, too.

-justin:
started adding setting for reinit on edit for evallib stuff
made config change detection a little more accurate
made superscope/dmove/shift/etc reinit on edit work right
made trans / movement only replace usereval with preseteval if editted
fyi: trans / movement also provides 'sw' and 'sh' for screen width and height,
  so things like 'd=d*0.93 + (((x*sw/2)&(y*sh/2)&1)*-0.3);' are fun :)
fixed trans / movement backwards compatible stuff (no crashy at least)
updated eval documentation stuff, need people to write docs for it, too.. heheh
lots of ui cleanups (more edit room!)
fixed some fullscreen new fbresize bugs
updated fullscreen overlay mode some
updated maximum local variables to 256 from 64 
added global registers [reg00,reg01,... reg99] for debug 
  and effect synchronization (or inter-preset communication) 
added global register watch in root list window (for debugging) 
added comments for eval code. // and /* bla */ 
updated eval documentation 
added gettime() function to eval 
made annoying grey rectangle below tree go away when you aren't docked 
added new color modifier effect, which can be used to replace 
  (with script) a lot of different effects (and be faster and more flexible). 
added 'minimum blend' mode for effect lists/line drawing 
added 'round up' option for Blur. 
made a generic avs directory scanner routine for subdirs (yay!)
   made it only generate menus when opened, for speed
made effects that use evallib reset variables to empty on recompile
made avs track dirtiness of presets, and (optionally) prompt to save etc
made avs resize images when resizing (optionally)
added extended APE interface, that lets you access evallib, global registers,
  line blend/width modes. (see apesdk.zip)




- mig: made most of the presets in Trans/Movement show their algos in the edit field (so you can tune them yourself)
       added multiple new algos to the preset list

- mig: removed ability to RMB in fullscreen mode.  Bug 331 from the database.  want make new gui.  want make now.
- basu: added 'onbeat enabled' option to lists
- christophe: added thread priority settings (so you can set avs in idle prority while keeping winamp in
  high prio.)
2.0a7:
- made better multimonitor support -- still needs more work (making it able to go fullscreen and you do other things
2.0a6:
- added 'skip first' in misc/custom bpm
- added interferences effect
2.0a4:
- auto fullscreen window resizing
2.0a3:
- updated fullscreen vis code to handle leaving fullscreen
  unexpectedly better
- made configwnd repopulation more robust
- made transitions work when preinit is disabled and you just
  started up
2.0a2:
- updated options of display/fullscreen/trans
- added doublesize for windowed
- added seperate opts for windowed/fullscreen for text
- fixed bug in mosaic.

2.0a1:
- preinit of presets for better transitions
- integrated laser support (built-time option)
- changed name to 'Winamp AVS'
- Improved SVP/UVS loading
- Made superscope support 'red' 'green' and 'blue'

1.5a6:
- preset transitions, woohoo
- yay

1.5a4:
- presets for superscope
- more superscope options
- made random preset loading on beat
- bugfixes

1.5a3:
- line width option
- ability to use buffer as alpha channel for blending sub-effects back in
- tons more

1.5a2:
- deadbeef: cleanups
- lone: adjustable blend for sub-effects

1.5a1:
- deadbeef: made new effect system completely hiererchical and scaleable. 
			reorganized code a lot. cleaned things up. made it nice.

1.0a53:
- deadbeef: superscope effect
			made it save to plugins\vis_avs.dat, instead.
-lone :		added Trans / Invert
			added Trans / Unique tone
			added Render / Timescope

a52:
- deadbeef: optimized/simplified evallib. made it limited to 8 char variable names,
			32 variables max.
			improved ddm effect.
			improved color clip effect

a51:
- deadbeef:	optimized mosaic, grain, brightness, and bump effects
			optimized and added more functionality to interleave effect
- lone :	clear - fixed 'first frame only'
			eval - added sigmoid, sign, max, min, rand, band, bor, bnot, if, equal, above, below
			ddm  - added code for init and beat
			bump - added 'bi' var to control bump intensity thru exps.
			     - added depth source
			clear - fixed 'first frame only' (again)
			onbeat clear - fixed 'skip n beats' which was not saved
- ron : picture - fixed picture border bugs when aspect ratio was on

a50:
- deadbeef: added subtractive blend, every other line blend to stack
			fixed window-no-erase bug.
			added new dynamic distance modifier effect
			added 'go' button to fullscreen options
			added wait for retrace options
			revised logarithmic spectrum scaling table
- ron: better no-minimize-on-winamp (now displays a separate window in taskman)
- lone : bpm - better out of range detection in average calculation
						 - better confidence calculation
						 - added option to predict beats only if bpm has been found
						 - fixed relearn/adapt on new song option
						 - fixed unwanted resets when using 'don't minimize avs when minimizing winamp' option
				 brightness - now works actually like a brightness filter (bit slower tho)
				 text - fixed crash when window is smaller than width/height of text and random mode was checked
				 bump - added invert depth
				      - fixed exclusive use of eval lib, was choking with misc trans/custom
							  or additional bump effects, now saves/restores vars in a clean way.
							- changed 0-100 range to 0-1 which is much easier to use with math exps
							  (for backward compatibility, old settings are still using the old range)

a49:

- ron: added transparency settings (win2k only). 
			added AVI and Water Bump effects.
			settings are now drageable (fixed).
			deleting a setting now doesn't loose selection.
			evallib now works when AVS is compiled in debug mode.
			added "don't minimize avs with winamp" setting in Display tab.
			added BMP Picture rendering.
- lone: disabled resize in fullscreen mode, fixes directx lockups
      added Custom BPM filter
			fixed stuck moving particles when no beat occurs for a long time
			fixed random word option in text renderer
			added beat learning - fixed broken version, now better than ever :>
			added option to dock AVS into litestep's wharfamp window :)
- deadbeef: restyled editor. 
			made rotation switching variable in rotoblitter, and onbeat zoom changes
			made loading/saving of unsupported effects/ape's better
            fixed text drawing bugs. 
			fixed fullscreen-when-no-mode-selected, and made it verify video modes
            made skin change detection
			added vertical blank wait options
			fixed rotoblitter crashing effect
			tons of other stuff. 



a46: more effects, etc from lone/ron. Improved main interface.
     a few small bugfixes.
a44: crashing bugfixes. border drawing bugfixes.
a43: skinnability. Put the avs.bmp in the skin directory. 
     avs.bmp.
a42: improved mirror effect. Misc trans now has mixed mapping mode 
     (onbeat changes). should either have fixed or broken coming out 
     of fullscreen modes. Fixed a few cosmetic bugs.
a41: added lone's mirror effect.
a40: comment bugfix, lone's effects, MUCH better beat detection
a39: source mapping translation mode. Fadeto has color to fade to.
a38: clone button. One level of presets directories allowed. Lets 
     you select a preset directory to pull random/cycles from.
     Neato.
a37: comment thingy. Status line. More improvements. No more keyboard
     controls for config, though :(
a36: optimized colorfade, moving particle is nicer circle, water effect,
     little cleanups, AVS editor now in own thread, keyboard controls 
     work better, etc etc .
a35: more blur options, more presets, new APE module (FyreWurx)
a33: ultra-fast expression eval. test those custom trantabs to make sure they didn't break.
a32: unfucks blur for older presets
a31: dot fountain, baby.
a30: made effects alpha-channel-safe, made random switching adjustable,
     a lot of little tastey cleanups, etc.
a29: nifty-ass framebuffer saving/restoring effect
a28: adjustable CPU usage. better beat detection stuff. etc.
a26: new effect (dot grid), widescreen fullscreen modes, etc.
a25: bugfixes, you can now drop .avs's into the window, etc.
a24: much better custom transtab stuff (thanks, LONE, not lore. no 
     offense, lore, though :)
a23: custom transtabs much faster. buggier, though. will be fixed soon.
     lone owns. :)
a22: higher framerate, custom transtabs, more effects, etc.
a21 adds new "Scatter" effect
a20 adds DLL effect loading (APE)
a18 fixes close-winamp die bug.
a18 speeds up colorfade (all table driven)
a17 fixes win2k fullscreen issues (afaik)
a16 adds some fixes, and new winamp styled window


[libs_etc\WAMPSDK\vis\wa5vis.txt]
Winamp 5 VIS Drawer API
-----------------------


Here are the steps to get your visualization plugin in the Winamp 5 drawer :

1) Create an embedded window to serve as a parent for your vis Wnd using the Winamp 5 Embedded Window SDK :

HWND parent = NULL;
HWND (*e)(embedWindowState *v);
*(void**)&e = (void *)SendMessage(this_mod->hwndParent,WM_WA_IPC,(LPARAM)0,IPC_GET_EMBEDIF);
if (e) parent = e(&myWindowState);

2) Create your vis window (say, g_hwnd) for your vis plugin, using the embedded window as a parent.

3) BEFORE showing your parent window, notify Winamp that you are a VIS window :

SendMessage(this_mod->hwndParent, WM_WA_IPC, (int)g_hwnd, IPC_SETVISWND);
ShowWindow(parent, SW_SHOWNA);

4) When your plugin is asked to terminate, notify winamp that the VIS has gone away :

SendMessage(g_mod->hwndParent, WM_WA_IPC, NULL, IPC_SETVISWND);

5) From now on, your vis is going to be automatically inserted in the drawer, and your window (the one you sent to winamp
using SETVISWND) is going to receive commands when the user clicks in the vis buttons (ie, next/previous/random, etc). You 
should implement these commands by trapping WM_COMMAND:

case WM_COMMAND: {
  int id = LOWORD(wParam);
  switch (id) {

    // user clicked on 'next' preset button
    case ID_VIS_NEXT: next_preset(); break;

    // user clicked on 'previous' preset button
    case ID_VIS_PREV: previous_preset(); break;

    // user clicked on 'random' togglebutton
    case ID_VIS_RANDOM: {
      // determine if we're switching random on or off or if Winamp is asking us about the state of our random flag
      int v = HIWORD(wParam) ? 1 : 0; 

      // are we being asked about the state of our random flag ?
      if (wParam >> 16 == 0xFFFF) {
        // tell winamp about our state
        SendMessage(g_mod->hwndParent,WM_WA_IPC,random_presets_flag,IPC_CB_VISRANDOM);
        break;
      }
      
      // changes random_preset_flag 
      set_random(v); 

      // if we are turning random on, we should switch to a new random preset right away
      if (v) load_random_preset();

      break;
    }
    case ID_VIS_FS: go_fullscreen(); break;
    case ID_VIS_CFG: open_configuration(); break;
    case ID_VIS_MENU: open_popup_menu(); break;
  }
  break;
}

6) Before turning fullscreen on, you should check wether video is already fullscreen or not :

if (SendMessage(g_mod->hwndParent,WM_WA_IPC,0,IPC_IS_PLAYING_VIDEO)>1) 
{
  cant_go_fullscreen_dlg();
}

7) You're almost done, the last thing to do is to notify Winamp when you go fullscreen :

go_fullscreen() 
{
  if (SendMessage(g_mod->hwndParent,WM_WA_IPC,0,IPC_IS_PLAYING_VIDEO)>1) 
  {
    cant_go_fullscreen_dlg();
  }
  else
  {
    SendMessage(g_mod->hwndParent,WM_WA_IPC,1,IPC_SET_VIS_FS_FLAG);

    ... now do the work of actually going fullscreen ...

  }
}

go_windowed()
{
  SendMessage(g_mod->hwndParent,WM_WA_IPC,0,IPC_SET_VIS_FS_FLAG);

  ... now do the work of going back to windowed mode ...

}


That should be all. Feel free to send your questions to francis@winamp.com


[Matplotlib.Net\libs\Python.Runtime.deps.json]
{
  "runtimeTarget": {
    "name": ".NETStandard,Version=v2.0/",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETStandard,Version=v2.0": {},
    ".NETStandard,Version=v2.0/": {
      "Python.Runtime/1.0.0": {
        "dependencies": {
          "NETStandard.Library": "2.0.3",
          "System.Reflection.Emit": "4.3.0"
        },
        "runtime": {
          "Python.Runtime.dll": {}
        }
      },
      "Microsoft.NETCore.Platforms/1.1.0": {},
      "Microsoft.NETCore.Targets/1.1.0": {},
      "NETStandard.Library/2.0.3": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0"
        }
      },
      "System.IO/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0",
          "System.Text.Encoding": "4.3.0",
          "System.Threading.Tasks": "4.3.0"
        }
      },
      "System.Reflection/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.IO": "4.3.0",
          "System.Reflection.Primitives": "4.3.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Reflection.Emit/4.3.0": {
        "dependencies": {
          "System.IO": "4.3.0",
          "System.Reflection": "4.3.0",
          "System.Reflection.Emit.ILGeneration": "4.3.0",
          "System.Reflection.Primitives": "4.3.0",
          "System.Runtime": "4.3.0"
        },
        "runtime": {
          "lib/netstandard1.3/System.Reflection.Emit.dll": {
            "assemblyVersion": "4.0.2.0",
            "fileVersion": "4.6.24705.1"
          }
        }
      },
      "System.Reflection.Emit.ILGeneration/4.3.0": {
        "dependencies": {
          "System.Reflection": "4.3.0",
          "System.Reflection.Primitives": "4.3.0",
          "System.Runtime": "4.3.0"
        },
        "runtime": {
          "lib/netstandard1.3/System.Reflection.Emit.ILGeneration.dll": {
            "assemblyVersion": "4.0.2.0",
            "fileVersion": "4.6.24705.1"
          }
        }
      },
      "System.Reflection.Primitives/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Runtime/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0"
        }
      },
      "System.Text.Encoding/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Threading.Tasks/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0"
        }
      }
    }
  },
  "libraries": {
    "Python.Runtime/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "Microsoft.NETCore.Platforms/1.1.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-513B791Shr06YFOf/W9oL/Hu84tdMQNG8JiBoHlBCcyTluZ9WDyqvOwHnPK3TGzZ5FB03PwwfG0KbA0h5tPQMg==",
      "path": "microsoft.netcore.platforms/1.1.0",
      "hashPath": "microsoft.netcore.platforms.1.1.0.nupkg.sha512"
    },
    "Microsoft.NETCore.Targets/1.1.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-sk2W8cUfcxgz6bhE9Rw77hMA8T9ipJZpuxQY8uLdQtSwvQXSCBlQ/wEF/4EvDv1jEc4WyJi+8rY/fEY7ZlBEvA==",
      "path": "microsoft.netcore.targets/1.1.0",
      "hashPath": "microsoft.netcore.targets.1.1.0.nupkg.sha512"
    },
    "NETStandard.Library/2.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-st47PosZSHrjECdjeIzZQbzivYBJFv6P2nv4cj2ypdI204DO+vZ7l5raGMiX4eXMJ53RfOIg+/s4DHVZ54Nu2A==",
      "path": "netstandard.library/2.0.3",
      "hashPath": "netstandard.library.2.0.3.nupkg.sha512"
    },
    "System.IO/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-9OxM0mz9lRKeLWOqAqOMFQu5Kavl+QjyZVKs1v/h6PLXaWPo7A0CDwV47wO+P245blpMEiqkAcNlyhUO3scqtw==",
      "path": "system.io/4.3.0",
      "hashPath": "system.io.4.3.0.nupkg.sha512"
    },
    "System.Reflection/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Jg6u7Wrfaour/Ks3BN3ciJbp58ZQ5TSPt/Exy25LIgNYj3Hw4nH9U+aCckFvBtUZEDJ3Lm21BPdFoNdL7o56+Q==",
      "path": "system.reflection/4.3.0",
      "hashPath": "system.reflection.4.3.0.nupkg.sha512"
    },
    "System.Reflection.Emit/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-W5uUXmJQu9Voh9TW1bET56rXyZ5VJtL+vLNiqg8kQ4zeoAynkLGxuLE5/l8iWV2aqx2J3Jt87ZsA9gBcG2po+A==",
      "path": "system.reflection.emit/4.3.0",
      "hashPath": "system.reflection.emit.4.3.0.nupkg.sha512"
    },
    "System.Reflection.Emit.ILGeneration/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-nrz0dV+KVzSZltVB9WWID7mA82vys4fQMsb4w2vNI8IZqZGXVWL/WULKU4HgiamR9zjelXXn09k/8x5dAbmaLA==",
      "path": "system.reflection.emit.ilgeneration/4.3.0",
      "hashPath": "system.reflection.emit.ilgeneration.4.3.0.nupkg.sha512"
    },
    "System.Reflection.Primitives/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-sI1Jbm9BCi+upTjKL8/KH7RTxGrOc0rTI/LWcxL+OCbT1YAV/daMkKeoXJPSDzwm2gMmq/0ZKT+ofcG4dEzi5w==",
      "path": "system.reflection.primitives/4.3.0",
      "hashPath": "system.reflection.primitives.4.3.0.nupkg.sha512"
    },
    "System.Runtime/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-tKaf4WBkVHtcs/BLGRIl71MOvp3elSNHh8RIb2XXqNJgwxrN5PSfYGjKj/W0FwHk1IKG9xrIIT//4GqYdcAUgQ==",
      "path": "system.runtime/4.3.0",
      "hashPath": "system.runtime.4.3.0.nupkg.sha512"
    },
    "System.Text.Encoding/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-5jd2TTmL72V2icUy5kNIRrPyYLO6lG8nPkHEKovLIekLXdMe1aVb2xGC6C+8qSa7o2wQkgilm3rJneAhZSaCKQ==",
      "path": "system.text.encoding/4.3.0",
      "hashPath": "system.text.encoding.4.3.0.nupkg.sha512"
    },
    "System.Threading.Tasks/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3zLTxblEvlqXnHGzgElyOc/sdBark6mMPNO71gjpFkdQXit3ZFjSFlqJS6OFqq2gcRs8j3IcyntgrPLKRFMXSw==",
      "path": "system.threading.tasks/4.3.0",
      "hashPath": "system.threading.tasks.4.3.0.nupkg.sha512"
    }
  }
}

[Matplotlib.Net\README.md]
# Matplotlib.Net

.NET wrapper for the Python plotting library Matplotlib

[Matplotlib.Net\src\Matplotlib.Net\Matplotlib.Net.csproj]
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Python.Runtime">
      <HintPath>..\..\libs\Python.Runtime.dll</HintPath>
    </Reference>
  </ItemGroup>
</Project>


[Matplotlib.Net\src\Matplotlib.Net\PyPlot.cs]
using System;
using Python.Runtime;

namespace Matplotlib.Net
{
    public class PyPlot
    {
        public float[] YValues { get; private set; }

        public float[] XValues { get; private set; }

        public PyPlot()
        {

        }

        public PyPlot X(float[] values)
        {
            XValues = values;
            return this;
        }

        public PyPlot Y(float[] values)
        {
            YValues = values;
            return this;
        }

        public object Show()
        {
            using (Py.GIL())
            {
                dynamic mpl = Py.Import("matplotlib");
                dynamic plt = Py.Import("matplotlib.pyplot");

                plt.plot(XValues, YValues);
                plt.show();
            }

            return null;
        }
    }
}


[out.txt]
  Determining projects to restore...
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'OpenTK 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'OpenTK.GLControl 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'SkiaSharp.Views 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'SkiaSharp.Views.Gtk2 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'OpenTK 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'OpenTK.GLControl 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'SkiaSharp.Views 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'SkiaSharp.Views.Gtk2 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
  All projects are up-to-date for restore.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'OpenTK 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'OpenTK.GLControl 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'SkiaSharp.Views 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'SkiaSharp.Views.Gtk2 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'OpenTK 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'OpenTK.GLControl 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'SkiaSharp.Views 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'SkiaSharp.Views.Gtk2 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
  PhoenixVisualizer.Core -> D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Core\bin\Debug\net8.0\PhoenixVisualizer.Core.dll
  PhoenixVisualizer.Visuals -> D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\bin\Debug\net8.0\PhoenixVisualizer.Visuals.dll
  PhoenixVisualizer.Audio -> D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Audio\bin\Debug\net8.0\PhoenixVisualizer.Audio.dll
  PhoenixVisualizer -> D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\bin\Debug\net8.0\PhoenixVisualizer.dll

Build succeeded.

D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'OpenTK 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'OpenTK.GLControl 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'SkiaSharp.Views 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'SkiaSharp.Views.Gtk2 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'OpenTK 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'OpenTK.GLControl 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'SkiaSharp.Views 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'SkiaSharp.Views.Gtk2 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project. [D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.sln]
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'OpenTK 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'OpenTK.GLControl 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'SkiaSharp.Views 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj : warning NU1701: Package 'SkiaSharp.Views.Gtk2 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'OpenTK 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'OpenTK.GLControl 3.1.0' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'SkiaSharp.Views 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
D:\GitHub\AMrepo\PhoenixVisualizer\PhoenixVisualizer.App\PhoenixVisualizer.csproj : warning NU1701: Package 'SkiaSharp.Views.Gtk2 2.88.8' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net8.0'. This package may not be fully compatible with your project.
    16 Warning(s)
    0 Error(s)

Time Elapsed 00:00:01.58


[PhoenixVisualizer.ApeHost\Class1.cs]
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.ApeHost;

public interface IApeHost
{
	void Register(IApeEffect effect);
}

public sealed class ApeHost : IApeHost
{
	public void Register(IApeEffect effect) { /* registry to be implemented */ }
}


[PhoenixVisualizer.ApeHost\PhoenixVisualizer.ApeHost.csproj]
<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <ProjectReference Include="..\PhoenixVisualizer.PluginHost\PhoenixVisualizer.PluginHost.csproj" />
  </ItemGroup>

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>


[PhoenixVisualizer.App\App.axaml]
<Application xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             x:Class="PhoenixVisualizer.App"
             xmlns:local="using:PhoenixVisualizer"
             RequestedThemeVariant="Default">
             <!-- "Default" ThemeVariant follows system theme variant. "Dark" or "Light" are other available options. -->

    <Application.DataTemplates>
        <local:ViewLocator/>
    </Application.DataTemplates>
  
    <Application.Styles>
        <FluentTheme />
    </Application.Styles>
</Application>

[PhoenixVisualizer.App\App.axaml.cs]
// PhoenixVisualizer/PhoenixVisualizer.App/App.axaml.cs
using System.Linq;
using Avalonia;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Data.Core;
using Avalonia.Data.Core.Plugins;
using Avalonia.Markup.Xaml;
using PhoenixVisualizer.PluginHost;
using PhoenixVisualizer.Plugins.Avs;
using PhoenixVisualizer.ViewModels;
using PhoenixVisualizer.Views;
using PhoenixVisualizer.Visuals;

namespace PhoenixVisualizer;

public partial class App : Application
{
    public override void Initialize()
    {
        // Runtime XAML load (works even if the XAML generator isn't running)
        AvaloniaXamlLoader.Load(this);
    }

    public override void OnFrameworkInitializationCompleted()
    {
        if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
        {
            // --- Register bundled visualizer plugins BEFORE creating MainWindow ---
            // If any of these classes aren't present in this branch, comment that line out.
            PluginRegistry.Register("bars", "Simple Bars", () => new BarsVisualizer());
            PluginRegistry.Register("spectrum", "Spectrum Bars", () => new SpectrumVisualizer());
            PluginRegistry.Register("waveform", "Waveform", () => new WaveformVisualizer());
            PluginRegistry.Register("pulse", "Pulse Circle", () => new PulseVisualizer());
            PluginRegistry.Register("energy", "Energy Ring", () => new EnergyVisualizer());
            PluginRegistry.Register("sanity", "Sanity Check", () => new SanityVisualizer());
            PluginRegistry.Register("vis_avs", "AVS Runtime", () => new AvsVisualizerPlugin());

            // Avoid duplicate validations from Avalonia + CommunityToolkit
            DisableAvaloniaDataAnnotationValidation();

            // Boot main window
            desktop.MainWindow = new MainWindow
            {
                DataContext = new MainWindowViewModel(),
            };
        }

        base.OnFrameworkInitializationCompleted();
    }

    private void DisableAvaloniaDataAnnotationValidation()
    {
        var toRemove = BindingPlugins.DataValidators
            .OfType<DataAnnotationsValidationPlugin>()
            .ToArray();

        foreach (var plugin in toRemove)
            BindingPlugins.DataValidators.Remove(plugin);
    }
}


[PhoenixVisualizer.App\PhoenixVisualizer.csproj]
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <BuiltInComInteropSupport>true</BuiltInComInteropSupport>
    <ApplicationManifest>app.manifest</ApplicationManifest>
    <AvaloniaUseCompiledBindingsByDefault>true</AvaloniaUseCompiledBindingsByDefault>
  </PropertyGroup>

  <ItemGroup>
    <Folder Include="Models\" />
    <AvaloniaResource Include="Assets\**" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\PhoenixVisualizer.Core\PhoenixVisualizer.Core.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.Audio\PhoenixVisualizer.Audio.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.PluginHost\PhoenixVisualizer.PluginHost.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.ApeHost\PhoenixVisualizer.ApeHost.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.AvsEngine\PhoenixVisualizer.AvsEngine.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.Plots\PhoenixVisualizer.Plots.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.Plugins.Avs\PhoenixVisualizer.Plugins.Avs.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.Plugins.Ape.Phoenix\PhoenixVisualizer.Plugins.Ape.Phoenix.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.Editor\PhoenixVisualizer.Editor.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Avalonia" Version="11.3.3" />
    <PackageReference Include="Avalonia.Desktop" Version="11.3.3" />
    <PackageReference Include="Avalonia.Themes.Fluent" Version="11.3.3" />
    <PackageReference Include="Avalonia.Fonts.Inter" Version="11.3.3" />
    <!--Condition below is needed to remove Avalonia.Diagnostics package from build output in Release configuration.-->
    <PackageReference Include="Avalonia.Diagnostics" Version="11.3.3">
      <IncludeAssets Condition="'$(Configuration)' != 'Debug'">None</IncludeAssets>
      <PrivateAssets Condition="'$(Configuration)' != 'Debug'">All</PrivateAssets>
    </PackageReference>
    <PackageReference Include="CommunityToolkit.Mvvm" Version="8.2.1" />
  </ItemGroup>
</Project>


[PhoenixVisualizer.App\Program.cs]
using Avalonia;
using System;

namespace PhoenixVisualizer;

sealed class Program
{
    // Initialization code. Don't use any Avalonia, third-party APIs or any
    // SynchronizationContext-reliant code before AppMain is called: things aren't initialized
    // yet and stuff might break.
    [STAThread]
    public static void Main(string[] args) => BuildAvaloniaApp()
        .StartWithClassicDesktopLifetime(args);

    // Avalonia configuration, don't remove; also used by visual designer.
    public static AppBuilder BuildAvaloniaApp()
        => AppBuilder.Configure<App>()
            .UsePlatformDetect()
            .WithInterFont()
            .LogToTrace();
}


[PhoenixVisualizer.App\Rendering\CanvasAdapter.cs]
using System;
using Avalonia;
using Avalonia.Media;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Rendering;

public sealed class CanvasAdapter : ISkiaCanvas
{
	private readonly DrawingContext _context;
	private readonly double _width;
	private readonly double _height;

	public CanvasAdapter(DrawingContext context, double width, double height)
	{
		_context = context;
		_width = width;
		_height = height;
	}

	public void Clear(uint argb)
	{
		var color = Color.FromUInt32(argb);
		_context.FillRectangle(new SolidColorBrush(color), new Rect(0, 0, _width, _height));
	}

	public void DrawLines(ReadOnlySpan<(float x, float y)> points, float thickness, uint argb)
	{
		if (points.Length < 2) return;
		var geometry = new StreamGeometry();
		using (var ctx = geometry.Open())
		{
			ctx.BeginFigure(new Avalonia.Point(points[0].x, points[0].y), false);
			for (int i = 1; i < points.Length; i++)
			{
				ctx.LineTo(new Avalonia.Point(points[i].x, points[i].y));
			}
			ctx.EndFigure(false);
		}
		var pen = new Pen(new SolidColorBrush(Color.FromUInt32(argb)), thickness);
		_context.DrawGeometry(null, pen, geometry);
	}

	public void FillCircle(float cx, float cy, float radius, uint argb)
	{
		var brush = new SolidColorBrush(Color.FromUInt32(argb));
		_context.DrawEllipse(brush, null, new Avalonia.Point(cx, cy), radius, radius);
	}
}




[PhoenixVisualizer.App\Rendering\RenderSurface.cs]
using System;
using System.Threading;
using Avalonia;
using Avalonia.Controls;
using Avalonia.Media;
using Avalonia.Threading;
using PhoenixVisualizer.Audio;
using PhoenixVisualizer.PluginHost;
using PhoenixVisualizer.Plugins.Avs;

namespace PhoenixVisualizer.Rendering;

public sealed class RenderSurface : Control
{
    private readonly AudioService _audio;
    private IVisualizerPlugin? _plugin = new AvsVisualizerPlugin(); // keep a sensible default
    private Timer? _timer;

    // FFT smoothing
    private readonly float[] _smoothFft = new float[2048];
    private bool _fftInit;

    // FPS
    private DateTime _fpsWindowStart = DateTime.UtcNow;
    private int _framesInWindow;

    // Simple beat/BPM estimation
    private float _prevEnergy;
    private DateTime _lastBeat = DateTime.MinValue;
    private double _bpm;

    // Resize tracking
    private int _lastWidth;
    private int _lastHeight;

    // Events
    public event Action<double>? FpsChanged;
    public event Action<double>? BpmChanged;
    public event Action<double, double>? PositionChanged;

    public RenderSurface()
    {
        _audio = new AudioService();
    }

    public void SetPlugin(IVisualizerPlugin plugin)
    {
        _plugin?.Dispose();
        _plugin = plugin;
        System.Diagnostics.Debug.WriteLine($"[RenderSurface] SetPlugin: {plugin.DisplayName} ({plugin.Id})");
        if (Bounds.Width > 0 && Bounds.Height > 0)
        {
            _plugin.Initialize((int)Bounds.Width, (int)Bounds.Height);
        }
    }

    protected override void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e)
    {
        base.OnAttachedToVisualTree(e);
        _plugin?.Initialize((int)Bounds.Width, (int)Bounds.Height);
        _audio.Initialize();
        _timer = new Timer(_ => Dispatcher.UIThread.Post(InvalidateVisual, DispatcherPriority.Render), null, 0, 16);
    }

    protected override void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e)
    {
        _timer?.Dispose();
        _timer = null;
        _plugin?.Dispose();
        _audio.Dispose();
        base.OnDetachedFromVisualTree(e);
    }

    public bool Open(string path) => _audio.Open(path);
    public void Play() => _audio.Play();
    public void Pause() => _audio.Pause();
    public void Stop() => _audio.Stop();

    public override void Render(DrawingContext context)
    {
        var adapter = new CanvasAdapter(context, Bounds.Width, Bounds.Height);

        // Handle dynamic resize for plugins that support it
        int w = (int)Bounds.Width;
        int h = (int)Bounds.Height;
        if (w != _lastWidth || h != _lastHeight)
        {
            _lastWidth = w;
            _lastHeight = h;
            _plugin?.Resize(w, h);
        }

        // Audio data
        var fft = _audio.ReadFft();
        var wave = _audio.ReadWaveform();
        double pos = _audio.GetPositionSeconds();
        double total = _audio.GetLengthSeconds();

        // Smooth FFT (EMA)
        if (!_fftInit)
        {
            Array.Copy(fft, _smoothFft, Math.Min(fft.Length, _smoothFft.Length));
            _fftInit = true;
        }
        else
        {
            int n = Math.Min(fft.Length, _smoothFft.Length);
            const float alpha = 0.2f;
            for (int i = 0; i < n; i++)
            {
                _smoothFft[i] = _smoothFft[i] + alpha * (fft[i] - _smoothFft[i]);
            }
        }

        // Feature extraction
        int len = _smoothFft.Length;
        float energy = 0f;
        float volumeSum = 0f;
        float peak = 0f;
        float bass = 0f, mid = 0f, treble = 0f;
        int bassEnd = len / 3;
        int midEnd = 2 * len / 3;

        for (int i = 0; i < len; i++)
        {
            float v = MathF.Abs(_smoothFft[i]);
            volumeSum += v;
            energy += v * v;
            if (v > peak) peak = v;
            if (i < bassEnd) bass += v;
            else if (i < midEnd) mid += v;
            else treble += v;
        }

        float volume = volumeSum / len;
        float rms = MathF.Sqrt(energy / len);

        // crude beat detection via energy jump
        bool beat = false;
        var now = DateTime.UtcNow;
        if (energy > _prevEnergy * 1.5f && energy > 1e-6f)
        {
            beat = true;
            if (_lastBeat != DateTime.MinValue)
            {
                _bpm = 60.0 / (now - _lastBeat).TotalSeconds;
                Dispatcher.UIThread.Post(() => BpmChanged?.Invoke(_bpm), DispatcherPriority.Background);
            }
            _lastBeat = now;
        }
        _prevEnergy = _prevEnergy * 0.9f + energy * 0.1f;

        // Use playback position as t (preferred for visual sync)
        double t = pos;

        var features = new AudioFeatures(
            t,            // time seconds (playhead)
            _bpm,         // bpm
            beat,         // beat flag
            volume,       // avg magnitude
            rms,          // rms
            peak,         // peak
            energy,       // energy
            _smoothFft,   // fft
            wave,         // waveform
            bass,         // bass band sum
            mid,          // mid band sum
            treble,       // treble band sum
            null,
            null
        );

        try
        {
            _plugin?.RenderFrame(features, adapter);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Plugin render failed: {ex}");
        }

        // push position to UI listeners
        Dispatcher.UIThread.Post(() => PositionChanged?.Invoke(pos, total), DispatcherPriority.Background);

        // FPS tracking
        _framesInWindow++;
        var span = now - _fpsWindowStart;
        if (span.TotalSeconds >= 1)
        {
            double fps = _framesInWindow / span.TotalSeconds;
            _framesInWindow = 0;
            _fpsWindowStart = now;
            Dispatcher.UIThread.Post(() => FpsChanged?.Invoke(fps), DispatcherPriority.Background);
        }
    }
}

[PhoenixVisualizer.App\ViewLocator.cs]
using System;
using Avalonia.Controls;
using Avalonia.Controls.Templates;
using PhoenixVisualizer.ViewModels;

namespace PhoenixVisualizer;

public class ViewLocator : IDataTemplate
{

    public Control? Build(object? param)
    {
        if (param is null)
            return null;
        
        var name = param.GetType().FullName!.Replace("ViewModel", "View", StringComparison.Ordinal);
        var type = Type.GetType(name);

        if (type != null)
        {
            return (Control)Activator.CreateInstance(type)!;
        }
        
        return new TextBlock { Text = "Not Found: " + name };
    }

    public bool Match(object? data)
    {
        return data is ViewModelBase;
    }
}


[PhoenixVisualizer.App\ViewModels\MainWindowViewModel.cs]
namespace PhoenixVisualizer.ViewModels;

public partial class MainWindowViewModel : ViewModelBase
{
    // Clean slate - no more "Welcome to Avalonia" greeting
}


[PhoenixVisualizer.App\ViewModels\SettingsWindowViewModel.cs]
namespace PhoenixVisualizer.ViewModels;

public partial class SettingsWindowViewModel : ViewModelBase
{
    // Properties for the settings
    public string SelectedPlugin { get; set; } = "avs";
    public int SampleRate { get; set; } = 44100;
    public int BufferSize { get; set; } = 1024;
    public bool EnableVsync { get; set; } = true;
    public bool StartFullscreen { get; set; } = false;
    public bool AutoHideUI { get; set; } = true;
}


[PhoenixVisualizer.App\ViewModels\ViewModelBase.cs]
using CommunityToolkit.Mvvm.ComponentModel;

namespace PhoenixVisualizer.ViewModels;

public class ViewModelBase : ObservableObject
{
}


[PhoenixVisualizer.App\Views\MainWindow.axaml]
<!-- PhoenixVisualizer/PhoenixVisualizer.App/Views/MainWindow.axaml -->
<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="using:PhoenixVisualizer.ViewModels"
        xmlns:r="using:PhoenixVisualizer.Rendering"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="PhoenixVisualizer.Views.MainWindow"
        x:DataType="vm:MainWindowViewModel"
        Icon="/Assets/avalonia-logo.ico"
        Title="PhoenixVisualizer">

    <Design.DataContext>
        <!-- Previewer-only DataContext; runtime is set in App.axaml.cs -->
        <vm:MainWindowViewModel/>
    </Design.DataContext>

    <Grid RowDefinitions="Auto,Auto,*">
        <!-- Top toolbar -->
        <StackPanel Orientation="Horizontal" Margin="8" Spacing="8">
            <Button x:Name="BtnOpen" Content="Open" Click="OnOpenClick" Margin="0,0,8,0"/>
            <Button x:Name="BtnPlay" Content="Play" Click="OnPlayClick" Margin="0,0,8,0"/>
            <Button x:Name="BtnPause" Content="Pause" Click="OnPauseClick" Margin="0,0,8,0"/>
            <Button x:Name="BtnStop" Content="Stop" Click="OnStopClick" Margin="0,0,8,0"/>
            <!-- New controls -->
            <Button x:Name="BtnSettings" Content="Settings" Click="OnSettingsClick" Margin="0,0,8,0"/>
            <Button x:Name="BtnEditor" Content="AVS Editor" Click="OnEditorClick" Margin="0,0,8,0"/>
            <ComboBox x:Name="CmbPlugin" Width="160"/>
            <TextBox x:Name="TxtPreset" Width="320" Watermark="points=256;mode=line;source=fft"/>
            <Button Content="Load Preset" Click="OnLoadPreset"/>
            <Button Content="Import Preset" Click="OnImportPreset"/>
        </StackPanel>

        <!-- Status row (expanded from single FPS to FPS/BPM/Time) -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="8" Spacing="16">
            <TextBlock x:Name="LblFps"/>
            <TextBlock x:Name="LblBpm"/>
            <TextBlock x:Name="LblTime"/>
        </StackPanel>

        <!-- Render surface -->
        <Border Grid.Row="2" Margin="8" Background="#111">
            <r:RenderSurface x:Name="RenderHost"/>
        </Border>
    </Grid>

</Window>

[PhoenixVisualizer.App\Views\MainWindow.axaml.cs]
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Avalonia.Controls;
using Avalonia.Interactivity;
using Avalonia.Markup.Xaml;              // <-- manual XAML load
using Avalonia.Platform.Storage;
using Avalonia.Threading;
using PhoenixVisualizer.PluginHost;
using PhoenixVisualizer.Plugins.Avs;
using PhoenixVisualizer.Rendering;
using EditorWindow = PhoenixVisualizer.Editor.Views.MainWindow;

namespace PhoenixVisualizer.Views;

public partial class MainWindow : Window
{
    // Grab the render surface once on the UI thread so background tasks don't try
    // to traverse the visual tree later (which would throw ðŸ™…â€â™‚ï¸)
    private readonly RenderSurface? _renderSurface;
    private RenderSurface? RenderSurfaceControl => _renderSurface;

    private static readonly string[] AudioPatterns = { "*.mp3", "*.wav", "*.flac", "*.ogg" };

    public MainWindow()
    {
        // Manually load XAML so we don't depend on generated InitializeComponent()
        AvaloniaXamlLoader.Load(this);
        _renderSurface = this.FindControl<RenderSurface>("RenderHost");

        // Wire runtime UI updates if the render surface is present
        if (RenderSurfaceControl is not null)
        {
            // FPS
            RenderSurfaceControl.FpsChanged += fps =>
            {
                var lbl = this.FindControl<TextBlock>("LblFps");
                if (lbl is not null)
                {
                    Dispatcher.UIThread.Post(
                        () => lbl.Text = $"FPS: {fps:F1}",
                        DispatcherPriority.Background
                    );
                }
            };

            // BPM
            RenderSurfaceControl.BpmChanged += bpm =>
            {
                var lbl = this.FindControl<TextBlock>("LblBpm");
                if (lbl is not null)
                {
                    Dispatcher.UIThread.Post(
                        () => lbl.Text = $"BPM: {bpm:F1}",
                        DispatcherPriority.Background
                    );
                }
            };

            // Position (current / total)
            RenderSurfaceControl.PositionChanged += (pos, len) =>
            {
                var lbl = this.FindControl<TextBlock>("LblTime");
                if (lbl is not null)
                {
                    // Display current and total time as mm:ss ðŸ‘‡
                    // NOTE: Use a single escaped colon; the previous double escape
                    // threw a FormatException on runtime. ðŸ˜…
                    string cur = TimeSpan.FromSeconds(pos).ToString(@"mm\:ss");
                    string tot = TimeSpan.FromSeconds(len).ToString(@"mm\:ss");
                    Dispatcher.UIThread.Post(
                        () => lbl.Text = $"{cur} / {tot}",
                        DispatcherPriority.Background
                    );
                }
            };

            // Plugin ComboBox: populate from registry, fallback to AVS
            var combo = this.FindControl<ComboBox>("CmbPlugin");
            if (combo is not null)
            {
                var plugins = PluginRegistry.Available?.ToList()
                              ?? new List<(string id, string displayName)>();

                if (plugins.Count > 0)
                {
                    combo.ItemsSource = plugins.Select(p => p.displayName).ToList();

                    // Prefer the simple bars visual if it's registered
                    int idx = plugins.FindIndex(p => p.id == "bars");
                    if (idx < 0) idx = 0;
                    combo.SelectedIndex = idx;

                    // Set initial plugin based on the resolved index
                    var initial = PluginRegistry.Create(plugins[idx].id);
                    RenderSurfaceControl.SetPlugin(initial ?? new AvsVisualizerPlugin());

                    combo.SelectionChanged += (_, _) =>
                    {
                        if (RenderSurfaceControl is null) return;
                        int selected = combo.SelectedIndex;
                        if (selected >= 0 && selected < plugins.Count)
                        {
                            var plug = PluginRegistry.Create(plugins[selected].id)
                                       ?? new AvsVisualizerPlugin();
                            RenderSurfaceControl.SetPlugin(plug);
                        }
                    };
                }
                else
                {
                    // Fallback: no registry entries â€” default to AVS and disable the combo
                    combo.ItemsSource = new[] { "AVS (built-in)" };
                    combo.SelectedIndex = 0;
                    RenderSurfaceControl.SetPlugin(new AvsVisualizerPlugin());
                    combo.IsEnabled = false;
                }
            }
        }
    }

    private void InitializePlugin()
    {
        // Set default plugin after controls are ready
        // TODO: Load from settings/config file
        if (RenderSurfaceControl is not null)
        {
            var plugin = new AvsVisualizerPlugin(); // Default to AVS Engine
            RenderSurfaceControl.SetPlugin(plugin);
        }
    }

    private async void OnOpenClick(object? sender, RoutedEventArgs e)
    {
        if (RenderSurfaceControl is null) return;

        var files = await this.StorageProvider.OpenFilePickerAsync(
            new FilePickerOpenOptions
            {
                Title = "Open Audio File",
                AllowMultiple = false,
                FileTypeFilter = new List<FilePickerFileType>
                {
                    new FilePickerFileType("Audio") { Patterns = AudioPatterns }
                }
            });

        var file = files.Count > 0 ? files[0] : null;
        if (file is null) return;

        // Capture the control reference on the UI thread ðŸ‘‡
        var surface = RenderSurfaceControl;
        await Task.Run(() => surface?.Open(file.Path.LocalPath));
    }

    private void OnPlayClick(object? sender, RoutedEventArgs e) => RenderSurfaceControl?.Play();
    private void OnPauseClick(object? sender, RoutedEventArgs e) => RenderSurfaceControl?.Pause();
    private void OnStopClick(object? sender, RoutedEventArgs e) => RenderSurfaceControl?.Stop();

    private async void OnSettingsClick(object? sender, RoutedEventArgs e)
    {
        try
        {
            var dlg = new SettingsWindow();
            await dlg.ShowDialog(this);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"[MainWindow] Settings dialog failed: {ex}");
        }
    }

    private async void OnEditorClick(object? sender, RoutedEventArgs e)
    {
        var editor = new EditorWindow();
        await editor.ShowDialog(this);
    }

    private void OnLoadPreset(object? sender, RoutedEventArgs e)
    {
        var tb = this.FindControl<TextBox>("TxtPreset");
        if (tb is null || RenderSurfaceControl is null) return;

        var plug = PluginRegistry.Create("vis_avs") as IAvsHostPlugin;
        if (plug is null) return;

        RenderSurfaceControl.SetPlugin(plug);
        plug.LoadPreset(tb.Text ?? string.Empty);
    }

    private async void OnImportPreset(object? sender, RoutedEventArgs e)
    {
        if (RenderSurfaceControl is null) return;

        var files = await this.StorageProvider.OpenFilePickerAsync(
            new FilePickerOpenOptions
            {
                Title = "Import AVS Preset",
                AllowMultiple = false,
                FileTypeFilter = new List<FilePickerFileType>
                {
                    new("AVS Preset") { Patterns = new[] { "*.avs", "*.txt" } }
                }
            });

        var file = files.Count > 0 ? files[0] : null;
        if (file is null) return;

        var plug = PluginRegistry.Create("vis_avs") as IAvsHostPlugin;
        if (plug is null) return;

        using var stream = await file.OpenReadAsync();
        using var reader = new StreamReader(stream);
        var text = await reader.ReadToEndAsync();

        RenderSurfaceControl.SetPlugin(plug);
        plug.LoadPreset(text);
    }
}

[PhoenixVisualizer.App\Views\SettingsWindow.axaml]
<!-- PhoenixVisualizer/PhoenixVisualizer.App/Views/SettingsWindow.axaml -->
<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="PhoenixVisualizer.Views.SettingsWindow"
        Icon="/Assets/avalonia-logo.ico"
        Title="Phoenix Visualizer Settings"
        Width="500" Height="400"
        CanResize="False"
        WindowStartupLocation="CenterOwner">

    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Header -->
        <TextBlock Grid.Row="0"
                   Text="Settings"
                   FontSize="20"
                   FontWeight="Bold"
                   Margin="0,0,0,20"/>

        <!-- Settings Content -->
        <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto">
            <StackPanel Spacing="20">

                <!-- Visualization Plugin -->
                <Border BorderBrush="Gray" BorderThickness="1" Padding="15" CornerRadius="5">
                    <StackPanel>
                        <TextBlock Text="Visualization Plugin"
                                   FontSize="16" FontWeight="Bold" Margin="0,0,0,10"/>
                        <TextBlock Text="Choose the default visualization plugin:"
                                   Margin="0,0,0,10" />
                        <StackPanel Margin="0,0,0,10">
                            <RadioButton x:Name="AvsRadio"
                                         Content="AVS Engine (Winamp-style)"
                                         Tag="avs"
                                         IsChecked="True"
                                         Margin="0,5"/>
                            <RadioButton x:Name="PhoenixRadio"
                                         Content="Phoenix Visualizer"
                                         Tag="phoenix"
                                         Margin="0,5"/>
                        </StackPanel>
                    </StackPanel>
                </Border>

                <!-- Audio Settings -->
                <Border BorderBrush="Gray" BorderThickness="1" Padding="15" CornerRadius="5">
                    <StackPanel>
                        <TextBlock Text="Audio Settings"
                                   FontSize="16" FontWeight="Bold" Margin="0,0,0,10"/>
                        <Grid ColumnDefinitions="Auto,*" RowDefinitions="Auto,Auto" Margin="0,0,0,10">
                            <TextBlock Grid.Row="0" Grid.Column="0" Text="Sample Rate:" VerticalAlignment="Center" Margin="0,0,10,0"/>
                            <ComboBox Grid.Row="0" Grid.Column="1" x:Name="SampleRateCombo" SelectedIndex="1">
                                <ComboBoxItem Content="22050 Hz"/>
                                <ComboBoxItem Content="44100 Hz"/>
                                <ComboBoxItem Content="48000 Hz"/>
                                <ComboBoxItem Content="96000 Hz"/>
                            </ComboBox>

                            <TextBlock Grid.Row="1" Grid.Column="0" Text="Buffer Size:" VerticalAlignment="Center" Margin="0,0,10,0"/>
                            <ComboBox Grid.Row="1" Grid.Column="1" x:Name="BufferSizeCombo" SelectedIndex="1">
                                <ComboBoxItem Content="256 samples"/>
                                <ComboBoxItem Content="512 samples"/>
                                <ComboBoxItem Content="1024 samples"/>
                                <ComboBoxItem Content="2048 samples"/>
                            </ComboBox>
                        </Grid>
                    </StackPanel>
                </Border>

                <!-- Display Settings -->
                <Border BorderBrush="Gray" BorderThickness="1" Padding="15" CornerRadius="5">
                    <StackPanel>
                        <TextBlock Text="Display Settings"
                                   FontSize="16" FontWeight="Bold" Margin="0,0,0,10"/>
                        <CheckBox x:Name="VsyncCheck"       Content="Enable V-Sync"               IsChecked="True"  Margin="0,5"/>
                        <CheckBox x:Name="FullscreenCheck"  Content="Start in Fullscreen Mode"                      Margin="0,5"/>
                        <CheckBox x:Name="AutoHideUICheck"  Content="Auto-hide UI in Fullscreen" IsChecked="True"  Margin="0,5"/>
                    </StackPanel>
                </Border>

            </StackPanel>
        </ScrollViewer>

        <!-- Buttons -->
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right" Spacing="10" Margin="0,20,0,0">
            <Button x:Name="BtnCancel" Content="Cancel" Width="80" Click="OnCancelClick"/>
            <Button x:Name="BtnApply"  Content="Apply"  Width="80" Click="OnApplyClick" IsDefault="True"/>
        </StackPanel>
    </Grid>
</Window>


[PhoenixVisualizer.App\Views\SettingsWindow.axaml.cs]
using System;
using Avalonia.Controls;
using Avalonia.Interactivity;
using Avalonia.Markup.Xaml;

namespace PhoenixVisualizer.Views;

public partial class SettingsWindow : Window
{
    // Public settings snapshot (matches your previous fields)
    public string SelectedPlugin     { get; private set; } = "avs";
    public int    SampleRate         { get; private set; } = 44100;
    public int    BufferSize         { get; private set; } = 512;
    public bool   EnableVsync        { get; private set; } = true;
    public bool   StartFullscreen    { get; private set; } = false;
    public bool   AutoHideUI         { get; private set; } = true;

    // Named controls (must match XAML x:Name)
    private RadioButton? AvsRadioControl        => this.FindControl<RadioButton>("AvsRadio");
    private RadioButton? PhoenixRadioControl    => this.FindControl<RadioButton>("PhoenixRadio");
    private ComboBox?    SampleRateComboControl => this.FindControl<ComboBox>("SampleRateCombo");
    private ComboBox?    BufferSizeComboControl => this.FindControl<ComboBox>("BufferSizeCombo");
    private CheckBox?    VsyncCheckControl      => this.FindControl<CheckBox>("VsyncCheck");
    private CheckBox?    FullscreenCheckControl => this.FindControl<CheckBox>("FullscreenCheck");
    private CheckBox?    AutoHideUICheckControl => this.FindControl<CheckBox>("AutoHideUICheck");

    public SettingsWindow()
    {
        InitializeComponent();

        // OPTIONAL: if you actually have a ViewModel type, you can set it here.
        // DataContext = new ViewModels.SettingsWindowViewModel();

        // Sync current fields -> UI controls
        LoadCurrentSettings();
    }

    private void InitializeComponent()
    {
        AvaloniaXamlLoader.Load(this);
    }

    // Wire to Button Clicks in XAML
    private void OnCancelClick(object? sender, RoutedEventArgs e) => Close();

    private void OnApplyClick(object? sender, RoutedEventArgs e)
    {
        SaveSettingsFromUI();
        Close();
    }

    private void LoadCurrentSettings()
    {
        // Radios
        if (SelectedPlugin == "phoenix") { PhoenixRadioControl?.SetCurrentValue(RadioButton.IsCheckedProperty, true); }
        else                             { AvsRadioControl?.SetCurrentValue(RadioButton.IsCheckedProperty, true); }

        // SampleRate
        if (SampleRateComboControl is not null)
        {
            SampleRateComboControl.SelectedIndex = SampleRate switch
            {
                22050 => 0,
                44100 => 1,
                48000 => 2,
                96000 => 3,
                _     => 1
            };
        }

        // BufferSize
        if (BufferSizeComboControl is not null)
        {
            BufferSizeComboControl.SelectedIndex = BufferSize switch
            {
                256  => 0,
                512  => 1,
                1024 => 2,
                2048 => 3,
                _    => 1
            };
        }

        VsyncCheckControl?.SetCurrentValue(CheckBox.IsCheckedProperty,      EnableVsync);
        FullscreenCheckControl?.SetCurrentValue(CheckBox.IsCheckedProperty, StartFullscreen);
        AutoHideUICheckControl?.SetCurrentValue(CheckBox.IsCheckedProperty, AutoHideUI);
    }

    private void SaveSettingsFromUI()
    {
        SelectedPlugin = PhoenixRadioControl?.IsChecked == true ? "phoenix" : "avs";

        if (SampleRateComboControl is not null)
        {
            SampleRate = SampleRateComboControl.SelectedIndex switch
            {
                0 => 22050,
                1 => 44100,
                2 => 48000,
                3 => 96000,
                _ => 44100
            };
        }

        if (BufferSizeComboControl is not null)
        {
            BufferSize = BufferSizeComboControl.SelectedIndex switch
            {
                0 => 256,
                1 => 512,
                2 => 1024,
                3 => 2048,
                _ => 512
            };
        }

        EnableVsync     = VsyncCheckControl?.IsChecked      ?? true;
        StartFullscreen = FullscreenCheckControl?.IsChecked ?? false;
        AutoHideUI      = AutoHideUICheckControl?.IsChecked ?? true;
    }
}


[PhoenixVisualizer.Audio\AudioService.cs]
using System;
using System.Numerics;
using NAudio.Wave;

namespace PhoenixVisualizer.Audio;

public sealed class AudioService : IDisposable
{
    // Playback
    private WaveOutEvent? _waveOut;
    private AudioFileReader? _audioFile;
    private ISampleProvider? _tapProvider;

    // Ring buffer for the last 2048 mono samples (power of two for FFT)
    private const int N = 2048;
    private readonly float[] _ring = new float[N];
    private int _ringIndex;
    private readonly object _lock = new();

    // Reusable buffers (returned to callers; caller treats them as read-only snapshots)
    private readonly float[] _fftBuffer = new float[N];   // magnitude spectrum
    private readonly float[] _waveBuffer = new float[N];  // ordered last-2048 waveform (mono)

    private bool _initialized;

    public bool Initialize()
    {
        if (_initialized) return true;
        try
        {
            _waveOut = new WaveOutEvent();
            _initialized = true;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"AudioService.Initialize failed: {ex.Message}");
            _initialized = false;
        }
        return _initialized;
    }

    public bool Open(string filePath)
    {
        if (!_initialized && !Initialize()) return false;

        try
        {
            _audioFile?.Dispose();
            _audioFile = new AudioFileReader(filePath); // float samples, auto-converts format

            // Wrap with a tapping sample provider to capture samples into the ring buffer
            _tapProvider = new TapSampleProvider(_audioFile, OnSamples);
            _waveOut?.Init(_tapProvider);

            // Reset ring/index when opening a new file
            lock (_lock)
            {
                Array.Clear(_ring, 0, _ring.Length);
                _ringIndex = 0;
            }

            return true;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"AudioService.Open failed: {ex.Message}");
            System.Diagnostics.Debug.WriteLine(ex.StackTrace);
            return false;
        }
    }

    public void Play()
    {
        if (_audioFile == null)
        {
            System.Diagnostics.Debug.WriteLine("AudioService.Play: No audio file loaded");
            return;
        }
        _waveOut?.Play();
    }

    public void Pause()
    {
        if (_audioFile == null)
        {
            System.Diagnostics.Debug.WriteLine("AudioService.Pause: No audio file loaded");
            return;
        }
        _waveOut?.Pause();
    }

    public void Stop()
    {
        if (_audioFile == null)
        {
            System.Diagnostics.Debug.WriteLine("AudioService.Stop: No audio file loaded");
            return;
        }

        _waveOut?.Stop();

        // Reset to beginning without re-creating the reader
        try
        {
            _audioFile!.CurrentTime = TimeSpan.Zero;

            // Clear cached audio so visualizers fall back to silence ðŸŽ§
            lock (_lock)
            {
                Array.Clear(_ring, 0, _ring.Length);
                _ringIndex = 0;
            }

            System.Diagnostics.Debug.WriteLine("AudioService.Stop: Reset to beginning");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"AudioService.Stop reset failed: {ex.Message}");
        }
    }

    /// <summary>
    /// Returns the current magnitude spectrum (size 2048).
    /// Computed from the most recent 2048 mono samples using a Hann window + radix-2 FFT.
    /// </summary>
    public float[] ReadFft()
    {
        // Snapshot waveform (ordered) under lock
        float[] time = new float[N];
        lock (_lock)
        {
            int idx = _ringIndex; // next write position (head)
            int n1 = N - idx;
            Array.Copy(_ring, idx, time, 0, n1);
            if (idx != 0) Array.Copy(_ring, 0, time, n1, idx);
        }

        // Prepare complex buffer with Hann window
        Span<Complex> buf = stackalloc Complex[N];
        for (int i = 0; i < N; i++)
        {
            // Hann window
            float w = 0.5f * (1f - (float)Math.Cos((2 * Math.PI * i) / (N - 1)));
            buf[i] = new Complex(time[i] * w, 0.0);
        }

        // In-place iterative Cooleyâ€“Tukey FFT (radix-2)
        FftInPlace(buf);

        // Magnitude spectrum -> _fftBuffer
        // Typically you'd use first N/2 bins for real signals, but we return N for flexibility.
        for (int i = 0; i < N; i++)
        {
            double mag = buf[i].Magnitude;
            _fftBuffer[i] = (float)mag;
        }

        return _fftBuffer;
    }

    /// <summary>
    /// Returns an ordered copy of the last 2048 mono samples (time domain).
    /// </summary>
    public float[] ReadWaveform()
    {
        lock (_lock)
        {
            int idx = _ringIndex;
            int n1 = N - idx;
            Array.Copy(_ring, idx, _waveBuffer, 0, n1);
            if (idx != 0) Array.Copy(_ring, 0, _waveBuffer, n1, idx);
        }
        return _waveBuffer;
    }

    public double GetPositionSeconds() => _audioFile?.CurrentTime.TotalSeconds ?? 0.0;

    public double GetLengthSeconds() => _audioFile?.TotalTime.TotalSeconds ?? 0.0;

    public void Dispose()
    {
        try { _waveOut?.Stop(); } catch { /* ignore */ }
        _waveOut?.Dispose();
        _audioFile?.Dispose();
        _waveOut = null;
        _audioFile = null;
        _tapProvider = null;
    }

    // ===== Internals =====

    /// <summary>
    /// Receives interleaved floats from the pipeline; folds to mono and writes into ring buffer.
    /// </summary>
    private void OnSamples(float[] buffer, int offset, int samplesRead, int channels)
    {
        if (samplesRead <= 0 || channels <= 0) return;

        lock (_lock)
        {
            if (channels == 1)
            {
                // Mono fast path
                for (int i = 0; i < samplesRead; i++)
                {
                    _ring[_ringIndex] = buffer[offset + i];
                    _ringIndex = (_ringIndex + 1) & (N - 1);
                }
            }
            else
            {
                // Fold to mono: simple average across channels
                int frames = samplesRead / channels;
                int idx = offset;
                for (int f = 0; f < frames; f++)
                {
                    float sum = 0f;
                    for (int c = 0; c < channels; c++)
                    {
                        sum += buffer[idx++];
                    }
                    _ring[_ringIndex] = sum / channels;
                    _ringIndex = (_ringIndex + 1) & (N - 1);
                }
            }
        }
    }

    /// <summary>
    /// Iterative in-place radix-2 FFT on a Complex span (length must be power of two).
    /// </summary>
    private static void FftInPlace(Span<Complex> data)
    {
        int n = data.Length;

        // Bit-reversal permutation
        int j = 0;
        for (int i = 0; i < n; i++)
        {
            if (i < j)
            {
                (data[i], data[j]) = (data[j], data[i]);
            }
            int m = n >> 1;
            while (m >= 1 && j >= m)
            {
                j -= m;
                m >>= 1;
            }
            j += m;
        }

        // Danielsonâ€“Lanczos butterflies
        for (int len = 2; len <= n; len <<= 1)
        {
            double ang = -2.0 * Math.PI / len;
            Complex wLen = new(Math.Cos(ang), Math.Sin(ang));
            for (int i = 0; i < n; i += len)
            {
                Complex w = Complex.One;
                int half = len >> 1;
                for (int k = 0; k < half; k++)
                {
                    Complex u = data[i + k];
                    Complex v = data[i + k + half] * w;
                    data[i + k] = u + v;
                    data[i + k + half] = u - v;
                    w *= wLen;
                }
            }
        }
    }

    /// <summary>
    /// Sample-provider wrapper that taps interleaved float samples as they flow through.
    /// </summary>
    private sealed class TapSampleProvider : ISampleProvider
    {
        private readonly ISampleProvider _source;
        private readonly Action<float[], int, int, int> _onSamples;

        public TapSampleProvider(ISampleProvider source, Action<float[], int, int, int> onSamples)
        {
            _source = source;
            _onSamples = onSamples;
            WaveFormat = source.WaveFormat;
        }

        public WaveFormat WaveFormat { get; }

        public int Read(float[] buffer, int offset, int count)
        {
            int read = _source.Read(buffer, offset, count);
            if (read > 0)
            {
                _onSamples(buffer, offset, read, WaveFormat.Channels);
            }
            return read;
        }
    }
}


[PhoenixVisualizer.Audio\Class1.cs]
namespace PhoenixVisualizer.Audio;

public class Class1
{

}


[PhoenixVisualizer.Audio\PhoenixVisualizer.Audio.csproj]
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\PhoenixVisualizer.Core\PhoenixVisualizer.Core.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="ManagedBass" Version="3.1.1" />
    <PackageReference Include="ManagedBass.Fx" Version="3.1.1" />
    <PackageReference Include="NAudio" Version="2.2.1" />
  </ItemGroup>

</Project>


[PhoenixVisualizer.AvsEngine\Class1.cs]
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.AvsEngine;

public interface IAvsEngine
{
    void Initialize(int width, int height);
    void LoadPreset(string presetText);
    void Resize(int width, int height);
    void RenderFrame(AudioFeatures features, ISkiaCanvas canvas);
}

// Minimal Superscope-like evaluator (stub)
public sealed class AvsEngine : IAvsEngine
{
    private int _width;
    private int _height;
    private Preset _preset = Preset.CreateDefault();

    public void Initialize(int width, int height)
    {
        _width = width; _height = height;
    }

    public void LoadPreset(string presetText)
    {
        // Enhanced parser: supports tokens like "points=256;mode=line;source=fft;beat=true;energy=true"
        // NEW: Also supports real Winamp superscope code blocks
        try
        {
            var p = new Preset();

            // Check if this is a real Winamp superscope preset
            if (presetText.Contains("init:") || presetText.Contains("per_frame:") || presetText.Contains("per_point:"))
            {
                // Parse Winamp superscope format
                ParseWinampPreset(presetText, p);
            }
            else
            {
                // Parse simple format
                foreach (var seg in presetText.Split(';', StringSplitOptions.RemoveEmptyEntries))
                {
                    var kv = seg.Split('=', 2, StringSplitOptions.RemoveEmptyEntries);
                    if (kv.Length != 2) continue;
                    var key = kv[0].Trim().ToLowerInvariant();
                    var val = kv[1].Trim().ToLowerInvariant();
                    switch (key)
                    {
                        case "points":
                            if (int.TryParse(val, out var n)) p.Points = Math.Clamp(n, 16, 2048);
                            break;
                        case "mode":
                            p.Mode = val == "bars" ? RenderMode.Bars : RenderMode.Line;
                            break;
                        case "source":
                            p.Source = val == "sin" ? SourceMode.Sin : SourceMode.Fft;
                            break;
                        case "beat":
                            p.UseBeat = val == "true" || val == "1" || val == "yes";
                            break;
                        case "energy":
                            p.UseEnergy = val == "true" || val == "1" || val == "yes";
                            break;
                    }
                }
            }

            _preset = p;
        }
        catch { _preset = Preset.CreateDefault(); }
    }

    private void ParseWinampPreset(string presetText, Preset preset)
    {
        // Parse Winamp superscope format
        var lines = presetText.Split('\n', StringSplitOptions.RemoveEmptyEntries);

        foreach (var line in lines)
        {
            var trimmed = line.Trim();
            if (trimmed.StartsWith("init:"))
            {
                preset.InitCode = trimmed.Substring(5).Trim();
            }
            else if (trimmed.StartsWith("per_frame:"))
            {
                preset.PerFrameCode = trimmed.Substring(11).Trim();
            }
            else if (trimmed.StartsWith("per_point:"))
            {
                preset.PerPointCode = trimmed.Substring(10).Trim();
            }
            else if (trimmed.StartsWith("beat:"))
            {
                preset.BeatCode = trimmed.Substring(5).Trim();
            }
        }

        System.Diagnostics.Debug.WriteLine($"Parsed Winamp preset: init='{preset.InitCode}', per_frame='{preset.PerFrameCode}', per_point='{preset.PerPointCode}', beat='{preset.BeatCode}'");
    }

    public void Resize(int width, int height)
    {
        _width = width; _height = height;
    }

    public void RenderFrame(AudioFeatures features, ISkiaCanvas canvas)
    {
        // Debug: log that we're rendering
        System.Diagnostics.Debug.WriteLine($"AvsEngine.RenderFrame: width={_width}, height={_height}, points={_preset.Points}, mode={_preset.Mode}, source={_preset.Source}");

        canvas.Clear(0xFF000000);

        // Draw a simple superscope-like output based on preset
        int npts = Math.Min(_preset.Points, 1024);
        Span<(float x, float y)> pts = stackalloc (float x, float y)[npts];
        ReadOnlySpan<float> fft = features.Fft;

        System.Diagnostics.Debug.WriteLine($"FFT length: {fft.Length}");

        // Superscope variables (like Winamp AVS)
        float t = (float)features.TimeSeconds;
        float beat = features.Beat ? 1.0f : 0.0f;
        float energy = features.Energy;

        for (int i = 0; i < npts; i++)
        {
            // Superscope per-point variables
            float n = npts > 1 ? (float)i / (npts - 1) : 0f; // normalized position (0-1)
            float nx = n * 2.0f - 1.0f; // centered (-1 to 1)

            // Calculate x position
            float x = (nx + 1.0f) * 0.5f * (_width - 1);

            // Calculate y value based on source and effects
            float v = _preset.Source switch
            {
                SourceMode.Sin => (float)Math.Sin(t * 2 * Math.PI + nx * 4 * Math.PI),
                _ => fft.Length > 0 ? fft[(int)(n * (fft.Length - 1))] : 0f
            };

            // Apply effects
            if (_preset.UseBeat)
            {
                v *= 1.0f + beat * 0.5f; // Amplify on beat
            }

            if (_preset.UseEnergy)
            {
                v *= 0.5f + energy * 0.5f; // Scale with energy
            }

            // Calculate y position (center + offset)
            float y = _height * 0.5f - v * (_height * 0.4f);

            pts[i] = (x, y);
        }

        // Choose color based on mode and audio
        uint color = _preset.Mode switch
        {
            RenderMode.Bars => 0xFF44AAFF, // Blue bars
            RenderMode.Line => 0xFFFF8800, // Orange line
            _ => 0xFFFF8800
        };

        // Apply color effects
        if (_preset.UseBeat)
        {
            color = BlendColor(color, 0xFFFF0000, beat * 0.3f); // Red tint on beat
        }

        System.Diagnostics.Debug.WriteLine($"Drawing {npts} points with color {color:X8}");

        // Draw based on mode
        if (_preset.Mode == RenderMode.Bars)
        {
            // Draw individual bars
            for (int i = 0; i < npts; i++)
            {
                var (x, y) = pts[i];
                float barHeight = Math.Abs(y - _height * 0.5f);
                canvas.DrawLines(new[] { (x, _height * 0.5f), (x, y) }, 3.0f, color);
            }
        }
        else
        {
            // Draw connected line
            canvas.DrawLines(pts, 2.0f, color);
        }
    }

    private uint BlendColor(uint color1, uint color2, float ratio)
    {
        // Simple color blending
        uint r1 = (color1 >> 16) & 0xFF;
        uint g1 = (color1 >> 8) & 0xFF;
        uint b1 = color1 & 0xFF;

        uint r2 = (color2 >> 16) & 0xFF;
        uint g2 = (color2 >> 8) & 0xFF;
        uint b2 = color2 & 0xFF;

        uint r = (uint)(r1 * (1 - ratio) + r2 * ratio);
        uint g = (uint)(g1 * (1 - ratio) + g2 * ratio);
        uint b = (uint)(b1 * (1 - ratio) + b2 * ratio);

        return (r << 16) | (g << 8) | b;
    }
}

internal sealed class Preset
{
    public int Points { get; set; } = 256;
    public RenderMode Mode { get; set; } = RenderMode.Line;
    public SourceMode Source { get; set; } = SourceMode.Fft;
    public bool UseBeat { get; set; } = true;
    public bool UseEnergy { get; set; } = true;

    // NEW: Real Winamp superscope support
    public string InitCode { get; set; } = "";      // codehandle[3] - one-time setup
    public string PerFrameCode { get; set; } = "";  // codehandle[1] - per-frame setup
    public string PerPointCode { get; set; } = "";  // codehandle[0] - main superscope logic
    public string BeatCode { get; set; } = "";      // codehandle[2] - beat detection

    public static Preset CreateDefault() => new();
}

internal enum RenderMode { Line, Bars }
internal enum SourceMode { Fft, Sin }


[PhoenixVisualizer.AvsEngine\PhoenixVisualizer.AvsEngine.csproj]
<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <ProjectReference Include="..\PhoenixVisualizer.PluginHost\PhoenixVisualizer.PluginHost.csproj" />
  </ItemGroup>

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>


[PhoenixVisualizer.Core\Class1.cs]
namespace PhoenixVisualizer.Core;

public class Class1
{

}


[PhoenixVisualizer.Core\PhoenixVisualizer.Core.csproj]
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
  </ItemGroup>

</Project>


[PhoenixVisualizer.Editor\App.axaml]
<Application xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             x:Class="PhoenixVisualizer.Editor.App"
             xmlns:local="using:PhoenixVisualizer.Editor"
             RequestedThemeVariant="Default">
             <!-- "Default" ThemeVariant follows system theme variant. "Dark" or "Light" are other available options. -->

    <Application.DataTemplates>
        <local:ViewLocator/>
    </Application.DataTemplates>
  
    <Application.Styles>
        <FluentTheme />
    </Application.Styles>
</Application>

[PhoenixVisualizer.Editor\App.axaml.cs]
using Avalonia;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Data.Core;
using Avalonia.Data.Core.Plugins;
using System.Linq;
using Avalonia.Markup.Xaml;
using PhoenixVisualizer.Editor.ViewModels;
using PhoenixVisualizer.Editor.Views;

namespace PhoenixVisualizer.Editor;

public partial class App : Application
{
    public override void Initialize()
    {
        AvaloniaXamlLoader.Load(this);
    }

    public override void OnFrameworkInitializationCompleted()
    {
        if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
        {
            // Avoid duplicate validations from both Avalonia and the CommunityToolkit. 
            // More info: https://docs.avaloniaui.net/docs/guides/development-guides/data-validation#manage-validationplugins
            DisableAvaloniaDataAnnotationValidation();
            desktop.MainWindow = new MainWindow
            {
                DataContext = new MainWindowViewModel(),
            };
        }

        base.OnFrameworkInitializationCompleted();
    }

    private void DisableAvaloniaDataAnnotationValidation()
    {
        // Get an array of plugins to remove
        var dataValidationPluginsToRemove =
            BindingPlugins.DataValidators.OfType<DataAnnotationsValidationPlugin>().ToArray();

        // remove each entry found
        foreach (var plugin in dataValidationPluginsToRemove)
        {
            BindingPlugins.DataValidators.Remove(plugin);
        }
    }
}

[PhoenixVisualizer.Editor\PhoenixVisualizer.Editor.csproj]
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <BuiltInComInteropSupport>true</BuiltInComInteropSupport>
    <ApplicationManifest>app.manifest</ApplicationManifest>
    <AvaloniaUseCompiledBindingsByDefault>true</AvaloniaUseCompiledBindingsByDefault>
  </PropertyGroup>

  <ItemGroup>
    <Folder Include="Models\" />
    <AvaloniaResource Include="Assets\**" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Avalonia" Version="11.3.3" />
    <PackageReference Include="Avalonia.Desktop" Version="11.3.3" />
    <PackageReference Include="Avalonia.Themes.Fluent" Version="11.3.3" />
    <PackageReference Include="Avalonia.Fonts.Inter" Version="11.3.3" />
    <!--Condition below is needed to remove Avalonia.Diagnostics package from build output in Release configuration.-->
    <PackageReference Include="Avalonia.Diagnostics" Version="11.3.3">
      <IncludeAssets Condition="'$(Configuration)' != 'Debug'">None</IncludeAssets>
      <PrivateAssets Condition="'$(Configuration)' != 'Debug'">All</PrivateAssets>
    </PackageReference>
    <PackageReference Include="CommunityToolkit.Mvvm" Version="8.2.1" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\PhoenixVisualizer.PluginHost\PhoenixVisualizer.PluginHost.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.ApeHost\PhoenixVisualizer.ApeHost.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.AvsEngine\PhoenixVisualizer.AvsEngine.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.Plots\PhoenixVisualizer.Plots.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.Audio\PhoenixVisualizer.Audio.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.Plugins.Avs\PhoenixVisualizer.Plugins.Avs.csproj" />
  </ItemGroup>

</Project>


[PhoenixVisualizer.Editor\Program.cs]
using Avalonia;
using System;

namespace PhoenixVisualizer.Editor;

sealed class Program
{
    // Initialization code. Don't use any Avalonia, third-party APIs or any
    // SynchronizationContext-reliant code before AppMain is called: things aren't initialized
    // yet and stuff might break.
    [STAThread]
    public static void Main(string[] args) => BuildAvaloniaApp()
        .StartWithClassicDesktopLifetime(args);

    // Avalonia configuration, don't remove; also used by visual designer.
    public static AppBuilder BuildAvaloniaApp()
        => AppBuilder.Configure<App>()
            .UsePlatformDetect()
            .WithInterFont()
            .LogToTrace();
}


[PhoenixVisualizer.Editor\Rendering\CanvasAdapter.cs]
using System;
using Avalonia;
using Avalonia.Media;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Editor.Rendering;

public sealed class CanvasAdapter : ISkiaCanvas
{
    private readonly DrawingContext _context;
    private readonly double _width;
    private readonly double _height;

    public CanvasAdapter(DrawingContext context, double width, double height)
    {
        _context = context;
        _width = width;
        _height = height;
    }

    public void Clear(uint argb)
    {
        var color = Color.FromUInt32(argb);
        _context.FillRectangle(new SolidColorBrush(color), new Rect(0, 0, _width, _height));
    }

    public void DrawLines(ReadOnlySpan<(float x, float y)> points, float thickness, uint argb)
    {
        if (points.Length < 2) return;
        var geometry = new StreamGeometry();
        using (var ctx = geometry.Open())
        {
            ctx.BeginFigure(new Point(points[0].x, points[0].y), false);
            for (int i = 1; i < points.Length; i++)
            {
                ctx.LineTo(new Point(points[i].x, points[i].y));
            }
            ctx.EndFigure(false);
        }
        var pen = new Pen(new SolidColorBrush(Color.FromUInt32(argb)), thickness);
        _context.DrawGeometry(null, pen, geometry);
    }

    public void FillCircle(float cx, float cy, float radius, uint argb)
    {
        var brush = new SolidColorBrush(Color.FromUInt32(argb));
        _context.DrawEllipse(brush, null, new Point(cx, cy), radius, radius);
    }
}


[PhoenixVisualizer.Editor\Rendering\RenderSurface.cs]
using System;
using System.Threading;
using Avalonia;
using Avalonia.Controls;
using Avalonia.Media;
using Avalonia.Threading;
using PhoenixVisualizer.Audio;
using PhoenixVisualizer.PluginHost;
using PhoenixVisualizer.Plugins.Avs;

namespace PhoenixVisualizer.Editor.Rendering;

public sealed class RenderSurface : Control
{
    private readonly AudioService _audio;
    private IVisualizerPlugin? _plugin = new AvsVisualizerPlugin();
    private Timer? _timer;

    // FFT smoothing
    private readonly float[] _smoothFft = new float[2048];
    private bool _fftInit;

    // Simple beat/BPM estimation
    private float _prevEnergy;
    private DateTime _lastBeat = DateTime.MinValue;
    private double _bpm;

    // Resize tracking
    private int _lastWidth;
    private int _lastHeight;

    public RenderSurface()
    {
        _audio = new AudioService();
    }

    public void SetPlugin(IVisualizerPlugin plugin)
    {
        _plugin?.Dispose();
        _plugin = plugin;
        System.Diagnostics.Debug.WriteLine($"[RenderSurface] SetPlugin: {plugin.DisplayName} ({plugin.Id})");
        if (Bounds.Width > 0 && Bounds.Height > 0)
        {
            _plugin.Initialize((int)Bounds.Width, (int)Bounds.Height);
        }
    }

    protected override void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e)
    {
        base.OnAttachedToVisualTree(e);
        _plugin?.Initialize((int)Bounds.Width, (int)Bounds.Height);
        _audio.Initialize();
        _timer = new Timer(_ => Dispatcher.UIThread.Post(InvalidateVisual, DispatcherPriority.Render), null, 0, 16);
    }

    protected override void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e)
    {
        _timer?.Dispose();
        _timer = null;
        _plugin?.Dispose();
        _audio.Dispose();
        base.OnDetachedFromVisualTree(e);
    }

    public bool Open(string path) => _audio.Open(path);
    public void Play() => _audio.Play();
    public void Pause() => _audio.Pause();
    public void Stop() => _audio.Stop();

    public override void Render(DrawingContext context)
    {
        var adapter = new CanvasAdapter(context, Bounds.Width, Bounds.Height);

        // Handle dynamic resize
        int w = (int)Bounds.Width;
        int h = (int)Bounds.Height;
        if (w != _lastWidth || h != _lastHeight)
        {
            _lastWidth = w;
            _lastHeight = h;
            _plugin?.Resize(w, h);
        }

        // Audio data
        var fft = _audio.ReadFft();
        var wave = _audio.ReadWaveform();
        double pos = _audio.GetPositionSeconds();
        double total = _audio.GetLengthSeconds();

        // Smooth FFT
        if (!_fftInit)
        {
            Array.Copy(fft, _smoothFft, Math.Min(fft.Length, _smoothFft.Length));
            _fftInit = true;
        }
        else
        {
            int n = Math.Min(fft.Length, _smoothFft.Length);
            const float alpha = 0.2f;
            for (int i = 0; i < n; i++)
            {
                _smoothFft[i] = _smoothFft[i] + alpha * (fft[i] - _smoothFft[i]);
            }
        }

        // Feature extraction
        int len = _smoothFft.Length;
        float energy = 0f;
        float volumeSum = 0f;
        float peak = 0f;
        float bass = 0f, mid = 0f, treble = 0f;
        int bassEnd = len / 3;
        int midEnd = 2 * len / 3;

        for (int i = 0; i < len; i++)
        {
            float v = MathF.Abs(_smoothFft[i]);
            volumeSum += v;
            energy += v * v;
            if (v > peak) peak = v;
            if (i < bassEnd) bass += v;
            else if (i < midEnd) mid += v;
            else treble += v;
        }

        float volume = volumeSum / len;
        float rms = MathF.Sqrt(energy / len);

        // crude beat detection via energy jump
        bool beat = false;
        var now = DateTime.UtcNow;
        if (energy > _prevEnergy * 1.5f && energy > 1e-6f)
        {
            beat = true;
            if (_lastBeat != DateTime.MinValue)
            {
                _bpm = 60.0 / (now - _lastBeat).TotalSeconds;
            }
            _lastBeat = now;
        }
        _prevEnergy = _prevEnergy * 0.9f + energy * 0.1f;

        var features = new AudioFeatures(
            pos,       // time seconds
            _bpm,      // bpm estimate
            beat,      // beat flag
            volume,    // average magnitude
            rms,       // rms
            peak,      // peak
            energy,    // energy
            _smoothFft,// fft
            wave,      // waveform
            bass,      // bass band
            mid,       // mid band
            treble,    // treble band
            null,
            null
        );

        try
        {
            _plugin?.RenderFrame(features, adapter);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Plugin render failed: {ex}");
        }
    }
}


[PhoenixVisualizer.Editor\ViewLocator.cs]
using System;
using Avalonia.Controls;
using Avalonia.Controls.Templates;
using PhoenixVisualizer.Editor.ViewModels;

namespace PhoenixVisualizer.Editor;

public class ViewLocator : IDataTemplate
{

    public Control? Build(object? param)
    {
        if (param is null)
            return null;

        var name = param.GetType().FullName!.Replace("ViewModel", "View", StringComparison.Ordinal);
        var type = Type.GetType(name);

        if (type != null)
        {
            return (Control)Activator.CreateInstance(type)!;
        }

        return new TextBlock { Text = "Not Found: " + name };
    }

    public bool Match(object? data)
    {
        return data is ViewModelBase;
    }
}


[PhoenixVisualizer.Editor\ViewModels\MainWindowViewModel.cs]
namespace PhoenixVisualizer.Editor.ViewModels;

public partial class MainWindowViewModel : ViewModelBase
{
    public string Greeting { get; } = "Welcome to Avalonia!";
}


[PhoenixVisualizer.Editor\ViewModels\ViewModelBase.cs]
using CommunityToolkit.Mvvm.ComponentModel;

namespace PhoenixVisualizer.Editor.ViewModels;

public class ViewModelBase : ObservableObject
{
}


[PhoenixVisualizer.Editor\Views\MainWindow.axaml]
<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="using:PhoenixVisualizer.Editor.ViewModels"
        xmlns:r="using:PhoenixVisualizer.Editor.Rendering"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="PhoenixVisualizer.Editor.Views.MainWindow"
        x:DataType="vm:MainWindowViewModel"
        Icon="/Assets/avalonia-logo.ico"
        Title="PhoenixVisualizer.Editor">

    <Design.DataContext>
        <!-- This only sets the DataContext for the previewer in an IDE,
             to set the actual DataContext for runtime, set the DataContext property in code (look at App.axaml.cs) -->
        <vm:MainWindowViewModel/>
    </Design.DataContext>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="250" MinWidth="200"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="300" MinWidth="250"/>
        </Grid.ColumnDefinitions>
        
        <!-- Left Panel: Preset Browser -->
        <Border Grid.Column="0" BorderBrush="Gray" BorderThickness="0,0,1,0" Padding="10">
            <StackPanel>
                <TextBlock Text="Preset Browser" FontSize="16" FontWeight="Bold" Margin="0,0,0,10"/>
                <TextBox Name="PresetInput" Text="points=256;mode=line;source=fft" Margin="0,0,0,10"/>
                <Button Content="Load Preset" HorizontalAlignment="Stretch" Margin="0,0,0,10" Click="OnLoadPreset"/>
                <Button Content="Save Preset" HorizontalAlignment="Stretch" Margin="0,0,0,10"/>
                <Separator Margin="0,10"/>
                <TextBlock Text="Recent Presets" FontSize="14" FontWeight="Bold" Margin="0,0,0,10"/>
                <ListBox Name="RecentPresets" Height="200">
                    <ListBoxItem Content="points=256;mode=line;source=fft"/>
                    <ListBoxItem Content="points=128;mode=bars;source=fft"/>
                    <ListBoxItem Content="points=512;mode=line;source=sin"/>
                </ListBox>
            </StackPanel>
        </Border>
        
        <!-- Center: Visualization Canvas -->
        <Border Grid.Column="1" BorderBrush="Gray" BorderThickness="1" Margin="5">
            <r:RenderSurface x:Name="RenderHost"/>
        </Border>
        
        <!-- Right Panel: Properties -->
        <Border Grid.Column="2" BorderBrush="Gray" BorderThickness="1,0,0,0" Padding="10">
            <StackPanel>
                <TextBlock Text="Properties" FontSize="16" FontWeight="Bold" Margin="0,0,0,10"/>
                
                <TextBlock Text="Points" FontWeight="Bold" Margin="0,10,0,5"/>
                <Slider Name="PointsSlider" Minimum="16" Maximum="1024" Value="256" TickFrequency="64" IsSnapToTickEnabled="True"/>
                <TextBlock Text="{Binding ElementName=PointsSlider, Path=Value, StringFormat='{}{0:F0}'}" HorizontalAlignment="Center"/>
                
                <TextBlock Text="Mode" FontWeight="Bold" Margin="0,10,0,5"/>
                <ComboBox Name="ModeCombo" SelectedIndex="0">
                    <ComboBoxItem Content="Line"/>
                    <ComboBoxItem Content="Bars"/>
                </ComboBox>
                
                <TextBlock Text="Source" FontWeight="Bold" Margin="0,10,0,5"/>
                <ComboBox Name="SourceCombo" SelectedIndex="0">
                    <ComboBoxItem Content="FFT"/>
                    <ComboBoxItem Content="Sine"/>
                </ComboBox>
                
                <Separator Margin="0,20"/>
                <TextBlock Text="Audio Controls" FontSize="14" FontWeight="Bold" Margin="0,0,0,10"/>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                    <Button Content="â–¶" Width="40" Height="30" Margin="2"/>
                    <Button Content="â¸" Width="40" Height="30" Margin="2"/>
                    <Button Content="â¹" Width="40" Height="30" Margin="2"/>
                </StackPanel>
            </StackPanel>
        </Border>
    </Grid>

</Window>


[PhoenixVisualizer.Editor\Views\MainWindow.axaml.cs]
using Avalonia.Controls;
using Avalonia.Interactivity;
using PhoenixVisualizer.PluginHost;
using PhoenixVisualizer.Plugins.Avs;
using PhoenixVisualizer.Editor.Rendering;

namespace PhoenixVisualizer.Editor.Views;

public partial class MainWindow : Window
{
    private RenderSurface? RenderSurfaceControl => this.FindControl<RenderSurface>("RenderHost");

    public MainWindow()
    {
        InitializeComponent();
        // spin up a default AVS plugin so the canvas isn't blank
        RenderSurfaceControl?.SetPlugin(new AvsVisualizerPlugin());
    }

    private void OnLoadPreset(object? sender, RoutedEventArgs e)
    {
        var tb = this.FindControl<TextBox>("PresetInput");
        if (tb is null || RenderSurfaceControl is null) return;

        var plug = PluginRegistry.Create("vis_avs") as IAvsHostPlugin ?? new AvsVisualizerPlugin();
        RenderSurfaceControl.SetPlugin(plug);
        plug.LoadPreset(tb.Text ?? string.Empty);
    }
}

[PhoenixVisualizer.Plots\Class1.cs]
using System;
using System.Collections.Generic;

namespace PhoenixVisualizer.Plots;

// Core plotting primitives for audio visualization
public sealed class LineSeries
{
    public float[] X { get; set; } = Array.Empty<float>();
    public float[] Y { get; set; } = Array.Empty<float>();
    public uint Color { get; set; } = 0xFFFF8800; // Orange
    public float Thickness { get; set; } = 2.0f;
}

public sealed class ScatterPlot
{
    public float[] X { get; set; } = Array.Empty<float>();
    public float[] Y { get; set; } = Array.Empty<float>();
    public uint Color { get; set; } = 0xFF44AAFF; // Blue
    public float PointSize { get; set; } = 4.0f;
}

public sealed class BarChart
{
    public float[] Values { get; set; } = Array.Empty<float>();
    public uint Color { get; set; } = 0xFF44AAFF; // Blue
    public float BarWidth { get; set; } = 2.0f;
    public float Spacing { get; set; } = 1.0f;
}

public sealed class PolarPlot
{
    public float[] Radii { get; set; } = Array.Empty<float>();
    public float[] Thetas { get; set; } = Array.Empty<float>();
    public uint Color { get; set; } = 0xFF44AAFF; // Blue
    public float Thickness { get; set; } = 2.0f;
}

// NEW: Matplotlib-inspired advanced plot types
public sealed class Heatmap
{
    public float[][] Data { get; set; } = Array.Empty<float[]>();
    public uint[] Colors { get; set; } = Array.Empty<uint>();
    public int Width { get; set; } = 0;
    public int Height { get; set; } = 0;
}

public sealed class SurfacePlot
{
    public float[] Data { get; set; } = Array.Empty<float>();
    public uint BaseColor { get; set; } = 0xFF44AAFF; // Blue
    public float HeightScale { get; set; } = 2.0f;
    public bool Wireframe { get; set; } = false;
}

// Audio-specific visualization helpers
public static class AudioPlots
{
    // Generate spectrum bars from FFT data
    public static BarChart CreateSpectrumBars(float[] fft, uint color = 0xFF44AAFF)
    {
        return new BarChart
        {
            Values = fft,
            Color = color,
            BarWidth = 2.0f,
            Spacing = 1.0f
        };
    }

    // Generate oscilloscope line from FFT data
    public static LineSeries CreateOscilloscope(float[] fft, uint color = 0xFFFF8800)
    {
        var x = new float[fft.Length];
        var y = new float[fft.Length];

        for (int i = 0; i < fft.Length; i++)
        {
            x[i] = (float)i / (fft.Length - 1);
            y[i] = fft[i];
        }

        return new LineSeries { X = x, Y = y, Color = color };
    }

    // Generate polar wheel from FFT data
    public static PolarPlot CreatePolarWheel(float[] fft, uint color = 0xFF44AAFF)
    {
        var radii = new float[fft.Length];
        var thetas = new float[fft.Length];

        for (int i = 0; i < fft.Length; i++)
        {
            thetas[i] = (float)i / fft.Length * 2 * (float)Math.PI;
            radii[i] = fft[i] * 0.5f + 0.5f; // Scale and offset
        }

        return new PolarPlot { Radii = radii, Thetas = thetas, Color = color };
    }

    // NEW: Matplotlib-inspired advanced plots

    // Generate waterfall/spectrogram from FFT data over time
    public static Heatmap CreateSpectrogram(float[][] fftHistory, uint[]? colors = null)
    {
        var defaultColors = new uint[] { 0xFF000000, 0xFF0000FF, 0xFF00FFFF, 0xFF00FF00, 0xFFFFFF00, 0xFFFF0000 };
        var finalColors = colors ?? defaultColors;

        return new Heatmap
        {
            Data = fftHistory,
            Colors = finalColors,
            Width = fftHistory.Length > 0 ? fftHistory[0].Length : 0,
            Height = fftHistory.Length
        };
    }

    // Generate 3D-like surface plot (simulated with height mapping)
    public static SurfacePlot CreateSurfacePlot(float[] fft, uint baseColor = 0xFF44AAFF)
    {
        return new SurfacePlot
        {
            Data = fft,
            BaseColor = baseColor,
            HeightScale = 2.0f,
            Wireframe = true
        };
    }

    // Generate animated scatter plot with beat detection
    public static ScatterPlot CreateBeatScatter(float[] fft, bool[] beats, uint beatColor = 0xFFFF0000)
    {
        var x = new float[fft.Length];
        var y = new float[fft.Length];

        for (int i = 0; i < fft.Length; i++)
        {
            x[i] = (float)i / (fft.Length - 1);
            y[i] = fft[i];
        }

        return new ScatterPlot { X = x, Y = y, Color = beatColor, PointSize = 4.0f };
    }
}


[PhoenixVisualizer.Plots\Colormaps.cs]
using System;
using System.Collections.Generic;

namespace PhoenixVisualizer.Plots;

/// <summary>
/// Handy-dandy color palettes ðŸŽ¨ for plots and visualizers.
/// Includes Matplotlib-esque ramps and a couple genre-based presets.
/// </summary>
public static class Colormaps
{
    // Stop values encoded as ARGB hex (alpha=FF for opaque)
    private static readonly uint[] ViridisStops =
    [
        0xFF440154, // purple
        0xFF472C7A, // indigo
        0xFF3B528B, // blue
        0xFF21908C, // teal
        0xFF5EC962, // green
        0xFFFDE725  // yellow
    ];

    private static readonly uint[] PlasmaStops =
    [
        0xFF0D0887, // deep purple
        0xFF6A00A8, // violet
        0xFFCB4679, // magenta
        0xFFF89441, // orange
        0xFFF0F921  // yellow
    ];

    private static readonly uint[] MagmaStops =
    [
        0xFF000004, // black
        0xFF3B0F70, // indigo
        0xFF8C2981, // purple
        0xFFDE4968, // pink
        0xFFF66E5B, // orange
        0xFFFEE08B  // yellow
    ];

    private static readonly uint[] InfernoStops =
    [
        0xFF000004, // black
        0xFF320A5A, // indigo
        0xFF7F1D4E, // maroon
        0xFFBA3655, // crimson
        0xFFF1711F, // orange
        0xFFFEE51A  // yellow
    ];

    // Genre â†’ palette mapping (just for fun ðŸŽ¶)
    private static readonly Dictionary<string, uint[]> GenrePalettes = new(StringComparer.OrdinalIgnoreCase)
    {
        ["rock"] = InfernoStops,
        ["metal"] = InfernoStops,
        ["trance"] = PlasmaStops,
        ["edm"] = PlasmaStops,
        ["jazz"] = ViridisStops,
        ["classical"] = MagmaStops,
    };

    /// <summary>Sample Viridis at position t âˆˆ [0,1].</summary>
    public static uint Viridis(float t) => Sample(ViridisStops, t);

    /// <summary>Sample Plasma at position t âˆˆ [0,1].</summary>
    public static uint Plasma(float t) => Sample(PlasmaStops, t);

    /// <summary>Sample Magma at position t âˆˆ [0,1].</summary>
    public static uint Magma(float t) => Sample(MagmaStops, t);

    /// <summary>Sample Inferno at position t âˆˆ [0,1].</summary>
    public static uint Inferno(float t) => Sample(InfernoStops, t);

    /// <summary>Grab a palette by genre name (fallback to Viridis).</summary>
    public static uint Genre(string genre, float t)
        => Sample(GenrePalettes.TryGetValue(genre, out var stops) ? stops : ViridisStops, t);

    private static uint Sample(uint[] stops, float t)
    {
        if (stops.Length == 0) return 0xFF000000;
        t = Math.Clamp(t, 0f, 1f);
        float scaled = t * (stops.Length - 1);
        int i = (int)scaled;
        if (i >= stops.Length - 1) return stops[^1];
        float frac = scaled - i;
        uint a = stops[i];
        uint b = stops[i + 1];
        return LerpArgb(a, b, frac);
    }

    private static uint LerpArgb(uint a, uint b, float t)
    {
        byte ar = (byte)((a >> 16) & 0xFF), ag = (byte)((a >> 8) & 0xFF), ab = (byte)(a & 0xFF);
        byte br = (byte)((b >> 16) & 0xFF), bg = (byte)((b >> 8) & 0xFF), bb = (byte)(b & 0xFF);
        byte rr = (byte)(ar + (br - ar) * t);
        byte gg = (byte)(ag + (bg - ag) * t);
        byte bb2 = (byte)(ab + (bb - ab) * t);
        return 0xFF000000u | ((uint)rr << 16) | ((uint)gg << 8) | bb2;
    }
}


[PhoenixVisualizer.Plots\PhoenixVisualizer.Plots.csproj]
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>


[PhoenixVisualizer.PluginHost\Contracts.cs]
namespace PhoenixVisualizer.PluginHost;

public record AudioFeatures(
    double TimeSeconds,
    double Bpm,
    bool Beat,
    float Volume,
    float Rms,
    float Peak,
    float Energy,
    float[] Fft,
    float[] Waveform,           // <-- new in PR
    float Bass,
    float Mid,
    float Treble,
    string? Genre,
    uint? SuggestedColorArgb
);

public interface IVisualizerPlugin
{
    string Id { get; }
    string DisplayName { get; }

    void Initialize(int width, int height);
    void Resize(int width, int height);
    void RenderFrame(AudioFeatures features, ISkiaCanvas canvas);
    void Dispose();
}

public interface IApeEffect : IVisualizerPlugin { }

public interface IAvsHostPlugin : IVisualizerPlugin
{
    void LoadPreset(string presetText);
}

public interface ISkiaCanvas
{
    void Clear(uint argb);
    void DrawLines(ReadOnlySpan<(float x, float y)> points, float thickness, uint argb);
    void FillCircle(float cx, float cy, float radius, uint argb);
}


[PhoenixVisualizer.PluginHost\PhoenixVisualizer.PluginHost.csproj]
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>


[PhoenixVisualizer.PluginHost\PluginRegistry.cs]
using System;
using System.Collections.Generic;
using System.Linq;

namespace PhoenixVisualizer.PluginHost;

/// <summary>
/// Simple runtime registry to discover and create visualizer plugins.
/// </summary>
public static class PluginRegistry
{
    private static readonly Dictionary<string, (string displayName, Func<IVisualizerPlugin> factory)> _plugins = new();

    public static void Register(string id, string displayName, Func<IVisualizerPlugin> factory)
    {
        _plugins[id] = (displayName, factory);
    }

    public static IVisualizerPlugin? Create(string id)
        => _plugins.TryGetValue(id, out var entry) ? entry.factory() : null;

    public static IEnumerable<(string id, string displayName)> Available
        => _plugins.Select(kvp => (kvp.Key, kvp.Value.displayName));
}


[PhoenixVisualizer.Plugins.Ape.Phoenix\Class1.cs]
using System;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Plugins.Ape.Phoenix;

// Phoenix visualizer as an APE-style plugin
public sealed class PhoenixPlugin : IVisualizerPlugin
{
	public string Id => "phoenix";
	public string DisplayName => "Phoenix Visualizer";
	
	private int _width;
	private int _height;
	private float _time;
	private float _lastBpm;
	private bool _isActive;
	
	// Phoenix state
	private float _phoenixX;
	private float _phoenixY;
	private float _phoenixScale = 1.0f;
	private uint _phoenixColor = 0xFFFF8800; // Orange base
	private float _flameIntensity = 0.5f;
	
	public void Initialize(int width, int height)
	{
		_width = width;
		_height = height;
		_phoenixX = width * 0.5f;
		_phoenixY = height * 0.5f;
		_isActive = true;
	}
	
	public void Resize(int width, int height)
	{
		_width = width;
		_height = height;
		_phoenixX = width * 0.5f;
		_phoenixY = height * 0.5f;
	}
	
	public void RenderFrame(AudioFeatures features, ISkiaCanvas canvas)
	{
		if (!_isActive) return;
		
		_time = (float)features.TimeSeconds;
		
		// Update Phoenix based on audio
		UpdatePhoenix(features);
		
		// Clear canvas
		canvas.Clear(0xFF000000);
		
		// Draw Phoenix
		DrawPhoenix(canvas);
	}
	
	private void UpdatePhoenix(AudioFeatures features)
	{
		// BPM affects animation speed
		if (features.Bpm > 0)
		{
			_lastBpm = (float)features.Bpm;
			_phoenixScale = 0.8f + (float)((features.Bpm / 200.0f) * 0.4f); // Scale with BPM
		}
		
		// Energy affects flame intensity
		_flameIntensity = Math.Min(1.0f, features.Energy * 2.0f);
		
		// Beat detection for "burst" effect
		if (features.Beat)
		{
			_phoenixScale *= 1.2f; // Quick scale up on beat
		}
		
		// Frequency bands affect color
		UpdatePhoenixColor(features);
		
		// Gentle movement
		_phoenixX = _width * 0.5f + (float)(Math.Sin(_time * 0.5) * 50);
		_phoenixY = _height * 0.5f + (float)(Math.Cos(_time * 0.3) * 30);
	}
	
	private void UpdatePhoenixColor(AudioFeatures features)
	{
		// Base color from genre or fallback to frequency mapping
		if (!string.IsNullOrEmpty(features.Genre))
		{
			_phoenixColor = GetGenreColor(features.Genre);
		}
		else
		{
			// Frequency-based color mapping
			float bass = features.Bass;
			float mid = features.Mid;
			float treble = features.Treble;
			
			// Mix RGB based on frequency bands
			uint r = (uint)(bass * 255);
			uint g = (uint)(mid * 255);
			uint b = (uint)(treble * 255);
			
			_phoenixColor = (r << 16) | (g << 8) | b;
		}
	}
	
	private uint GetGenreColor(string genre)
	{
		return genre.ToLowerInvariant() switch
		{
			"blues" or "jazz" => 0xFF0000FF,      // Blue
			"bluegrass" => 0xFF00AAFF,             // Light blue
			"classical" => 0xFFFFFF00,             // Gold
			"metal" => 0xFF800080,                 // Purple
			"electronic" or "trance" => 0xFFFF00FF, // Pink
			"hip hop" or "rap" => 0xFF00FF00,      // Green
			"pop" => 0xFFFF8800,                   // Orange
			_ => 0xFFFF8800                        // Default orange
		};
	}
	
	private void DrawPhoenix(ISkiaCanvas canvas)
	{
		// Simple Phoenix representation (circle with flame effect)
		float size = 50.0f * _phoenixScale;
		
		// Draw main body
		canvas.FillCircle(_phoenixX, _phoenixY, size, _phoenixColor);
		
		// Draw flame effect based on energy
		if (_flameIntensity > 0.1f)
		{
			uint flameColor = BlendColors(_phoenixColor, 0xFFFF0000, _flameIntensity);
			canvas.FillCircle(_phoenixX, _phoenixY - size * 0.8f, size * 0.6f * _flameIntensity, flameColor);
		}
		
		// Draw wings (simple lines)
		uint wingColor = BlendColors(_phoenixColor, 0xFFFFFFFF, 0.3f);
		float wingLength = size * 1.2f;
		
		// Left wing
		canvas.DrawLines(new[] { (_phoenixX, _phoenixY), (_phoenixX - wingLength, _phoenixY - size * 0.5f) }, 3.0f, wingColor);
		// Right wing
		canvas.DrawLines(new[] { (_phoenixX, _phoenixY), (_phoenixX + wingLength, _phoenixY - size * 0.5f) }, 3.0f, wingColor);
	}
	
	private uint BlendColors(uint color1, uint color2, float ratio)
	{
		// Simple color blending
		uint r1 = (color1 >> 16) & 0xFF;
		uint g1 = (color1 >> 8) & 0xFF;
		uint b1 = color1 & 0xFF;
		
		uint r2 = (color2 >> 16) & 0xFF;
		uint g2 = (color2 >> 8) & 0xFF;
		uint b2 = color2 & 0xFF;
		
		uint r = (uint)(r1 * (1 - ratio) + r2 * ratio);
		uint g = (uint)(g1 * (1 - ratio) + g2 * ratio);
		uint b = (uint)(b1 * (1 - ratio) + b2 * ratio);
		
		return (r << 16) | (g << 8) | b;
	}
	
	public void LoadPreset(string preset)
	{
		// Phoenix plugin doesn't use text presets like AVS
		// But could load color schemes or animation styles
	}
	
	public void Dispose()
	{
		_isActive = false;
	}
}


[PhoenixVisualizer.Plugins.Ape.Phoenix\PhoenixVisualizer.Plugins.Ape.Phoenix.csproj]
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\PhoenixVisualizer.PluginHost\PhoenixVisualizer.PluginHost.csproj" />
  </ItemGroup>

</Project>


[PhoenixVisualizer.Plugins.Avs\AvsVisualizerPlugin.cs]
using System;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Plugins.Avs;

public sealed class AvsVisualizerPlugin : IAvsHostPlugin
{
    public string Id => "vis_avs";
    public string DisplayName => "AVS Runtime";

    private int _w, _h;

    // Mini-preset state
    private int _points = 512;
    private Mode _mode = Mode.Line;
    private Source _source = Source.Fft;

    public void Initialize(int width, int height) { _w = width; _h = height; }
    public void Resize(int width, int height)     { _w = width; _h = height; }
    public void Dispose() { }

    public void LoadPreset(string presetText)
    {
        // default values
        _points = 512; _mode = Mode.Line; _source = Source.Fft;
        if (string.IsNullOrWhiteSpace(presetText)) return;
        var parts = presetText.Split(new[] { ';', '\n', '\r', ',' }, StringSplitOptions.RemoveEmptyEntries);
        foreach (var raw in parts)
        {
            var kv = raw.Split('=', 2, StringSplitOptions.TrimEntries);
            if (kv.Length != 2) continue;
            var key = kv[0].Trim().ToLowerInvariant();
            var val = kv[1].Trim().ToLowerInvariant();
            switch (key)
            {
                case "points":
                    if (int.TryParse(val, out var p) && p > 1) _points = Math.Clamp(p, 2, 4096);
                    break;
                case "mode":
                    _mode = val switch { "bars" => Mode.Bars, "line" => Mode.Line, _ => _mode };
                    break;
                case "source":
                    _source = val switch { "fft" => Source.Fft, "wave" => Source.Wave, "sin" => Source.Sin, _ => _source };
                    break;
            }
        }
        System.Diagnostics.Debug.WriteLine($"[vis_avs] Loaded mini preset: points={_points} mode={_mode} source={_source}");
    }

    public void RenderFrame(AudioFeatures f, ISkiaCanvas canvas)
    {
        // solid background so we actually see something
        canvas.Clear(0xFF101010);

        switch (_mode)
        {
            case Mode.Line:
                RenderLine(f, canvas);
                break;
            case Mode.Bars:
                RenderBars(f, canvas);
                break;
        }
    }

    private void RenderLine(AudioFeatures f, ISkiaCanvas canvas)
    {
        if (_points < 2) return;
        Span<(float x, float y)> pts = _points <= 8192
            ? stackalloc (float x, float y)[_points]
            : new (float x, float y)[_points];

        for (int i = 0; i < _points; i++)
        {
            float t = (float)i / (_points - 1);
            float x = t * _w;
            float y = (float)(_h * 0.5);

            float v = SampleSource(f, t, i);
            // scale: center at mid-height, +/- 40% height
            y -= v * (float)(_h * 0.4);

            pts[i] = (x, y);
        }

        canvas.DrawLines(pts, 2f, 0xFF40C4FF);
    }

    private void RenderBars(AudioFeatures f, ISkiaCanvas canvas)
    {
        // If FFT isn't present yet, fall back to sine so we always see something
        int n = Math.Min(_points, Math.Max(2, f.Fft?.Length ?? 0));
        if (n < 2 && _source != Source.Sin) { _source = Source.Sin; n = _points; }

        float barW = Math.Max(1f, (float)_w / n);
        Span<(float x, float y)> seg = stackalloc (float, float)[2];
        for (int i = 0; i < n; i++)
        {
            float t = (float)i / Math.Max(1, n - 1);
            float v = SampleSource(f, t, i);
            v = MathF.Min(1f, MathF.Max(0f, v));

            float h = v * (_h - 10);
            float x = i * barW;

            seg[0] = (x + barW * 0.5f, _h - 5);
            seg[1] = (x + barW * 0.5f, _h - 5 - h);
            canvas.DrawLines(seg, Math.Max(1f, barW * 0.6f), 0xFFFFA000);
        }
    }

    private float SampleSource(AudioFeatures f, float t, int i)
    {
        switch (_source)
        {
            case Source.Fft:
                if (f.Fft is { Length: > 0 })
                {
                    int idx = (int)(t * (f.Fft.Length - 1));
                    float mag = MathF.Abs(f.Fft[idx]);
                    // soft log scale
                    return MathF.Min(1f, (float)Math.Log(1 + 6 * mag));
                }
                break;
            case Source.Wave:
                if (f.Waveform is { Length: > 0 })
                {
                    int idx = (int)(t * (f.Waveform.Length - 1));
                    return 0.5f + 0.5f * f.Waveform[idx];
                }
                break;
            case Source.Sin:
                // Time-based sine so you see motion even with no audio
                float phase = (float)(f.TimeSeconds * 2.0 * Math.PI * 0.5); // 0.5 Hz
                return 0.5f + 0.5f * MathF.Sin(phase + t * MathF.Tau);
        }
        return 0f;
    }

    private enum Mode { Line, Bars }
    private enum Source { Fft, Wave, Sin }
}


[PhoenixVisualizer.Plugins.Avs\PhoenixVisualizer.Plugins.Avs.csproj]
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\PhoenixVisualizer.PluginHost\PhoenixVisualizer.PluginHost.csproj" />
  </ItemGroup>

</Project>


[PhoenixVisualizer.Visuals\BarsVisualizer.cs]
using System;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Visuals;

public sealed class BarsVisualizer : IVisualizerPlugin
{
    public string Id => "bars";
    public string DisplayName => "Simple Bars";

    private int _w, _h;

    public void Initialize(int width, int height) { _w = width; _h = height; }
    public void Resize(int width, int height)     { _w = width; _h = height; }

    public void RenderFrame(AudioFeatures f, ISkiaCanvas canvas)
    {
        canvas.Clear(0xFF101010); // opaque background

        if (f.Fft is null || f.Fft.Length == 0) return;

        int n = Math.Min(64, f.Fft.Length);
        float barW = Math.Max(1f, (float)_w / n);
        Span<(float x, float y)> seg = stackalloc (float, float)[2];

        for (int i = 0; i < n; i++)
        {
            // log-ish scale + clamp
            float v = f.Fft[i];
            float mag = MathF.Min(1f, (float)Math.Log(1 + 8 * Math.Max(0, v)));
            float h = mag * (_h - 10);

            float x = i * barW;
            seg[0] = (x + barW * 0.5f, _h - 5);
            seg[1] = (x + barW * 0.5f, _h - 5 - h);
            canvas.DrawLines(seg, Math.Max(1f, barW * 0.6f), 0xFF40C4FF);
        }
    }

    public void Dispose() { }
}


[PhoenixVisualizer.Visuals\EnergyVisualizer.cs]
using System;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Visuals;

// Ring visualizer that swells with audio energy ðŸŽµ
public sealed class EnergyVisualizer : IVisualizerPlugin
{
    public string Id => "energy";
    public string DisplayName => "Energy Ring";

    private int _width;
    private int _height;

    public void Initialize(int width, int height)
    {
        _width = width;
        _height = height;
    }

    public void Resize(int width, int height)
    {
        _width = width;
        _height = height;
    }

    public void RenderFrame(AudioFeatures features, ISkiaCanvas canvas)
    {
        // Keep the background dark so the glow pops âœ¨
        canvas.Clear(0xFF000000);

        float size = Math.Min(_width, _height) * 0.4f;
        // Energy can be tiny, so give it a little boost and clamp
        float norm = Math.Clamp(features.Rms * 10f, 0f, 1f);
        float radius = size * norm;
        uint color = features.Beat ? 0xFFFFFF00 : 0xFF00FFFF;
        canvas.FillCircle(_width / 2f, _height / 2f, radius, color);
    }

    public void Dispose()
    {
        // Nothing to clean up here ðŸ˜Š
    }
}


[PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj]
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\PhoenixVisualizer.Core\PhoenixVisualizer.Core.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.PluginHost\PhoenixVisualizer.PluginHost.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="SkiaSharp" Version="2.88.8" />
  </ItemGroup>

</Project>


[PhoenixVisualizer.Visuals\PulseVisualizer.cs]
using System;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Visuals;

// Pulsing circle visualizer driven by energy ðŸš¨
public sealed class PulseVisualizer : IVisualizerPlugin
{
    public string Id => "pulse";
    public string DisplayName => "Pulse Circle";

    private int _width;
    private int _height;

    public void Initialize(int width, int height) => Resize(width, height);

    public void Resize(int width, int height)
    {
        _width = width;
        _height = height;
    }

    public void RenderFrame(AudioFeatures features, ISkiaCanvas canvas)
    {
        canvas.Clear(0xFF000000);
        float size = Math.Min(_width, _height);
        float baseRadius = size * 0.15f;

        // Energy can spike way above 1, so cap it to keep the circle on screen ðŸš«ðŸŽ¯
        float energy = MathF.Min(1f, features.Energy);
        float radius = baseRadius + energy * size * 0.35f;

        uint color = features.Beat ? 0xFFFFFFFFu : 0xFFFFAA00u;
        canvas.FillCircle(_width / 2f, _height / 2f, radius, color);
    }

    public void Dispose() { }
}



[PhoenixVisualizer.Visuals\SanityVisualizer.cs]
using System;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Visuals;

/// <summary>
/// A tiny plugin that draws a bouncing line based on time so you can
/// confirm the render pipeline even when no audio is playing. ðŸŽ§
/// </summary>
public sealed class SanityVisualizer : IVisualizerPlugin
{
    public string Id => "sanity";
    public string DisplayName => "Sanity Check";

    private int _w;
    private int _h;

    public void Initialize(int width, int height) => (_w, _h) = (width, height);
    public void Resize(int width, int height) => (_w, _h) = (width, height);

    public void RenderFrame(AudioFeatures f, ISkiaCanvas canvas)
    {
        // Solid background so the line stands out
        canvas.Clear(0xFF000000);

        // Bounce a vertical line left/right based on TimeSeconds
        float phase = (float)(f.TimeSeconds % 2.0);     // 0..2
        float t = phase <= 1f ? phase : 2f - phase;     // ping-pong
        float x = t * _w;

        Span<(float x, float y)> seg = stackalloc (float, float)[2]
        {
            (x, 0),
            (x, _h)
        };
        canvas.DrawLines(seg, 3f, 0xFF40C4FF);
    }

    public void Dispose() { }
}



[PhoenixVisualizer.Visuals\SpectrumVisualizer.cs]
using System;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Visuals;

// Smooth spectrum bars splashed with rainbow colors ðŸŒˆ
public sealed class SpectrumVisualizer : IVisualizerPlugin
{
    public string Id => "spectrum";
    public string DisplayName => "Spectrum Bars";

    private int _width;
    private int _height;

    public void Initialize(int width, int height) => Resize(width, height);
    public void Resize(int width, int height)
    {
        _width = width;
        _height = height;
    }

    public void RenderFrame(AudioFeatures features, ISkiaCanvas canvas)
    {
        canvas.Clear(0xFF000000);
        var fft = features.Fft;
        int bins = 64; // keep it light ðŸ’¡
        int len = fft.Length;
        int step = Math.Max(1, len / bins);
        float barWidth = _width / (float)bins;
        float maxHeight = _height * 0.9f;
        for (int i = 0; i < bins; i++)
        {
            int start = i * step;
            int end = Math.Min(start + step, len);
            float sum = 0f;
            for (int j = start; j < end; j++) sum += MathF.Abs(fft[j]);
            float avg = sum / (end - start);
            float height = Math.Clamp(avg * 10f, 0f, 1f) * maxHeight;
            float x = i * barWidth + barWidth / 2f;
            var points = new (float x, float y)[] { (x, _height), (x, _height - height) };
            uint color = HsvToArgb((1f - i / (float)(bins - 1)) * 270f, 1f, 1f);
            canvas.DrawLines(points, barWidth * 0.8f, color);
        }
    }

    public void Dispose() { }

    // Tiny HSVâ†’ARGB helper ðŸŽ¨
    private static uint HsvToArgb(float h, float s, float v)
    {
        float c = v * s;
        float x = c * (1 - MathF.Abs((h / 60f % 2) - 1));
        float m = v - c;
        float r, g, b;
        if (h < 60) { r = c; g = x; b = 0; }
        else if (h < 120) { r = x; g = c; b = 0; }
        else if (h < 180) { r = 0; g = c; b = x; }
        else if (h < 240) { r = 0; g = x; b = c; }
        else if (h < 300) { r = x; g = 0; b = c; }
        else { r = c; g = 0; b = x; }
        byte R = (byte)Math.Clamp((r + m) * 255f, 0, 255);
        byte G = (byte)Math.Clamp((g + m) * 255f, 0, 255);
        byte B = (byte)Math.Clamp((b + m) * 255f, 0, 255);
        return 0xFF000000u | ((uint)R << 16) | ((uint)G << 8) | B;
    }
}


[PhoenixVisualizer.Visuals\WaveformVisualizer.cs]
using System;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Visuals;

// Time-domain waveform visualizer ðŸ©µ
public sealed class WaveformVisualizer : IVisualizerPlugin
{
    public string Id => "waveform";
    public string DisplayName => "Waveform";

    private int _width;
    private int _height;

    public void Initialize(int width, int height) => Resize(width, height);
    public void Resize(int width, int height)
    {
        _width = width;
        _height = height;
    }

    public void RenderFrame(AudioFeatures features, ISkiaCanvas canvas)
    {
        canvas.Clear(0xFF000000);
        var wave = features.Waveform;
        if (wave.Length < 2) return;
        int len = wave.Length;
        Span<(float x, float y)> pts = stackalloc (float x, float y)[len];
        for (int i = 0; i < len; i++)
        {
            float nx = len > 1 ? (float)i / (len - 1) : 0f;
            float x = nx * (_width - 1);
            float y = (float)(_height * 0.5 - wave[i] * (_height * 0.4));
            pts[i] = (x, y);
        }
        canvas.DrawLines(pts, 1.5f, 0xFF00FF00);
    }

    public void Dispose() { }
}


[README.md]
# Phoenix Visualizer

Cross-platform Avalonia visualizer studio with an AVS-compatible runtime at its core. The first flagship visual is a Phoenix plugin, but the app is designed to host many visualizers (AVS-style presets, APE-style effects, and managed plugins). Each track gets one primary vibe (genre-driven), nuanced by BPM, energy, and frequency bands. Includes a real-world frequency-to-visible-color fallback when genre is missing.

## Features (MVP)

- Music playback: Open file, Play/Pause, Stop, Seek, Volume (MP3 first)
- Real-time analysis: FFT (1024/2048), BPM detection, energy/peaks
- Genre detection: Primary ID3 tag, fallback via spectrum color mapping
- Phoenix visualizer: One vibe per track; animation and effects respond to audio
- Spectrum visualizer: Real-time bars/curve, color-coded to frequencyâ†’visible light
- Screensaver mode: Future (leaving out of MVP)

## Color and Vibe Logic

- One primary vibe per track (keeps the experience focused and code simple)
- Genre â†’ base palette and animation style (examples):
  - Blues/Jazz: deep blues; smooth, flowing
  - Bluegrass: sky/light blue; lively, bouncy
  - Classical: gold/yellow; elegant, graceful
  - Metal: purple/deep red; sharp, aggressive
  - Love/Trance: pink/gold; gentle, spiraling
  - Hip hop/Rap: silver/green; rippling, rhythmic
  - Pop: orange/bright yellow; peppy, energetic
  - Electronic: neon; strobing, fast
- Frequency bands influence details within the vibe:
  - Bass (20â€“250 Hz) â†’ body glow/flame intensity
  - Mid (250â€“2000 Hz) â†’ aura/eyes
  - Treble (2â€“20 kHz) â†’ feather tips/tail sparkles

### Spectrum-to-Color Fallback (real-world mapping)

If genre is unavailable/ambiguous, compute a weighted color from the spectrum using approximate frequencyâ†’visible color mapping:

- 20â€“250 Hz â†’ reds/oranges
- 250â€“2000 Hz â†’ yellows/greens
- 2000â€“20000 Hz â†’ blues/violets

This mapping also colors the spectrum visualizer so users can â€œsee the music.â€

## Project Structure

- `PhoenixVisualizer.App` â€” Avalonia UI host app
- `PhoenixVisualizer.Core` â€” config, models, genre/vibe mapping, utilities
- `PhoenixVisualizer.Audio` â€” playback + analysis (ManagedBass/BPM/FFT)
- `PhoenixVisualizer.Visuals` â€” legacy direct-render visuals (if needed)
- `PhoenixVisualizer.PluginHost` â€” shared plugin interfaces and `AudioFeatures`
- `PhoenixVisualizer.ApeHost` â€” managed APE-style host interfaces/stubs
- `PhoenixVisualizer.AvsEngine` â€” AVS runtime (Superscope-first), Skia renderer
- `PhoenixVisualizer.Plugins.Avs` â€” vis_AVS plugin that wraps the AVS engine
- `PhoenixVisualizer.Plugins.Ape.Phoenix` â€” Phoenix visual as an APE-style plugin
- `PhoenixVisualizer.Plots` â€” Matplotlib-inspired plotting primitives (for scopes, wheels, spectrograms)
- `PhoenixVisualizer.Editor` â€” Avalonia-based visualization editor UI
- `libs_etc/WAMPSDK` â€” Winamp SDK materials (future AVS compatibility)
- `Directory.Build.props` â€” sets `WinampSdkDir` relative to this folder

## Tech Stack

- .NET 8, Avalonia 11
- NAudio for playback and audio processing
- SkiaSharp for custom 2D drawing
- Newtonsoft.Json for config (Core)

## Build

```
dotnet build
```

## Run

```
dotnet run --project PhoenixVisualizer.App
```

## Prerequisites

**None required** - The app uses NAudio which has full .NET 8 support and no external dependencies.

## Near-term Roadmap

- UI (Host): Replace welcome screen with transport controls + info + spectrum panel
- Audio: Wire playback; expose FFT/BPM/energy to engine
- AVS Engine: Superscope subset (per-frame/point vars, math, conds) + Skia renderer
- vis_AVS plugin: host AVS presets via the engine
- Plugins API: finalize `IVisualizerPlugin` and `AudioFeatures`
- Editor: initial layout (preset browser, canvas, properties), load/run AVS preset
- Phoenix plugin: scaffold (reads features; minimal draw stub)

## Notes

- Windows dev confirmed with .NET SDK 8.x
- All project assets and SDK materials live under `PhoenixVisualizer/`
- Docs index: `PhoenixVisualizer/docs/INDEX.md`




[TODO.md]
# TODO

High-level plan: AVS-first runtime, Phoenix as APE plugin, MatPlot-inspired plots, Editor.

## Phase 0 â€“ Contracts and Docs
- Finalize AudioFeatures and IVisualizerPlugin interfaces
- Document plugin families: APE-like and AVS host plugin
- Update README (done)

## Phase 1 â€“ Core AVS and Host Wiring
- Engine: Superscope subset (per-frame/per-point vars, math, conditionals)
- Audio feed: expose FFT (1024/2048), BPM, energy, beat
- Renderer: Skia lines/points, clear/fade stub
- vis_AVS plugin: wrap engine and drive frames from host
- App: Basic transport UI + spectrum panel (no screensaver)

**Current Status**: âš ï¸ **PARTIAL** - Infrastructure working, but visualization not rendering

**Known Issues**:
- âŒ **Visualization not appearing** - Black screen despite FFT data and render calls
- ðŸ” **Need to audit visualization pipeline** from `AvsEngine.RenderFrame` â†’ `CanvasAdapter` â†’ screen

**Recent Fixes**:
- âœ… **Audio safety** - Play/Pause/Stop now check for loaded audio file
- âœ… **UI feedback** - Settings button shows message, Play button shows status
- âœ… **Stop vs Pause** - Stop now resets to beginning and clears audio buffers; Pause just pauses
- âœ… **Settings Window** - Proper modal dialog with plugin selection, audio settings, display options
- âœ… **Winamp AVS Integration** - Real superscope preset parsing (init:, per_frame:, per_point:, beat:)
- âœ… **Interface contracts** - LoadPreset method properly defined in IAvsHostPlugin
- âœ… **Code cleanup** - Removed old "Welcome to Avalonia" ViewModel code
- âœ… **Proper AVS architecture** - Preset loading follows Winamp SDK pattern
- âœ… **Settings crash fixed** - Added proper ViewModel and DataContext binding
- âœ… **Settings window rebuilt** - Manual control creation to avoid Avalonia code generation issues
- âœ… **Debug logging added** - Enhanced render pipeline debugging for visualization troubleshooting

**New Features**:
- âœ… **Settings Button** - Winamp-style settings access (plugin selection coming soon)
- âœ… **Default Plugin Loading** - AVS Engine loads on startup (configurable later)

## Phase 2 â€“ Editor + Plots
- [x] ~~Editor UI: preset browser, canvas viewport, properties panel~~
- [x] ~~Plots lib: LineSeries, Polar/Wheel, Bar/Stem~~
 - [x] Colormaps: viridis/plasma/magma/inferno + genre palettes
- [ ] Designer nodes: sources (FFT/BPM), transforms (scale/polar), styles (colormap/stroke), compose (overlay)

**Current Status**: âœ… **COMPLETE** - Basic editor UI and plotting primitives working

## Phase 3 â€“ Phoenix Plugin (APE)
- [x] ~~Phoenix plugin scaffold: reads AudioFeatures; minimal draw stub~~
- [x] ~~Color/vibe mapping (genre primary; spectrum fallback)~~
- [x] ~~States: idle/active/cocoon/burst (hooks: beat/quiet/drop)~~

**Current Status**: âœ… **COMPLETE** - Phoenix plugin fully implemented with audio-reactive animation

## Phase 4 â€“ Compatibility & Effects
- [x] ~~AVS: add fade/blur/color ops commonly used by presets~~
- [x] ~~Real Winamp superscope preset parsing (init:, per_frame:, per_point:, beat:)~~
- [ ] APE host: managed APE interface; optional native bridge later
- [x] Preset import: loader for common text-based presets
- [ ] NS-EEL expression evaluator for superscope math

**Current Status**: ðŸš§ **IN PROGRESS** - AVS engine enhanced with real Winamp preset parsing and beat/energy effects

## Nice-to-haves
- Settings: idle timeout, spectrum smoothing window
- TagLib#: ID3 metadata for genre (fallback spectrum mapping)
- Prune OpenTK deps; lean on Skia/Avalonia

## Known Bugs
- **Stop/Pause behavior**: Both controls currently pause (NAudio limitation - can't reset CurrentTime)
- **Visualization pipeline**: Need to audit render chain from engine to screen

## Tracking
- Warnings: NU1701 (OpenTK/Skia.Views) â€” review and prune
- Windows dev target: .NET 8 SDK confirmed





[PhoenixVisualizer.ApeHost\Class1.cs]
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.ApeHost;

public interface IApeHost
{
	void Register(IApeEffect effect);
}

public sealed class ApeHost : IApeHost
{
	public void Register(IApeEffect effect) { /* registry to be implemented */ }
}


[PhoenixVisualizer.ApeHost\PhoenixVisualizer.ApeHost.csproj]
<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <ProjectReference Include="..\PhoenixVisualizer.PluginHost\PhoenixVisualizer.PluginHost.csproj" />
  </ItemGroup>

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>


[PhoenixVisualizer.App\App.axaml]
<Application xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             x:Class="PhoenixVisualizer.App"
             xmlns:local="using:PhoenixVisualizer"
             RequestedThemeVariant="Default">
             <!-- "Default" ThemeVariant follows system theme variant. "Dark" or "Light" are other available options. -->

    <Application.DataTemplates>
        <local:ViewLocator/>
    </Application.DataTemplates>
  
    <Application.Styles>
        <FluentTheme />
    </Application.Styles>
</Application>

[PhoenixVisualizer.App\App.axaml.cs]
// PhoenixVisualizer/PhoenixVisualizer.App/App.axaml.cs
using System.Linq;
using Avalonia;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Data.Core;
using Avalonia.Data.Core.Plugins;
using Avalonia.Markup.Xaml;
using PhoenixVisualizer.PluginHost;
using PhoenixVisualizer.Plugins.Avs;
using PhoenixVisualizer.ViewModels;
using PhoenixVisualizer.Views;
using PhoenixVisualizer.Visuals;

namespace PhoenixVisualizer;

public partial class App : Application
{
    public override void Initialize()
    {
        // Runtime XAML load (works even if the XAML generator isn't running)
        AvaloniaXamlLoader.Load(this);
    }

    public override void OnFrameworkInitializationCompleted()
    {
        if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
        {
            // --- Register bundled visualizer plugins BEFORE creating MainWindow ---
            // If any of these classes aren't present in this branch, comment that line out.
            PluginRegistry.Register("bars", "Simple Bars", () => new BarsVisualizer());
            PluginRegistry.Register("spectrum", "Spectrum Bars", () => new SpectrumVisualizer());
            PluginRegistry.Register("waveform", "Waveform", () => new WaveformVisualizer());
            PluginRegistry.Register("pulse", "Pulse Circle", () => new PulseVisualizer());
            PluginRegistry.Register("energy", "Energy Ring", () => new EnergyVisualizer());
            PluginRegistry.Register("sanity", "Sanity Check", () => new SanityVisualizer());
            PluginRegistry.Register("vis_avs", "AVS Runtime", () => new AvsVisualizerPlugin());

            // Avoid duplicate validations from Avalonia + CommunityToolkit
            DisableAvaloniaDataAnnotationValidation();

            // Boot main window
            desktop.MainWindow = new MainWindow();
        }

        base.OnFrameworkInitializationCompleted();
    }

    private void DisableAvaloniaDataAnnotationValidation()
    {
        var toRemove = BindingPlugins.DataValidators
            .OfType<DataAnnotationsValidationPlugin>()
            .ToArray();

        foreach (var plugin in toRemove)
            BindingPlugins.DataValidators.Remove(plugin);
    }
}


[PhoenixVisualizer.App\PhoenixVisualizer.csproj]
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <BuiltInComInteropSupport>true</BuiltInComInteropSupport>
    <ApplicationManifest>app.manifest</ApplicationManifest>
    <AvaloniaUseCompiledBindingsByDefault>true</AvaloniaUseCompiledBindingsByDefault>
  </PropertyGroup>

  <ItemGroup>
    <Folder Include="Models\" />
    <AvaloniaResource Include="Assets\**" />
  </ItemGroup>

  <!-- Copy BASS native libraries to output directory -->
  <ItemGroup>
    <Content Include="..\libs\bass.dll" CopyToOutputDirectory="PreserveNewest" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\PhoenixVisualizer.Core\PhoenixVisualizer.Core.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.Audio\PhoenixVisualizer.Audio.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.PluginHost\PhoenixVisualizer.PluginHost.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.ApeHost\PhoenixVisualizer.ApeHost.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.AvsEngine\PhoenixVisualizer.AvsEngine.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.Plots\PhoenixVisualizer.Plots.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.Plugins.Avs\PhoenixVisualizer.Plugins.Avs.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.Plugins.Ape.Phoenix\PhoenixVisualizer.Plugins.Ape.Phoenix.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.Editor\PhoenixVisualizer.Editor.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Avalonia" Version="11.3.3" />
    <PackageReference Include="Avalonia.Desktop" Version="11.3.3" />
    <PackageReference Include="Avalonia.Themes.Fluent" Version="11.3.3" />
    <PackageReference Include="Avalonia.Fonts.Inter" Version="11.3.3" />
    <!--Condition below is needed to remove Avalonia.Diagnostics package from build output in Release configuration.-->
    <PackageReference Include="Avalonia.Diagnostics" Version="11.3.3">
      <IncludeAssets Condition="'$(Configuration)' != 'Debug'">None</IncludeAssets>
      <PrivateAssets Condition="'$(Configuration)' != 'Debug'">All</PrivateAssets>
    </PackageReference>
    <PackageReference Include="CommunityToolkit.Mvvm" Version="8.2.1" />
  </ItemGroup>
</Project>


[PhoenixVisualizer.App\Presets.cs]
using System;
using System.Collections.Generic;
using System.IO;
using PhoenixVisualizer.PluginHost;
using PhoenixVisualizer.Plugins.Avs;
using PhoenixVisualizer.Rendering;

namespace PhoenixVisualizer;

// ðŸŽšï¸ Minimal preset manager â€“ cycles through presets in the "Presets" folder
public static class Presets
{
    private static readonly List<string> _presetTexts = new();
    private static readonly Random _rng = new();
    private static int _index = -1;
    private static RenderSurface? _surface;

    public static void Initialize(RenderSurface? surface)
    {
        _surface = surface;
        _presetTexts.Clear();
        _index = -1;

        var dir = Path.Combine(AppContext.BaseDirectory, "Presets");
        if (!Directory.Exists(dir)) return;

        foreach (var file in Directory.GetFiles(dir, "*.avs"))
        {
            try
            {
                _presetTexts.Add(File.ReadAllText(file));
            }
            catch { /* ignore bad files */ }
        }

        if (_presetTexts.Count > 0)
            _index = 0;
    }

    public static void GoPrev()
    {
        if (_presetTexts.Count == 0 || _surface is null) return;
        _index = (_index - 1 + _presetTexts.Count) % _presetTexts.Count;
        ApplyCurrent();
    }

    public static void GoNext()
    {
        if (_presetTexts.Count == 0 || _surface is null) return;
        _index = (_index + 1) % _presetTexts.Count;
        ApplyCurrent();
    }

    public static void GoRandom()
    {
        if (_presetTexts.Count == 0 || _surface is null) return;
        _index = _rng.Next(_presetTexts.Count);
        ApplyCurrent();
    }

    private static void ApplyCurrent()
    {
        if (_surface is null || _index < 0 || _index >= _presetTexts.Count) return;
        var plug = PluginRegistry.Create("vis_avs") as IAvsHostPlugin;
        if (plug is null) return;
        _surface.SetPlugin(plug);
        plug.LoadPreset(_presetTexts[_index]);
    }
}



[PhoenixVisualizer.App\Program.cs]
using Avalonia;
using System;

namespace PhoenixVisualizer;

sealed class Program
{
    // Initialization code. Don't use any Avalonia, third-party APIs or any
    // SynchronizationContext-reliant code before AppMain is called: things aren't initialized
    // yet and stuff might break.
    [STAThread]
    public static void Main(string[] args) => BuildAvaloniaApp()
        .StartWithClassicDesktopLifetime(args);

    // Avalonia configuration, don't remove; also used by visual designer.
    public static AppBuilder BuildAvaloniaApp()
        => AppBuilder.Configure<App>()
            .UsePlatformDetect()
            .WithInterFont()
            .LogToTrace();
}


[PhoenixVisualizer.App\Rendering\CanvasAdapter.cs]
using System;
using Avalonia;
using Avalonia.Media;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Rendering;

public sealed class CanvasAdapter : ISkiaCanvas
{
        private readonly DrawingContext _context;
        private readonly double _width;
        private readonly double _height;

        // ðŸ¤ blending hint for visuals
        public float FrameBlend { get; set; }

	public CanvasAdapter(DrawingContext context, double width, double height)
	{
		_context = context;
		_width = width;
		_height = height;
	}

	public void Clear(uint argb)
	{
		var color = Color.FromUInt32(argb);
		_context.FillRectangle(new SolidColorBrush(color), new Rect(0, 0, _width, _height));
	}

	public void DrawLines(ReadOnlySpan<(float x, float y)> points, float thickness, uint argb)
	{
		if (points.Length < 2) return;
		var geometry = new StreamGeometry();
		using (var ctx = geometry.Open())
		{
			ctx.BeginFigure(new Avalonia.Point(points[0].x, points[0].y), false);
			for (int i = 1; i < points.Length; i++)
			{
				ctx.LineTo(new Avalonia.Point(points[i].x, points[i].y));
			}
			ctx.EndFigure(false);
		}
		var pen = new Pen(new SolidColorBrush(Color.FromUInt32(argb)), thickness);
		_context.DrawGeometry(null, pen, geometry);
	}

	public void FillCircle(float cx, float cy, float radius, uint argb)
	{
		var brush = new SolidColorBrush(Color.FromUInt32(argb));
		_context.DrawEllipse(brush, null, new Avalonia.Point(cx, cy), radius, radius);
	}
}




[PhoenixVisualizer.App\Rendering\RenderSurface.cs]
using System;
using System.Threading;
using Avalonia;
using Avalonia.Controls;
using Avalonia.Media;
using Avalonia.Threading;
using PhoenixVisualizer.Audio;
using PhoenixVisualizer.PluginHost;
using PhoenixVisualizer.Plugins.Avs;
using PhoenixVisualizer.Core.Config;
using PhoenixVisualizer.Core.Presets;
using PhoenixVisualizer; // preset manager

namespace PhoenixVisualizer.Rendering;

public sealed class RenderSurface : Control
{
    private readonly AudioService _audio;
    private IVisualizerPlugin? _plugin = new AvsVisualizerPlugin(); // keep a sensible default
    private Timer? _timer;

    // FFT smoothing
    private readonly float[] _smoothFft = new float[2048];
    private bool _fftInit;

    // FPS
    private DateTime _fpsWindowStart = DateTime.UtcNow;
    private int _framesInWindow;

    // Simple beat/BPM estimation
    private float _prevEnergy;
    private DateTime _lastBeat = DateTime.MinValue;
    private double _bpm;

    // random preset scheduler
    private readonly PresetScheduler _presetScheduler = new();

    // Resize tracking
    private int _lastWidth;
    private int _lastHeight;

    // Events
    public event Action<double>? FpsChanged;
    public event Action<double>? BpmChanged;
    public event Action<double, double>? PositionChanged;

    public RenderSurface()
    {
        _audio = new AudioService();
    }

    public void SetPlugin(IVisualizerPlugin plugin)
    {
        _plugin?.Dispose();
        _plugin = plugin;
        System.Diagnostics.Debug.WriteLine($"[RenderSurface] SetPlugin: {plugin.DisplayName} ({plugin.Id})");
        if (Bounds.Width > 0 && Bounds.Height > 0)
        {
            _plugin.Initialize((int)Bounds.Width, (int)Bounds.Height);
        }
    }

    protected override void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e)
    {
        base.OnAttachedToVisualTree(e);
        _plugin?.Initialize((int)Bounds.Width, (int)Bounds.Height);
        _audio.Initialize();
        _timer = new Timer(_ => Dispatcher.UIThread.Post(InvalidateVisual, DispatcherPriority.Render), null, 0, 16);
    }

    protected override void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e)
    {
        _timer?.Dispose();
        _timer = null;
        _plugin?.Dispose();
        _audio.Dispose();
        base.OnDetachedFromVisualTree(e);
    }

    public bool Open(string path) 
    {
        System.Diagnostics.Debug.WriteLine($"[RenderSurface] Opening audio file: {path}");
        var result = _audio.Open(path);
        System.Diagnostics.Debug.WriteLine($"[RenderSurface] Open result: {result}, Status: {_audio.GetStatus()}");
        return result;
    }
    
    public bool Play() 
    {
        System.Diagnostics.Debug.WriteLine($"[RenderSurface] Play requested, Status: {_audio.GetStatus()}");
        var result = _audio.Play();
        if (!result)
        {
            System.Diagnostics.Debug.WriteLine("[RenderSurface] Play failed - no audio file loaded or other error");
        }
        return result;
    }
    
    public void Pause() 
    {
        System.Diagnostics.Debug.WriteLine($"[RenderSurface] Pause requested, Status: {_audio.GetStatus()}");
        _audio.Pause();
    }
    
    public void Stop() 
    {
        System.Diagnostics.Debug.WriteLine($"[RenderSurface] Stop requested, Status: {_audio.GetStatus()}");
        _audio.Stop();
    }

    public AudioService? GetAudioService() => _audio;

    public override void Render(DrawingContext context)
    {
        var adapter = new CanvasAdapter(context, Bounds.Width, Bounds.Height);

        // Handle dynamic resize for plugins that support it
        int w = (int)Bounds.Width;
        int h = (int)Bounds.Height;
        if (w != _lastWidth || h != _lastHeight)
        {
            _lastWidth = w;
            _lastHeight = h;
            _plugin?.Resize(w, h);
        }

        // Audio data
        var fft = _audio.ReadFft();
        var wave = _audio.ReadWaveform();
        double pos = _audio.GetPositionSeconds();
        double total = _audio.GetLengthSeconds();

        // Smooth FFT (EMA)
        if (!_fftInit)
        {
            Array.Copy(fft, _smoothFft, Math.Min(fft.Length, _smoothFft.Length));
            _fftInit = true;
        }
        else
        {
            int n = Math.Min(fft.Length, _smoothFft.Length);
            const float sAlpha = 0.2f;
            for (int i = 0; i < n; i++)
            {
                _smoothFft[i] = _smoothFft[i] + sAlpha * (fft[i] - _smoothFft[i]);
            }
        }

        // Load settings each frame (cheap JSON)
        var vz = VisualizerSettings.Load();

        // 1) Input gain
        float gain = MathF.Pow(10f, vz.InputGainDb / 20f);
        for (int i = 0; i < _smoothFft.Length; i++) _smoothFft[i] *= gain;
        for (int i = 0; i < wave.Length; i++) wave[i] = Math.Clamp(wave[i] * gain, -1f, 1f);

        // 2) Noise gate
        float gateLin = MathF.Pow(10f, vz.NoiseGateDb / 20f);
        for (int i = 0; i < _smoothFft.Length; i++)
            if (_smoothFft[i] < gateLin) _smoothFft[i] = 0f;

        // 3) Spectral scaling
        if (vz.SpectrumScale == SpectrumScale.Sqrt)
        {
            for (int i = 0; i < _smoothFft.Length; i++) _smoothFft[i] = MathF.Sqrt(_smoothFft[i]);
        }
        else if (vz.SpectrumScale == SpectrumScale.Log)
        {
            const float eps = 1e-12f;
            for (int i = 0; i < _smoothFft.Length; i++)
                _smoothFft[i] = MathF.Log10(_smoothFft[i] + eps) * 0.5f + 1f;
        }

        // 4) Floor/Ceiling clamp
        float floorLin = MathF.Pow(10f, vz.FloorDb / 20f);
        float ceilingLin = MathF.Pow(10f, vz.CeilingDb / 20f);
        for (int i = 0; i < _smoothFft.Length; i++)
            _smoothFft[i] = Math.Clamp(_smoothFft[i], floorLin, ceilingLin);

        // Feature extraction
        int len = _smoothFft.Length;
        float energy = 0f;
        float volumeSum = 0f;
        float peak = 0f;
        float bass = 0f, mid = 0f, treble = 0f;
        int bassEnd = len / 3;
        int midEnd = 2 * len / 3;

        for (int i = 0; i < len; i++)
        {
            float v = MathF.Abs(_smoothFft[i]);
            volumeSum += v;
            energy += v * v;
            if (v > peak) peak = v;
            if (i < bassEnd) bass += v;
            else if (i < midEnd) mid += v;
            else treble += v;
        }

        float volume = volumeSum / len;
        float rms = MathF.Sqrt(energy / len);

        // 5) Auto gain control
        if (vz.AutoGain)
        {
            float err = vz.TargetRms - rms;
            float agc = 1f + err * 0.5f;
            agc = Math.Clamp(agc, 0.85f, 1.15f);
            for (int i = 0; i < _smoothFft.Length; i++) _smoothFft[i] *= agc;
            for (int i = 0; i < wave.Length; i++) wave[i] *= agc;
            volume *= agc;
            rms *= agc;
            energy *= agc * agc;
        }

        // 6) Beat detection with user sensitivity + cooldown
        bool beat = false;
        var now = DateTime.UtcNow;
        double mult = Math.Max(1.05, vz.BeatSensitivityOrDefault());
        if (energy > _prevEnergy * mult && energy > 1e-8)
        {
            if ((now - _lastBeat).TotalMilliseconds > Math.Max(0, vz.BeatCooldownMs))
            {
                beat = true;
                if (_lastBeat != DateTime.MinValue)
                {
                    _bpm = 60.0 / (now - _lastBeat).TotalSeconds;
                    Dispatcher.UIThread.Post(() => BpmChanged?.Invoke(_bpm), DispatcherPriority.Background);
                }
                _lastBeat = now;
            }
        }
        float alpha = TimeDeltaToAlpha(vz.SmoothingMs);
        _prevEnergy = _prevEnergy * (1 - alpha) + energy * alpha;

        // 7) Optional frame blending
        adapter.FrameBlend = Math.Clamp(vz.FrameBlend, 0f, 1f);

        // Use playback position as t (preferred for visual sync)
        double t = pos;

        var features = new PhoenixVisualizer.PluginHost.AudioFeatures(
            t,
            _bpm,
            beat,
            volume,
            rms,
            peak,
            energy,
            _smoothFft,
            wave,
            bass,
            mid,
            treble,
            null,
            null
        );

        // Random preset switching via scheduler
        if (_presetScheduler.ShouldSwitch(features, vz))
        {
            Presets.GoRandom();
            _presetScheduler.NotifySwitched();
        }

        try
        {
            _plugin?.RenderFrame(features, adapter);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Plugin render failed: {ex}");
        }

        // push position to UI listeners
        Dispatcher.UIThread.Post(() => PositionChanged?.Invoke(pos, total), DispatcherPriority.Background);

        // FPS tracking
        _framesInWindow++;
        var span = now - _fpsWindowStart;
        if (span.TotalSeconds >= 1)
        {
            double fps = _framesInWindow / span.TotalSeconds;
            _framesInWindow = 0;
            _fpsWindowStart = now;
            Dispatcher.UIThread.Post(() => FpsChanged?.Invoke(fps), DispatcherPriority.Background);
        }
    }

    private static float TimeDeltaToAlpha(float smoothingMs)
    {
        if (smoothingMs <= 0) return 1f;
        float dt = 1f / 60f; // ~60 FPS
        float tau = smoothingMs / 1000f;
        return Math.Clamp(dt / (tau + dt), 0.01f, 1f);
    }
}

[PhoenixVisualizer.App\ViewLocator.cs]
using System;
using Avalonia.Controls;
using Avalonia.Controls.Templates;
using PhoenixVisualizer.ViewModels;

namespace PhoenixVisualizer;

public class ViewLocator : IDataTemplate
{

    public Control? Build(object? param)
    {
        if (param is null)
            return null;
        
        var name = param.GetType().FullName!.Replace("ViewModel", "View", StringComparison.Ordinal);
        var type = Type.GetType(name);

        if (type != null)
        {
            return (Control)Activator.CreateInstance(type)!;
        }
        
        return new TextBlock { Text = "Not Found: " + name };
    }

    public bool Match(object? data)
    {
        return data is ViewModelBase;
    }
}


[PhoenixVisualizer.App\ViewModels\MainWindowViewModel.cs]
namespace PhoenixVisualizer.ViewModels;

public partial class MainWindowViewModel : ViewModelBase
{
    // Clean slate - no more "Welcome to Avalonia" greeting
}


[PhoenixVisualizer.App\ViewModels\SettingsWindowViewModel.cs]
namespace PhoenixVisualizer.ViewModels;

public partial class SettingsWindowViewModel : ViewModelBase
{
    // Properties for the settings
    public string SelectedPlugin { get; set; } = "avs";
    public int SampleRate { get; set; } = 44100;
    public int BufferSize { get; set; } = 1024;
    public bool EnableVsync { get; set; } = true;
    public bool StartFullscreen { get; set; } = false;
    public bool AutoHideUI { get; set; } = true;
}


[PhoenixVisualizer.App\ViewModels\ViewModelBase.cs]
using CommunityToolkit.Mvvm.ComponentModel;

namespace PhoenixVisualizer.ViewModels;

public class ViewModelBase : ObservableObject
{
}


[PhoenixVisualizer.App\Views\MainWindow.axaml]
<!-- PhoenixVisualizer/PhoenixVisualizer.App/Views/MainWindow.axaml -->
<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="using:PhoenixVisualizer.ViewModels"
        xmlns:r="using:PhoenixVisualizer.Rendering"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="PhoenixVisualizer.Views.MainWindow"

        Icon="/Assets/avalonia-logo.ico"
        Title="PhoenixVisualizer">



    <Grid RowDefinitions="Auto,Auto,*">
        <!-- Top toolbar -->
        <StackPanel Orientation="Horizontal" Margin="8" Spacing="8">
            <Button x:Name="BtnOpen" Content="Open" Click="OnOpenClick" Margin="0,0,8,0"/>
            <Button x:Name="BtnPlay" Content="Play" Click="OnPlayClick" Margin="0,0,8,0"/>
            <Button x:Name="BtnPause" Content="Pause" Click="OnPauseClick" Margin="0,0,8,0"/>
            <Button x:Name="BtnStop" Content="Stop" Click="OnStopClick" Margin="0,0,8,0"/>
            <!-- New controls -->
            <Button x:Name="BtnTempoPitch" Content="Tempo/Pitch" Click="OnTempoPitchClick" Margin="0,0,8,0"/>
            <Button x:Name="BtnSettings" Content="Settings" Click="OnSettingsClick" Margin="0,0,8,0"/>
            <Button x:Name="BtnEditor" Content="AVS Editor" Click="OnEditorClick" Margin="0,0,8,0"/>
            <ComboBox x:Name="CmbPlugin" Width="160"/>
            <TextBox x:Name="TxtPreset" Width="320" Watermark="points=256;mode=line;source=fft"/>
            <Button Content="Load Preset" Click="OnLoadPreset"/>
            <Button Content="Import Preset" Click="OnImportPreset"/>
        </StackPanel>

        <!-- Status row (expanded from single FPS to FPS/BPM/Time) -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="8" Spacing="16">
            <TextBlock x:Name="LblFps"/>
            <TextBlock x:Name="LblBpm"/>
            <TextBlock x:Name="LblTime"/>
        </StackPanel>

        <!-- Render surface -->
        <Border Grid.Row="2" Margin="8" Background="#111">
            <r:RenderSurface x:Name="RenderHost"/>
        </Border>
    </Grid>

</Window>

[PhoenixVisualizer.App\Views\MainWindow.axaml.cs]
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Avalonia.Controls;
using Avalonia.Interactivity;
using Avalonia.Markup.Xaml;              // <-- manual XAML load
using Avalonia.Platform.Storage;
using Avalonia.Threading;
using Avalonia.Input;
using PhoenixVisualizer.PluginHost;
using PhoenixVisualizer.Plugins.Avs;
using PhoenixVisualizer.Rendering;
using PhoenixVisualizer.Core.Config;
using PhoenixVisualizer; // preset manager
using EditorWindow = PhoenixVisualizer.Editor.Views.MainWindow;

namespace PhoenixVisualizer.Views;

public partial class MainWindow : Window
{
    // Grab the render surface once on the UI thread so background tasks don't try
    // to traverse the visual tree later (which would throw ðŸ™…â€â™‚ï¸)
    private readonly RenderSurface? _renderSurface;
    private RenderSurface? RenderSurfaceControl => _renderSurface;

    private static readonly string[] AudioPatterns = { "*.mp3", "*.wav", "*.flac", "*.ogg" };

    public MainWindow()
    {
        // Manually load XAML so we don't depend on generated InitializeComponent()
        AvaloniaXamlLoader.Load(this);
        _renderSurface = this.FindControl<RenderSurface>("RenderHost");
        
        System.Diagnostics.Debug.WriteLine($"[MainWindow] Constructor: _renderSurface found: {_renderSurface != null}");
        if (_renderSurface != null)
        {
            System.Diagnostics.Debug.WriteLine($"[MainWindow] Constructor: RenderSurface bounds: {_renderSurface.Bounds}");
        }
        
        Presets.Initialize(_renderSurface);

        // Wire runtime UI updates if the render surface is present
        if (RenderSurfaceControl is not null)
        {
            // FPS
            RenderSurfaceControl.FpsChanged += fps =>
            {
                var lbl = this.FindControl<TextBlock>("LblFps");
                if (lbl is not null)
                {
                    Dispatcher.UIThread.Post(
                        () => lbl.Text = $"FPS: {fps:F1}",
                        DispatcherPriority.Background
                    );
                }
            };

            // BPM
            RenderSurfaceControl.BpmChanged += bpm =>
            {
                var lbl = this.FindControl<TextBlock>("LblBpm");
                if (lbl is not null)
                {
                    Dispatcher.UIThread.Post(
                        () => lbl.Text = $"BPM: {bpm:F1}",
                        DispatcherPriority.Background
                    );
                }
            };

            // Position (current / total)
            RenderSurfaceControl.PositionChanged += (pos, len) =>
            {
                var lbl = this.FindControl<TextBlock>("LblTime");
                if (lbl is not null)
                {
                    // Display current and total time as mm:ss ðŸ‘‡
                    // NOTE: Use a single escaped colon; the previous double escape
                    // threw a FormatException on runtime. ðŸ˜…
                    string cur = TimeSpan.FromSeconds(pos).ToString(@"mm\:ss");
                    string tot = TimeSpan.FromSeconds(len).ToString(@"mm\:ss");
                    Dispatcher.UIThread.Post(
                        () => lbl.Text = $"{cur} / {tot}",
                        DispatcherPriority.Background
                    );
                }
            };

            // Plugin ComboBox: populate from registry, fallback to AVS
            var combo = this.FindControl<ComboBox>("CmbPlugin");
            if (combo is not null)
            {
                var plugins = PluginRegistry.Available?.ToList()
                              ?? new List<(string id, string displayName)>();

                if (plugins.Count > 0)
                {
                    combo.ItemsSource = plugins.Select(p => p.displayName).ToList();

                    // Prefer the simple bars visual if it's registered
                    int idx = plugins.FindIndex(p => p.id == "bars");
                    if (idx < 0) idx = 0;
                    combo.SelectedIndex = idx;

                    // Set initial plugin based on the resolved index
                    var initial = PluginRegistry.Create(plugins[idx].id);
                    RenderSurfaceControl.SetPlugin(initial ?? new AvsVisualizerPlugin());

                    combo.SelectionChanged += (_, _) =>
                    {
                        if (RenderSurfaceControl is null) return;
                        int selected = combo.SelectedIndex;
                        if (selected >= 0 && selected < plugins.Count)
                        {
                            var plug = PluginRegistry.Create(plugins[selected].id)
                                       ?? new AvsVisualizerPlugin();
                            RenderSurfaceControl.SetPlugin(plug);
                        }
                    };
                }
                else
                {
                    // Fallback: no registry entries â€” default to AVS and disable the combo
                    combo.ItemsSource = new[] { "AVS (built-in)" };
                    combo.SelectedIndex = 0;
                    RenderSurfaceControl.SetPlugin(new AvsVisualizerPlugin());
                    combo.IsEnabled = false;
                }
            }
        }
    }

    private void InitializePlugin()
    {
        // Set default plugin after controls are ready
        // TODO: Load from settings/config file
        if (RenderSurfaceControl is not null)
        {
            var plugin = new AvsVisualizerPlugin(); // Default to AVS Engine
            RenderSurfaceControl.SetPlugin(plugin);
        }
    }

    private async void OnOpenClick(object? sender, RoutedEventArgs e)
    {
        if (RenderSurfaceControl is null) return;

        var files = await this.StorageProvider.OpenFilePickerAsync(
            new FilePickerOpenOptions
            {
                Title = "Open Audio File",
                AllowMultiple = false,
                FileTypeFilter = new List<FilePickerFileType>
                {
                    new FilePickerFileType("Audio") { Patterns = AudioPatterns }
                }
            });

        var file = files.Count > 0 ? files[0] : null;
        if (file is null) return;

        // Capture the control reference on the UI thread ðŸ‘‡
        var surface = RenderSurfaceControl;
        await Task.Run(() => surface?.Open(file.Path.LocalPath));
    }

    private void OnPlayClick(object? sender, RoutedEventArgs e)
    {
        try
        {
            System.Diagnostics.Debug.WriteLine($"[MainWindow] OnPlayClick: Button clicked, RenderSurfaceControl is: {RenderSurfaceControl != null}");
            System.Diagnostics.Debug.WriteLine($"[MainWindow] OnPlayClick: _renderSurface field is: {_renderSurface != null}");
            
            if (RenderSurfaceControl is null)
            {
                System.Diagnostics.Debug.WriteLine("[MainWindow] OnPlayClick: RenderSurfaceControl is null");
                return;
            }
            
            System.Diagnostics.Debug.WriteLine("[MainWindow] OnPlayClick: Starting playback");
            var playResult = RenderSurfaceControl.Play();
            if (playResult)
            {
                System.Diagnostics.Debug.WriteLine("[MainWindow] OnPlayClick: Play() called successfully");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("[MainWindow] OnPlayClick: Play() failed - no audio file loaded");
                // TODO: Show user-friendly message that they need to open an audio file first
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"[MainWindow] OnPlayClick failed: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"[MainWindow] OnPlayClick stack trace: {ex.StackTrace}");
        }
    }
    
    private void OnPauseClick(object? sender, RoutedEventArgs e)
    {
        try
        {
            if (RenderSurfaceControl is null)
            {
                System.Diagnostics.Debug.WriteLine("[MainWindow] OnPauseClick: RenderSurfaceControl is null");
                return;
            }
            
            System.Diagnostics.Debug.WriteLine("[MainWindow] OnPauseClick: Pausing playback");
            RenderSurfaceControl.Pause();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"[MainWindow] OnPauseClick failed: {ex.Message}");
        }
    }
    
    private void OnStopClick(object? sender, RoutedEventArgs e)
    {
        try
        {
            if (RenderSurfaceControl is null)
            {
                System.Diagnostics.Debug.WriteLine("[MainWindow] OnStopClick: RenderSurfaceControl is null");
                return;
            }
            
            System.Diagnostics.Debug.WriteLine("[MainWindow] OnStopClick: Stopping playback");
            RenderSurfaceControl.Stop();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"[MainWindow] OnStopClick failed: {ex.Message}");
        }
    }

    private async void OnSettingsClick(object? sender, RoutedEventArgs e)
    {
        try
        {
            var dlg = new SettingsWindow();
            await dlg.ShowDialog(this);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"[MainWindow] Settings dialog failed: {ex}");
        }
    }

    private async void OnEditorClick(object? sender, RoutedEventArgs e)
    {
        var editor = new EditorWindow();
        await editor.ShowDialog(this);
    }

    private void OnTempoPitchClick(object? sender, RoutedEventArgs e)
    {
        try
        {
            if (RenderSurfaceControl is null) return;
            
            // Test tempo/pitch functionality
            var audio = RenderSurfaceControl.GetAudioService();
            if (audio != null)
            {
                // Test some tempo changes
                audio.SetTempoMultiplier(0.5); // Half speed
                System.Diagnostics.Debug.WriteLine("[MainWindow] Set tempo to 0.5x (half speed)");
                
                // Test pitch change
                audio.SetPitchSemitones(12); // One octave up
                System.Diagnostics.Debug.WriteLine("[MainWindow] Set pitch to +12 semitones (one octave up)");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"[MainWindow] TempoPitch test failed: {ex.Message}");
        }
    }

    private void OnLoadPreset(object? sender, RoutedEventArgs e)
    {
        var tb = this.FindControl<TextBox>("TxtPreset");
        if (tb is null || RenderSurfaceControl is null) return;

        var plug = PluginRegistry.Create("vis_avs") as IAvsHostPlugin;
        if (plug is null) return;

        RenderSurfaceControl.SetPlugin(plug);
        plug.LoadPreset(tb.Text ?? string.Empty);
    }

    private async void OnImportPreset(object? sender, RoutedEventArgs e)
    {
        if (RenderSurfaceControl is null) return;

        var files = await this.StorageProvider.OpenFilePickerAsync(
            new FilePickerOpenOptions
            {
                Title = "Import AVS Preset",
                AllowMultiple = false,
                FileTypeFilter = new List<FilePickerFileType>
                {
                    new("AVS Preset") { Patterns = new[] { "*.avs", "*.txt" } }
                }
            });

        var file = files.Count > 0 ? files[0] : null;
        if (file is null) return;

        var plug = PluginRegistry.Create("vis_avs") as IAvsHostPlugin;
        if (plug is null) return;

        using var stream = await file.OpenReadAsync();
        using var reader = new StreamReader(stream);
        var text = await reader.ReadToEndAsync();

        RenderSurfaceControl.SetPlugin(plug);
        plug.LoadPreset(text);
    }

    protected override void OnKeyDown(KeyEventArgs e)
    {
        base.OnKeyDown(e);
        if (!VisualizerSettings.Load().EnableHotkeys) return;

        switch (e.Key)
        {
            case Key.Y:
                Presets.GoPrev();
                break;
            case Key.U:
                Presets.GoNext();
                break;
            case Key.Space:
                Presets.GoRandom();
                break;
            case Key.R:
                var s = VisualizerSettings.Load();
                s.RandomPresetMode = s.RandomPresetMode == RandomPresetMode.OnBeat ? RandomPresetMode.Off : RandomPresetMode.OnBeat;
                s.Save();
                break;
            case Key.Enter:
                ToggleFullscreen();
                break;
        }
    }

    private void ToggleFullscreen()
    {
        WindowState = WindowState == WindowState.FullScreen ? WindowState.Normal : WindowState.FullScreen;
    }
}

[PhoenixVisualizer.App\Views\SettingsWindow.axaml]
<!-- PhoenixVisualizer/PhoenixVisualizer.App/Views/SettingsWindow.axaml -->
<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="PhoenixVisualizer.Views.SettingsWindow"
        Icon="/Assets/avalonia-logo.ico"
        Title="Phoenix Visualizer Settings"
        Width="500" Height="400"
        CanResize="False"
        WindowStartupLocation="CenterOwner">

    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Header -->
        <TextBlock Grid.Row="0"
                   Text="Settings"
                   FontSize="20"
                   FontWeight="Bold"
                   Margin="0,0,0,20"/>

        <!-- Settings Content -->
        <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto">
            <StackPanel Spacing="20">

                <!-- Visualization Plugin -->
                <Border BorderBrush="Gray" BorderThickness="1" Padding="15" CornerRadius="5">
                    <StackPanel>
                        <TextBlock Text="Visualization Plugin"
                                   FontSize="16" FontWeight="Bold" Margin="0,0,0,10"/>
                        <TextBlock Text="Choose the default visualization plugin:"
                                   Margin="0,0,0,10" />
                        <StackPanel Margin="0,0,0,10">
                            <RadioButton x:Name="AvsRadio"
                                         Content="AVS Engine (Winamp-style)"
                                         Tag="avs"
                                         IsChecked="True"
                                         Margin="0,5"/>
                            <RadioButton x:Name="PhoenixRadio"
                                         Content="Phoenix Visualizer"
                                         Tag="phoenix"
                                         Margin="0,5"/>
                        </StackPanel>
                    </StackPanel>
                </Border>

                <!-- Audio Settings -->
                <Border BorderBrush="Gray" BorderThickness="1" Padding="15" CornerRadius="5">
                    <StackPanel>
                        <TextBlock Text="Audio Settings"
                                   FontSize="16" FontWeight="Bold" Margin="0,0,0,10"/>
                        <Grid ColumnDefinitions="Auto,*" RowDefinitions="Auto,Auto" Margin="0,0,0,10">
                            <TextBlock Grid.Row="0" Grid.Column="0" Text="Sample Rate:" VerticalAlignment="Center" Margin="0,0,10,0"/>
                            <ComboBox Grid.Row="0" Grid.Column="1" x:Name="SampleRateCombo" SelectedIndex="1">
                                <ComboBoxItem Content="22050 Hz"/>
                                <ComboBoxItem Content="44100 Hz"/>
                                <ComboBoxItem Content="48000 Hz"/>
                                <ComboBoxItem Content="96000 Hz"/>
                            </ComboBox>

                            <TextBlock Grid.Row="1" Grid.Column="0" Text="Buffer Size:" VerticalAlignment="Center" Margin="0,0,10,0"/>
                            <ComboBox Grid.Row="1" Grid.Column="1" x:Name="BufferSizeCombo" SelectedIndex="1">
                                <ComboBoxItem Content="256 samples"/>
                                <ComboBoxItem Content="512 samples"/>
                                <ComboBoxItem Content="1024 samples"/>
                                <ComboBoxItem Content="2048 samples"/>
                            </ComboBox>
                        </Grid>
                    </StackPanel>
                </Border>

                <!-- Visualizer Sensitivity -->
                <Border BorderBrush="Gray" BorderThickness="1" Padding="15" CornerRadius="5" Margin="0,0,0,10">
                    <StackPanel>
                        <TextBlock Text="Visualizer Sensitivity" FontSize="16" FontWeight="Bold" Margin="0,0,0,10"/>
                        <StackPanel Spacing="8">
                            <StackPanel Orientation="Horizontal" Spacing="8">
                                <TextBlock Width="150" VerticalAlignment="Center" Text="Input Gain (dB)"/>
                                <Slider x:Name="GainSlider" Minimum="-24" Maximum="24" Width="250"/>
                                <TextBlock x:Name="GainLabel" Width="52" VerticalAlignment="Center"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Spacing="8">
                                <TextBlock Width="150" VerticalAlignment="Center" Text="Smoothing (ms)"/>
                                <Slider x:Name="SmoothSlider" Minimum="0" Maximum="400" Width="250"/>
                                <TextBlock x:Name="SmoothLabel" Width="52" VerticalAlignment="Center"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Spacing="8">
                                <TextBlock Width="150" VerticalAlignment="Center" Text="Noise Gate (dBFS)"/>
                                <Slider x:Name="GateSlider" Minimum="-90" Maximum="-30" Width="250"/>
                                <TextBlock x:Name="GateLabel" Width="52" VerticalAlignment="Center"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Spacing="8">
                                <TextBlock Width="150" VerticalAlignment="Center" Text="Beat Sensitivity (Ã—)"/>
                                <Slider x:Name="BeatSlider" Minimum="1.05" Maximum="1.8" Width="250"/>
                                <TextBlock x:Name="BeatLabel" Width="52" VerticalAlignment="Center"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Spacing="8">
                                <TextBlock Width="150" VerticalAlignment="Center" Text="Frame Blend (0â€“1)"/>
                                <Slider x:Name="BlendSlider" Minimum="0" Maximum="1" Width="250"/>
                                <TextBlock x:Name="BlendLabel" Width="52" VerticalAlignment="Center"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Spacing="8">
                                <TextBlock Width="150" VerticalAlignment="Center" Text="FFT Size"/>
                                <ComboBox x:Name="FftCombo" Width="120">
                                    <ComboBoxItem Content="1024"/>
                                    <ComboBoxItem Content="2048"/>
                                </ComboBox>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Spacing="8">
                                <TextBlock Width="150" VerticalAlignment="Center" Text="Spectrum Scale"/>
                                <ComboBox x:Name="ScaleCombo" Width="150">
                                    <ComboBoxItem Content="Linear"/>
                                    <ComboBoxItem Content="Log"/>
                                    <ComboBoxItem Content="Sqrt"/>
                                </ComboBox>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Spacing="16">
                                <CheckBox x:Name="AutoGainCheck" Content="Auto Gain (AGC)"/>
                                <CheckBox x:Name="PeaksCheck" Content="Show Peaks"/>
                                <CheckBox x:Name="RandomOnBeatCheck" Content="Random preset on beat"/>
                                <CheckBox x:Name="HotkeysCheck" Content="Enable Winamp hotkeys (Y/U/Space/R)"/>
                            </StackPanel>
                        </StackPanel>
                    </StackPanel>
                </Border>

                <!-- Random Preset Switching -->
                <Border BorderBrush="Gray" BorderThickness="1" Padding="15" CornerRadius="5" Margin="0,0,0,10">
                    <StackPanel Spacing="8">
                        <TextBlock Text="Random Preset Mode" FontSize="16" FontWeight="Bold" Margin="0,0,0,6"/>
                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <TextBlock Width="150" VerticalAlignment="Center" Text="Mode"/>
                            <ComboBox x:Name="RandModeCombo" Width="180">
                                <ComboBoxItem Content="Off"/>
                                <ComboBoxItem Content="On Beat"/>
                                <ComboBoxItem Content="Every N seconds"/>
                                <ComboBoxItem Content="Per stanza (bars)"/>
                            </ComboBox>
                        </StackPanel>
                        <StackPanel x:Name="RandIntervalPanel" Orientation="Horizontal" Spacing="8">
                            <TextBlock Width="150" VerticalAlignment="Center" Text="Interval"/>
                            <ComboBox x:Name="RandIntervalCombo" Width="120">
                                <ComboBoxItem Content="15"/>
                                <ComboBoxItem Content="30"/>
                                <ComboBoxItem Content="60"/>
                            </ComboBox>
                            <TextBlock VerticalAlignment="Center" Text="seconds"/>
                        </StackPanel>
                        <StackPanel x:Name="RandStanzaPanel" Spacing="6">
                            <StackPanel Orientation="Horizontal" Spacing="8">
                                <TextBlock Width="150" VerticalAlignment="Center" Text="Beats per bar"/>
                                <ComboBox x:Name="BeatsPerBarCombo" Width="120">
                                    <ComboBoxItem Content="4"/>
                                    <ComboBoxItem Content="3"/>
                                </ComboBox>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Spacing="8">
                                <TextBlock Width="150" VerticalAlignment="Center" Text="Bars per stanza"/>
                                <ComboBox x:Name="BarsPerStanzaCombo" Width="120">
                                    <ComboBoxItem Content="8"/>
                                    <ComboBoxItem Content="16"/>
                                    <ComboBoxItem Content="32"/>
                                    <ComboBoxItem Content="64"/>
                                </ComboBox>
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Spacing="16" Margin="0,6,0,0">
                            <CheckBox x:Name="RandomWhenSilentCheck" Content="Allow switching while silent"/>
                            <StackPanel Orientation="Horizontal" Spacing="6">
                                <TextBlock VerticalAlignment="Center" Text="Cooldown (ms)"/>
                                <NumericUpDown x:Name="RandCooldownUpDown" Minimum="0" Maximum="5000" Width="100"/>
                            </StackPanel>
                        </StackPanel>
                    </StackPanel>
                </Border>

                <!-- Display Settings -->
                <Border BorderBrush="Gray" BorderThickness="1" Padding="15" CornerRadius="5">
                    <StackPanel>
                        <TextBlock Text="Display Settings"
                                   FontSize="16" FontWeight="Bold" Margin="0,0,0,10"/>
                        <CheckBox x:Name="VsyncCheck"       Content="Enable V-Sync"               IsChecked="True"  Margin="0,5"/>
                        <CheckBox x:Name="FullscreenCheck"  Content="Start in Fullscreen Mode"                      Margin="0,5"/>
                        <CheckBox x:Name="AutoHideUICheck"  Content="Auto-hide UI in Fullscreen" IsChecked="True"  Margin="0,5"/>
                    </StackPanel>
                </Border>

            </StackPanel>
        </ScrollViewer>

        <!-- Buttons -->
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right" Spacing="10" Margin="0,20,0,0">
            <Button x:Name="BtnCancel" Content="Cancel" Width="80" Click="OnCancelClick"/>
            <Button x:Name="BtnApply"  Content="Apply"  Width="80" Click="OnApplyClick" IsDefault="True"/>
        </StackPanel>
    </Grid>
</Window>


[PhoenixVisualizer.App\Views\SettingsWindow.axaml.cs]
using System;
using Avalonia.Controls;
using Avalonia.Interactivity;
using Avalonia.Markup.Xaml;
using PhoenixVisualizer.Core.Config;

namespace PhoenixVisualizer.Views;

public partial class SettingsWindow : Window
{
    // Public settings snapshot (matches your previous fields)
    public string SelectedPlugin     { get; private set; } = "avs";
    public int    SampleRate         { get; private set; } = 44100;
    public int    BufferSize         { get; private set; } = 512;
    public bool   EnableVsync        { get; private set; } = true;
    public bool   StartFullscreen    { get; private set; } = false;
    public bool   AutoHideUI         { get; private set; } = true;

    // Visualizer settings ðŸ“Š
    private VisualizerSettings _vz = VisualizerSettings.Load();

    // Named controls (must match XAML x:Name)
    private RadioButton? AvsRadioControl        => this.FindControl<RadioButton>("AvsRadio");
    private RadioButton? PhoenixRadioControl    => this.FindControl<RadioButton>("PhoenixRadio");
    private ComboBox?    SampleRateComboControl => this.FindControl<ComboBox>("SampleRateCombo");
    private ComboBox?    BufferSizeComboControl => this.FindControl<ComboBox>("BufferSizeCombo");
    private CheckBox?    VsyncCheckControl      => this.FindControl<CheckBox>("VsyncCheck");
    private CheckBox?    FullscreenCheckControl => this.FindControl<CheckBox>("FullscreenCheck");
    private CheckBox?    AutoHideUICheckControl => this.FindControl<CheckBox>("AutoHideUICheck");

    public SettingsWindow()
    {
        InitializeComponent();

        // OPTIONAL: if you actually have a ViewModel type, you can set it here.
        // DataContext = new ViewModels.SettingsWindowViewModel();

        // Sync current fields -> UI controls
        LoadCurrentSettings();
        LoadVisualizerSettings();
    }

    private void InitializeComponent()
    {
        AvaloniaXamlLoader.Load(this);
    }

    // Wire to Button Clicks in XAML
    private void OnCancelClick(object? sender, RoutedEventArgs e) => Close();

    private void OnApplyClick(object? sender, RoutedEventArgs e)
    {
        SaveSettingsFromUI();
        SaveVisualizerSettings();
        Close();
    }

    private void LoadCurrentSettings()
    {
        // Radios
        if (SelectedPlugin == "phoenix") { PhoenixRadioControl?.SetCurrentValue(RadioButton.IsCheckedProperty, true); }
        else                             { AvsRadioControl?.SetCurrentValue(RadioButton.IsCheckedProperty, true); }

        // SampleRate
        if (SampleRateComboControl is not null)
        {
            SampleRateComboControl.SelectedIndex = SampleRate switch
            {
                22050 => 0,
                44100 => 1,
                48000 => 2,
                96000 => 3,
                _     => 1
            };
        }

        // BufferSize
        if (BufferSizeComboControl is not null)
        {
            BufferSizeComboControl.SelectedIndex = BufferSize switch
            {
                256  => 0,
                512  => 1,
                1024 => 2,
                2048 => 3,
                _    => 1
            };
        }

        VsyncCheckControl?.SetCurrentValue(CheckBox.IsCheckedProperty,      EnableVsync);
        FullscreenCheckControl?.SetCurrentValue(CheckBox.IsCheckedProperty, StartFullscreen);
        AutoHideUICheckControl?.SetCurrentValue(CheckBox.IsCheckedProperty, AutoHideUI);
    }

    private void SaveSettingsFromUI()
    {
        SelectedPlugin = PhoenixRadioControl?.IsChecked == true ? "phoenix" : "avs";

        if (SampleRateComboControl is not null)
        {
            SampleRate = SampleRateComboControl.SelectedIndex switch
            {
                0 => 22050,
                1 => 44100,
                2 => 48000,
                3 => 96000,
                _ => 44100
            };
        }

        if (BufferSizeComboControl is not null)
        {
            BufferSize = BufferSizeComboControl.SelectedIndex switch
            {
                0 => 256,
                1 => 512,
                2 => 1024,
                3 => 2048,
                _ => 512
            };
        }

        EnableVsync     = VsyncCheckControl?.IsChecked      ?? true;
        StartFullscreen = FullscreenCheckControl?.IsChecked ?? false;
        AutoHideUI      = AutoHideUICheckControl?.IsChecked ?? true;
    }

    // --- Visualizer settings helpers ---
    private void LoadVisualizerSettings()
    {
        // sliders + labels
        if (GainSlider is { } gs && GainLabel is { }) { gs.Value = _vz.InputGainDb; GainLabel.Text = $"{_vz.InputGainDb:0.#} dB"; }
        if (SmoothSlider is { } ss && SmoothLabel is { }) { ss.Value = _vz.SmoothingMs; SmoothLabel.Text = $"{_vz.SmoothingMs:0}"; }
        if (GateSlider is { } gts && GateLabel is { }) { gts.Value = _vz.NoiseGateDb; GateLabel.Text = $"{_vz.NoiseGateDb:0}"; }
        if (BeatSlider is { } bs && BeatLabel is { }) { bs.Value = _vz.BeatSensitivityOrDefault(); BeatLabel.Text = $"{_vz.BeatSensitivity:0.00}Ã—"; }
        if (BlendSlider is { } bls && BlendLabel is { }) { bls.Value = _vz.FrameBlend; BlendLabel.Text = $"{_vz.FrameBlend:0.00}"; }
        if (FftCombo is { }) FftCombo.SelectedIndex = _vz.FftSize == 1024 ? 0 : 1;
        if (ScaleCombo is { })
            ScaleCombo.SelectedIndex = _vz.SpectrumScale switch { SpectrumScale.Linear => 0, SpectrumScale.Log => 1, _ => 2 };
        if (AutoGainCheck is { }) AutoGainCheck.IsChecked = _vz.AutoGain;
        if (PeaksCheck is { }) PeaksCheck.IsChecked = _vz.ShowPeaks;
        if (RandomOnBeatCheck is { }) RandomOnBeatCheck.IsChecked = _vz.RandomPresetMode == RandomPresetMode.OnBeat;
        if (HotkeysCheck is { }) HotkeysCheck.IsChecked = _vz.EnableHotkeys;

        if (RandModeCombo is { })
            RandModeCombo.SelectedIndex = _vz.RandomPresetMode switch
            {
                RandomPresetMode.Off => 0,
                RandomPresetMode.OnBeat => 1,
                RandomPresetMode.Interval => 2,
                _ => 3
            };
        if (RandIntervalCombo is { })
            RandIntervalCombo.SelectedIndex = _vz.RandomPresetIntervalSeconds switch { <=15 => 0, <=30 => 1, _ => 2 };
        if (BeatsPerBarCombo is { }) BeatsPerBarCombo.SelectedIndex = _vz.BeatsPerBar == 3 ? 1 : 0;
        if (BarsPerStanzaCombo is { })
            BarsPerStanzaCombo.SelectedIndex = _vz.StanzaBars switch { <=8 => 0, <=16 => 1, <=32 => 2, _ => 3 };
        if (RandomWhenSilentCheck is { }) RandomWhenSilentCheck.IsChecked = _vz.RandomWhenSilent;
        if (RandCooldownUpDown is { }) RandCooldownUpDown.Value = _vz.RandomPresetCooldownMs;

        UpdateRandomPanels();

        // label updates on change
        if (GainSlider != null && GainLabel != null)
            GainSlider.PropertyChanged += (_, __) => GainLabel.Text = $"{GainSlider.Value:0.#} dB";
        if (SmoothSlider != null && SmoothLabel != null)
            SmoothSlider.PropertyChanged += (_, __) => SmoothLabel.Text = $"{SmoothSlider.Value:0}";
        if (GateSlider != null && GateLabel != null)
            GateSlider.PropertyChanged += (_, __) => GateLabel.Text = $"{GateSlider.Value:0}";
        if (BeatSlider != null && BeatLabel != null)
            BeatSlider.PropertyChanged += (_, __) => BeatLabel.Text = $"{BeatSlider.Value:0.00}Ã—";
        if (BlendSlider != null && BlendLabel != null)
            BlendSlider.PropertyChanged += (_, __) => BlendLabel.Text = $"{BlendSlider.Value:0.00}";
        if (RandModeCombo != null) RandModeCombo.SelectionChanged += (_, __) => UpdateRandomPanels();
    }

    private void UpdateRandomPanels()
    {
        int mode = RandModeCombo?.SelectedIndex ?? 0;
        if (RandIntervalPanel is not null) RandIntervalPanel.IsVisible = mode == 2;
        if (RandStanzaPanel is not null) RandStanzaPanel.IsVisible = mode == 3;
    }

    private void SaveVisualizerSettings()
    {
        _vz.InputGainDb = (float)(GainSlider?.Value ?? 0);
        _vz.SmoothingMs = (float)(SmoothSlider?.Value ?? 0);
        _vz.NoiseGateDb = (float)(GateSlider?.Value ?? -60);
        _vz.BeatSensitivity = (float)(BeatSlider?.Value ?? 1.35f);
        _vz.FrameBlend = (float)(BlendSlider?.Value ?? 0.25f);
        _vz.FftSize = FftCombo?.SelectedIndex == 0 ? 1024 : 2048;
        _vz.SpectrumScale = ScaleCombo?.SelectedIndex switch
        {
            0 => SpectrumScale.Linear,
            1 => SpectrumScale.Log,
            _ => SpectrumScale.Sqrt
        };
        _vz.AutoGain = AutoGainCheck?.IsChecked ?? true;
        _vz.ShowPeaks = PeaksCheck?.IsChecked ?? true;
        _vz.EnableHotkeys = HotkeysCheck?.IsChecked ?? true;

        // random preset mode
        _vz.RandomPresetMode = RandModeCombo?.SelectedIndex switch
        {
            1 => RandomPresetMode.OnBeat,
            2 => RandomPresetMode.Interval,
            3 => RandomPresetMode.Stanza,
            _ => RandomPresetMode.Off
        };
        _vz.RandomPresetIntervalSeconds = RandIntervalCombo?.SelectedIndex switch
        {
            0 => 15,
            1 => 30,
            _ => 60
        };
        _vz.BeatsPerBar = BeatsPerBarCombo?.SelectedIndex == 1 ? 3 : 4;
        _vz.StanzaBars = BarsPerStanzaCombo?.SelectedIndex switch
        {
            0 => 8,
            1 => 16,
            2 => 32,
            _ => 64
        };
        _vz.RandomWhenSilent = RandomWhenSilentCheck?.IsChecked ?? false;
        _vz.RandomPresetCooldownMs = (int)(RandCooldownUpDown?.Value ?? 800);

        // legacy toggle from checkbox
        if (RandomOnBeatCheck?.IsChecked == true && _vz.RandomPresetMode == RandomPresetMode.Off)
            _vz.RandomPresetMode = RandomPresetMode.OnBeat;

        _vz.Save();
    }
}


[PhoenixVisualizer.Audio\AudioService.cs]
using ManagedBass;
using ManagedBass.Fx;
using System;

namespace PhoenixVisualizer.Audio;

public sealed class AudioService : IDisposable
{
    int _sourceHandle;      // decode source
    int _playHandle;        // the handle we actually play (tempo or direct)
    int _tempoHandle;       // tempo FX handle (playable)
    string? _currentFile;
    bool _tempoEnabled = true; // default ON
    float _tempoPercent;       // -95..+500 (we'll clamp)
    float _pitchSemitones;     // -60..+60 (we'll clamp)

    const float TempoMinPercent = -95f;
    const float TempoMaxPercent = 500f;
    const float PitchMinSemis = -60f;
    const float PitchMaxSemis = 60f;

    static float Clamp(float v, float min, float max) => v < min ? min : (v > max ? max : v);

    public bool Open(string filePath)
    {
        Close();

        // Decode-only source
        _sourceHandle = Bass.CreateStream(filePath, 0, 0, BassFlags.Decode | BassFlags.Float);
        if (_sourceHandle == 0) return false;

        _currentFile = filePath;

        // PLAYABLE tempo stream (NO Decode flag) â†’ this is the core Play fix
        _tempoHandle = BassFx.TempoCreate(_sourceHandle, BassFlags.FxFreeSource | BassFlags.Float);
        if (_tempoHandle == 0)
        {
            // Fallback: direct playable stream
            Bass.StreamFree(_sourceHandle);
            _sourceHandle = 0;
            _playHandle = Bass.CreateStream(filePath, 0, 0, BassFlags.Float);
            if (_playHandle == 0) return false;
            _tempoEnabled = false;
        }
        else
        {
            _tempoEnabled = true;
            _playHandle = _tempoHandle;
            ApplyTempoPitch();
        }
        return true;
    }

    public bool Play()
    {
        if (_playHandle == 0) return false;
        return Bass.ChannelPlay(_playHandle);
    }

    public void Pause() { if (_playHandle != 0) Bass.ChannelPause(_playHandle); }
    public void Stop()
    {
        if (_playHandle != 0) Bass.ChannelStop(_playHandle);
        if (_sourceHandle != 0) Bass.ChannelSetPosition(_sourceHandle, 0);
        if (_tempoHandle != 0) Bass.ChannelSetPosition(_tempoHandle, 0);
    }

    public void Close()
    {
        if (_tempoHandle != 0) { Bass.StreamFree(_tempoHandle); _tempoHandle = 0; }
        if (_playHandle != 0 && _playHandle != _tempoHandle) { Bass.StreamFree(_playHandle); }
        _playHandle = 0;

        if (_sourceHandle != 0) { Bass.StreamFree(_sourceHandle); _sourceHandle = 0; }
        _currentFile = null;
        _tempoPercent = 0;
        _pitchSemitones = 0;
        _tempoEnabled = false;
    }

    // ---- Tempo/Pitch surface for UI ----
    public bool TempoEnabled
    {
        get => _tempoEnabled;
        set => ToggleTempo(value);
    }

    public void SetTempoPercent(float percent)
    {
        _tempoPercent = Clamp(percent, TempoMinPercent, TempoMaxPercent);
        ApplyTempoPitch();
    }

    public void SetPitchSemitones(float semis)
    {
        _pitchSemitones = Clamp(semis, PitchMinSemis, PitchMaxSemis);
        ApplyTempoPitch();
    }

    // Multiplier helpers (what the UI uses)
    // Tempo multiplier: 1.0 = normal, 0.75 = -25%, etc.
    public void SetTempoMultiplier(double multiplier)
    {
        if (multiplier <= 0) multiplier = 0.01; // avoid zero/negatives
        var pct = (float)((multiplier - 1.0) * 100.0);
        SetTempoPercent(pct);
    }

    // Pitch multiplier â†’ semitones = 12 * log2(multiplier)
    public void SetPitchMultiplier(double multiplier)
    {
        if (multiplier <= 0) multiplier = 0.01;
        var semis = (float)(12.0 * Math.Log(multiplier, 2.0));
        SetPitchSemitones(semis);
    }

    public void ResetTempoPitch()
    {
        _tempoPercent = 0;
        _pitchSemitones = 0;
        ApplyTempoPitch();
    }

    void ToggleTempo(bool enabled)
    {
        if (enabled == _tempoEnabled) return;
        _tempoEnabled = enabled;
        if (_currentFile == null) { _playHandle = 0; return; }

        long pos = 0;
        if (_playHandle != 0) pos = Bass.ChannelGetPosition(_playHandle);

        if (_tempoEnabled)
        {
            if (_tempoHandle == 0 && _sourceHandle != 0)
            {
                _tempoHandle = BassFx.TempoCreate(_sourceHandle, BassFlags.FxFreeSource | BassFlags.Float);
                if (_tempoHandle == 0) { _tempoEnabled = false; return; }
            }
            _playHandle = _tempoHandle;
        }
        else
        {
            var direct = Bass.CreateStream(_currentFile, 0, 0, BassFlags.Float);
            if (direct != 0)
            {
                var sec = Bass.ChannelBytes2Seconds(_playHandle, pos);
                Bass.ChannelSetPosition(direct, Bass.ChannelSeconds2Bytes(direct, sec));
                if (_playHandle != 0) Bass.ChannelStop(_playHandle);
                _playHandle = direct;
            }
            else
            {
                _tempoEnabled = true; // fail safe
                _playHandle = _tempoHandle != 0 ? _tempoHandle : _playHandle;
            }
        }
        ApplyTempoPitch();
    }

    void ApplyTempoPitch()
    {
        if (_playHandle == 0) return;

        if (_tempoEnabled && _playHandle == _tempoHandle && _tempoHandle != 0)
        {
            Bass.ChannelSetAttribute(_tempoHandle, ChannelAttribute.Tempo, _tempoPercent);
            Bass.ChannelSetAttribute(_tempoHandle, ChannelAttribute.Pitch, _pitchSemitones);
        }
        else
        {
            if (_tempoHandle != 0)
            {
                Bass.ChannelSetAttribute(_tempoHandle, ChannelAttribute.Tempo, 0);
                Bass.ChannelSetAttribute(_tempoHandle, ChannelAttribute.Pitch, 0);
            }
        }
    }

    // ---- Legacy compatibility methods ----
    public bool Initialize() => true; // Always initialized with ManagedBass
    public bool IsReadyToPlay => _playHandle != 0 && !string.IsNullOrEmpty(_currentFile);
    
    public string GetStatus()
    {
        return $"PlayHandle: {(_playHandle != 0 ? "OK" : "NULL")}, File: {(_currentFile ?? "NONE")}, Ready: {IsReadyToPlay}, Tempo: {_tempoEnabled}, Tempo%: {_tempoPercent:F1}, Pitch: {_pitchSemitones:F1}";
    }

    // FFT and waveform reading (simplified for now)
    public float[] ReadFft()
    {
        if (_playHandle == 0) return new float[2048];
        
        try
        {
            var fftData = new float[2048];
            int fftSize = Bass.ChannelGetData(_playHandle, fftData, (int)DataFlags.FFT2048 | (int)DataFlags.FFTIndividual);
            
            if (fftSize > 0)
            {
                return fftData;
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"AudioService.ReadFft failed: {ex.Message}");
        }
        
        return new float[2048];
    }

    public float[] ReadWaveform()
    {
        if (_playHandle == 0) return new float[2048];
        
        try
        {
            var waveData = new float[2048];
            int waveSize = Bass.ChannelGetData(_playHandle, waveData, (int)DataFlags.Float);
            
            if (waveSize > 0)
            {
                return waveData;
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"AudioService.ReadWaveform failed: {ex.Message}");
        }
        
        return new float[2048];
    }

    public double GetPositionSeconds()
    {
        if (_playHandle == 0) return 0.0;
        
        try
        {
            long position = Bass.ChannelGetPosition(_playHandle);
            if (position >= 0)
            {
                return Bass.ChannelBytes2Seconds(_playHandle, position);
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"AudioService.GetPositionSeconds failed: {ex.Message}");
        }
        
        return 0.0;
    }

    public double GetLengthSeconds()
    {
        if (_playHandle == 0) return 0.0;
        
        try
        {
            long length = Bass.ChannelGetLength(_playHandle);
            if (length >= 0)
            {
                return Bass.ChannelBytes2Seconds(_playHandle, length);
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"AudioService.GetLengthSeconds failed: {ex.Message}");
        }
        
        return 0.0;
    }

    public void Dispose()
    {
        Close();
    }
}


[PhoenixVisualizer.Audio\Class1.cs]
namespace PhoenixVisualizer.Audio;

public class Class1
{

}


[PhoenixVisualizer.Audio\PhoenixVisualizer.Audio.csproj]
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\PhoenixVisualizer.Core\PhoenixVisualizer.Core.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="ManagedBass" Version="3.1.1" />
    <PackageReference Include="ManagedBass.Fx" Version="3.1.1" />
  </ItemGroup>

</Project>


[PhoenixVisualizer.AvsEngine\Class1.cs]
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.AvsEngine;

public interface IAvsEngine
{
    void Initialize(int width, int height);
    void LoadPreset(string presetText);
    void Resize(int width, int height);
    void RenderFrame(AudioFeatures features, ISkiaCanvas canvas);
}

// Minimal Superscope-like evaluator (stub)
public sealed class AvsEngine : IAvsEngine
{
    private int _width;
    private int _height;
    private Preset _preset = Preset.CreateDefault();

    public void Initialize(int width, int height)
    {
        _width = width; _height = height;
    }

    public void LoadPreset(string presetText)
    {
        // Enhanced parser: supports tokens like "points=256;mode=line;source=fft;beat=true;energy=true"
        // NEW: Also supports real Winamp superscope code blocks
        try
        {
            var p = new Preset();

            // Check if this is a real Winamp superscope preset
            if (presetText.Contains("init:") || presetText.Contains("per_frame:") || presetText.Contains("per_point:"))
            {
                // Parse Winamp superscope format
                ParseWinampPreset(presetText, p);
            }
            else
            {
                // Parse simple format
                foreach (var seg in presetText.Split(';', StringSplitOptions.RemoveEmptyEntries))
                {
                    var kv = seg.Split('=', 2, StringSplitOptions.RemoveEmptyEntries);
                    if (kv.Length != 2) continue;
                    var key = kv[0].Trim().ToLowerInvariant();
                    var val = kv[1].Trim().ToLowerInvariant();
                    switch (key)
                    {
                        case "points":
                            if (int.TryParse(val, out var n)) p.Points = Math.Clamp(n, 16, 2048);
                            break;
                        case "mode":
                            p.Mode = val == "bars" ? RenderMode.Bars : RenderMode.Line;
                            break;
                        case "source":
                            p.Source = val == "sin" ? SourceMode.Sin : SourceMode.Fft;
                            break;
                        case "beat":
                            p.UseBeat = val == "true" || val == "1" || val == "yes";
                            break;
                        case "energy":
                            p.UseEnergy = val == "true" || val == "1" || val == "yes";
                            break;
                    }
                }
            }

            _preset = p;
        }
        catch { _preset = Preset.CreateDefault(); }
    }

    private void ParseWinampPreset(string presetText, Preset preset)
    {
        // Parse Winamp superscope format
        var lines = presetText.Split('\n', StringSplitOptions.RemoveEmptyEntries);

        foreach (var line in lines)
        {
            var trimmed = line.Trim();
            if (trimmed.StartsWith("init:"))
            {
                preset.InitCode = trimmed.Substring(5).Trim();
            }
            else if (trimmed.StartsWith("per_frame:"))
            {
                preset.PerFrameCode = trimmed.Substring(11).Trim();
            }
            else if (trimmed.StartsWith("per_point:"))
            {
                preset.PerPointCode = trimmed.Substring(10).Trim();
            }
            else if (trimmed.StartsWith("beat:"))
            {
                preset.BeatCode = trimmed.Substring(5).Trim();
            }
        }

        System.Diagnostics.Debug.WriteLine($"Parsed Winamp preset: init='{preset.InitCode}', per_frame='{preset.PerFrameCode}', per_point='{preset.PerPointCode}', beat='{preset.BeatCode}'");
    }

    public void Resize(int width, int height)
    {
        _width = width; _height = height;
    }

    public void RenderFrame(AudioFeatures features, ISkiaCanvas canvas)
    {
        // Debug: log that we're rendering
        System.Diagnostics.Debug.WriteLine($"AvsEngine.RenderFrame: width={_width}, height={_height}, points={_preset.Points}, mode={_preset.Mode}, source={_preset.Source}");

        canvas.Clear(0xFF000000);

        // Draw a simple superscope-like output based on preset
        int npts = Math.Min(_preset.Points, 1024);
        Span<(float x, float y)> pts = stackalloc (float x, float y)[npts];
        ReadOnlySpan<float> fft = features.Fft;

        System.Diagnostics.Debug.WriteLine($"FFT length: {fft.Length}");

        // Superscope variables (like Winamp AVS)
        float t = (float)features.TimeSeconds;
        float beat = features.Beat ? 1.0f : 0.0f;
        float energy = features.Energy;

        for (int i = 0; i < npts; i++)
        {
            // Superscope per-point variables
            float n = npts > 1 ? (float)i / (npts - 1) : 0f; // normalized position (0-1)
            float nx = n * 2.0f - 1.0f; // centered (-1 to 1)

            // Calculate x position
            float x = (nx + 1.0f) * 0.5f * (_width - 1);

            // Calculate y value based on source and effects
            float v = _preset.Source switch
            {
                SourceMode.Sin => (float)Math.Sin(t * 2 * Math.PI + nx * 4 * Math.PI),
                _ => fft.Length > 0 ? fft[(int)(n * (fft.Length - 1))] : 0f
            };

            // Apply effects
            if (_preset.UseBeat)
            {
                v *= 1.0f + beat * 0.5f; // Amplify on beat
            }

            if (_preset.UseEnergy)
            {
                v *= 0.5f + energy * 0.5f; // Scale with energy
            }

            // Calculate y position (center + offset)
            float y = _height * 0.5f - v * (_height * 0.4f);

            pts[i] = (x, y);
        }

        // Choose color based on mode and audio
        uint color = _preset.Mode switch
        {
            RenderMode.Bars => 0xFF44AAFF, // Blue bars
            RenderMode.Line => 0xFFFF8800, // Orange line
            _ => 0xFFFF8800
        };

        // Apply color effects
        if (_preset.UseBeat)
        {
            color = BlendColor(color, 0xFFFF0000, beat * 0.3f); // Red tint on beat
        }

        System.Diagnostics.Debug.WriteLine($"Drawing {npts} points with color {color:X8}");

        // Draw based on mode
        if (_preset.Mode == RenderMode.Bars)
        {
            // Draw individual bars
            for (int i = 0; i < npts; i++)
            {
                var (x, y) = pts[i];
                float barHeight = Math.Abs(y - _height * 0.5f);
                canvas.DrawLines(new[] { (x, _height * 0.5f), (x, y) }, 3.0f, color);
            }
        }
        else
        {
            // Draw connected line
            canvas.DrawLines(pts, 2.0f, color);
        }
    }

    private uint BlendColor(uint color1, uint color2, float ratio)
    {
        // Simple color blending
        uint r1 = (color1 >> 16) & 0xFF;
        uint g1 = (color1 >> 8) & 0xFF;
        uint b1 = color1 & 0xFF;

        uint r2 = (color2 >> 16) & 0xFF;
        uint g2 = (color2 >> 8) & 0xFF;
        uint b2 = color2 & 0xFF;

        uint r = (uint)(r1 * (1 - ratio) + r2 * ratio);
        uint g = (uint)(g1 * (1 - ratio) + g2 * ratio);
        uint b = (uint)(b1 * (1 - ratio) + b2 * ratio);

        return (r << 16) | (g << 8) | b;
    }
}

internal sealed class Preset
{
    public int Points { get; set; } = 256;
    public RenderMode Mode { get; set; } = RenderMode.Line;
    public SourceMode Source { get; set; } = SourceMode.Fft;
    public bool UseBeat { get; set; } = true;
    public bool UseEnergy { get; set; } = true;

    // NEW: Real Winamp superscope support
    public string InitCode { get; set; } = "";      // codehandle[3] - one-time setup
    public string PerFrameCode { get; set; } = "";  // codehandle[1] - per-frame setup
    public string PerPointCode { get; set; } = "";  // codehandle[0] - main superscope logic
    public string BeatCode { get; set; } = "";      // codehandle[2] - beat detection

    public static Preset CreateDefault() => new();
}

internal enum RenderMode { Line, Bars }
internal enum SourceMode { Fft, Sin }


[PhoenixVisualizer.AvsEngine\PhoenixVisualizer.AvsEngine.csproj]
<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <ProjectReference Include="..\PhoenixVisualizer.PluginHost\PhoenixVisualizer.PluginHost.csproj" />
  </ItemGroup>

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>


[PhoenixVisualizer.Core\Class1.cs]
namespace PhoenixVisualizer.Core;

public class Class1
{

}


[PhoenixVisualizer.Core\Config\VisualizerSettings.cs]
using System;
using System.IO;
using System.Text.Json;

namespace PhoenixVisualizer.Core.Config;

// ðŸ”Š Spectrum scaling options
public enum SpectrumScale { Linear, Log, Sqrt }

// ðŸŽ² Random preset modes
public enum RandomPresetMode
{
    Off = 0,
    OnBeat = 1,
    Interval = 2,
    Stanza = 3
}

// ðŸŽ›ï¸ Visualizer settings persisted to disk
public sealed partial class VisualizerSettings
{
    // --- Sensitivity / visual tweaks ---
    public float InputGainDb { get; set; } = 0f;            // -24..+24
    public bool AutoGain { get; set; } = true;              // AGC keeps levels steady
    public float TargetRms { get; set; } = 0.08f;           // AGC target
    public float SmoothingMs { get; set; } = 120f;          // EMA over FFT magnitude
    public float FrameBlend { get; set; } = 0.25f;          // 0..1 (visual frame lerp)
    public float NoiseGateDb { get; set; } = -60f;          // gate low-level noise
    public float FloorDb { get; set; } = -48f;              // spectral floor
    public float CeilingDb { get; set; } = -6f;             // spectral ceiling
    public SpectrumScale SpectrumScale { get; set; } = SpectrumScale.Log;
    public float PeakFalloffPerSec { get; set; } = 1.5f;    // bar peak falloff
    public float BeatSensitivity { get; set; } = 1.35f;     // energy multiple to flag beat
    public int BeatCooldownMs { get; set; } = 400;          // donâ€™t spam beats
    public int FftSize { get; set; } = 2048;                // 1024/2048 like Winamp
    public bool ShowPeaks { get; set; } = true;             // classic spectrum peak caps
    public bool EnableHotkeys { get; set; } = true;         // Y/U/Space/R/Enter

    // --- Random preset switching ---
    public RandomPresetMode RandomPresetMode { get; set; } = RandomPresetMode.Off;
    public int RandomPresetIntervalSeconds { get; set; } = 30;
    public int BeatsPerBar { get; set; } = 4;
    public int StanzaBars { get; set; } = 16;
    public int RandomPresetCooldownMs { get; set; } = 800;
    public bool RandomWhenSilent { get; set; } = false;
    public float SilenceRmsGate { get; set; } = 0.010f;

    // legacy flag to detect old json
    private bool _legacyRandomOnBeat = false;

    public static string Path =>
        System.IO.Path.Combine(AppContext.BaseDirectory, "settings.visualizer.json");

    public static VisualizerSettings Load()
    {
        if (!File.Exists(Path)) return new VisualizerSettings();
        var json = File.ReadAllText(Path);
        var doc = JsonDocument.Parse(json);
        var root = doc.RootElement;
        var settings = JsonSerializer.Deserialize<VisualizerSettings>(json,
            new JsonSerializerOptions { PropertyNameCaseInsensitive = true })
            ?? new VisualizerSettings();

        if (root.TryGetProperty("RandomPresetOnBeat", out var legacy) && legacy.GetBoolean())
            settings._legacyRandomOnBeat = true;

        settings.OnLoadedCompat();
        return settings;
    }

    public void Save()
    {
        var json = JsonSerializer.Serialize(this, new JsonSerializerOptions { WriteIndented = true });
        File.WriteAllText(Path, json);
    }

    // map legacy bool to new enum
    partial void OnLoadedCompat();
}

public sealed partial class VisualizerSettings
{
    partial void OnLoadedCompat()
    {
        if (RandomPresetMode == RandomPresetMode.Off && _legacyRandomOnBeat)
            RandomPresetMode = RandomPresetMode.OnBeat;
    }
}

// âœ¨ Helper extension
public static class VisualizerSettingsExtensions
{
    public static float BeatSensitivityOrDefault(this VisualizerSettings v)
        => v.BeatSensitivity <= 0f ? 1.35f : v.BeatSensitivity;
}



[PhoenixVisualizer.Core\PhoenixVisualizer.Core.csproj]
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\PhoenixVisualizer.PluginHost\PhoenixVisualizer.PluginHost.csproj" />
  </ItemGroup>

</Project>


[PhoenixVisualizer.Core\Presets\PresetScheduler.cs]
using System;
using PhoenixVisualizer.Core.Config;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Core.Presets;

// ðŸ¤– Decides when to switch presets
public sealed class PresetScheduler
{
    private DateTime _lastSwitch = DateTime.MinValue;
    private DateTime _lastBeat = DateTime.MinValue;
    private int _beatCount;
    private int _barCount;

    public bool ShouldSwitch(AudioFeatures features, VisualizerSettings s)
    {
        // skip when silent unless allowed
        if (!s.RandomWhenSilent && features.Rms < s.SilenceRmsGate)
        {
            if ((DateTime.UtcNow - _lastBeat).TotalSeconds > 2)
            {
                _beatCount = 0;
                _barCount = 0;
            }
            return false;
        }

        if (_lastSwitch != DateTime.MinValue &&
            (DateTime.UtcNow - _lastSwitch).TotalMilliseconds < Math.Max(0, s.RandomPresetCooldownMs))
            return false;

        switch (s.RandomPresetMode)
        {
            case RandomPresetMode.Off:
                return false;
            case RandomPresetMode.OnBeat:
                return features.Beat && ArmSwitch(s);
            case RandomPresetMode.Interval:
                return IntervalReady(s);
            case RandomPresetMode.Stanza:
                return StanzaReady(features, s);
            default:
                return false;
        }
    }

    public void NotifySwitched() => _lastSwitch = DateTime.UtcNow;

    private bool IntervalReady(VisualizerSettings s)
    {
        if (_lastSwitch == DateTime.MinValue) return ArmSwitch(s);
        var due = _lastSwitch.AddSeconds(Math.Clamp(s.RandomPresetIntervalSeconds, 5, 600));
        return DateTime.UtcNow >= due && ArmSwitch(s);
    }

    private bool StanzaReady(AudioFeatures f, VisualizerSettings s)
    {
        if (f.Beat)
        {
            _lastBeat = DateTime.UtcNow;
            _beatCount++;
            int beatsPerBar = Math.Clamp(s.BeatsPerBar, 2, 8);
            if (_beatCount % beatsPerBar == 0)
            {
                _barCount++;
                if (_barCount >= Math.Clamp(s.StanzaBars, 4, 128))
                {
                    _beatCount = 0;
                    _barCount = 0;
                    return ArmSwitch(s);
                }
            }
        }
        return false;
    }

    private bool ArmSwitch(VisualizerSettings s)
    {
        if (_lastSwitch != DateTime.MinValue &&
            (DateTime.UtcNow - _lastSwitch).TotalMilliseconds < Math.Max(0, s.RandomPresetCooldownMs))
            return false;
        _lastSwitch = DateTime.UtcNow;
        return true;
    }
}



[PhoenixVisualizer.Editor\App.axaml]
<Application xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             x:Class="PhoenixVisualizer.Editor.App"
             xmlns:local="using:PhoenixVisualizer.Editor"
             RequestedThemeVariant="Default">
             <!-- "Default" ThemeVariant follows system theme variant. "Dark" or "Light" are other available options. -->

    <Application.DataTemplates>
        <local:ViewLocator/>
    </Application.DataTemplates>
  
    <Application.Styles>
        <FluentTheme />
    </Application.Styles>
</Application>

[PhoenixVisualizer.Editor\App.axaml.cs]
using Avalonia;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Data.Core;
using Avalonia.Data.Core.Plugins;
using System.Linq;
using Avalonia.Markup.Xaml;
using PhoenixVisualizer.Editor.ViewModels;
using PhoenixVisualizer.Editor.Views;

namespace PhoenixVisualizer.Editor;

public partial class App : Application
{
    public override void Initialize()
    {
        AvaloniaXamlLoader.Load(this);
    }

    public override void OnFrameworkInitializationCompleted()
    {
        if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
        {
            // Avoid duplicate validations from both Avalonia and the CommunityToolkit. 
            // More info: https://docs.avaloniaui.net/docs/guides/development-guides/data-validation#manage-validationplugins
            DisableAvaloniaDataAnnotationValidation();
            desktop.MainWindow = new MainWindow
            {
                DataContext = new MainWindowViewModel(),
            };
        }

        base.OnFrameworkInitializationCompleted();
    }

    private void DisableAvaloniaDataAnnotationValidation()
    {
        // Get an array of plugins to remove
        var dataValidationPluginsToRemove =
            BindingPlugins.DataValidators.OfType<DataAnnotationsValidationPlugin>().ToArray();

        // remove each entry found
        foreach (var plugin in dataValidationPluginsToRemove)
        {
            BindingPlugins.DataValidators.Remove(plugin);
        }
    }
}

[PhoenixVisualizer.Editor\PhoenixVisualizer.Editor.csproj]
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <BuiltInComInteropSupport>true</BuiltInComInteropSupport>
    <ApplicationManifest>app.manifest</ApplicationManifest>
    <AvaloniaUseCompiledBindingsByDefault>true</AvaloniaUseCompiledBindingsByDefault>
  </PropertyGroup>

  <ItemGroup>
    <Folder Include="Models\" />
    <AvaloniaResource Include="Assets\**" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Avalonia" Version="11.3.3" />
    <PackageReference Include="Avalonia.Desktop" Version="11.3.3" />
    <PackageReference Include="Avalonia.Themes.Fluent" Version="11.3.3" />
    <PackageReference Include="Avalonia.Fonts.Inter" Version="11.3.3" />
    <!--Condition below is needed to remove Avalonia.Diagnostics package from build output in Release configuration.-->
    <PackageReference Include="Avalonia.Diagnostics" Version="11.3.3">
      <IncludeAssets Condition="'$(Configuration)' != 'Debug'">None</IncludeAssets>
      <PrivateAssets Condition="'$(Configuration)' != 'Debug'">All</PrivateAssets>
    </PackageReference>
    <PackageReference Include="CommunityToolkit.Mvvm" Version="8.2.1" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\PhoenixVisualizer.PluginHost\PhoenixVisualizer.PluginHost.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.ApeHost\PhoenixVisualizer.ApeHost.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.AvsEngine\PhoenixVisualizer.AvsEngine.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.Plots\PhoenixVisualizer.Plots.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.Audio\PhoenixVisualizer.Audio.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.Plugins.Avs\PhoenixVisualizer.Plugins.Avs.csproj" />
  </ItemGroup>

</Project>


[PhoenixVisualizer.Editor\Program.cs]
using Avalonia;
using System;

namespace PhoenixVisualizer.Editor;

sealed class Program
{
    // Initialization code. Don't use any Avalonia, third-party APIs or any
    // SynchronizationContext-reliant code before AppMain is called: things aren't initialized
    // yet and stuff might break.
    [STAThread]
    public static void Main(string[] args) => BuildAvaloniaApp()
        .StartWithClassicDesktopLifetime(args);

    // Avalonia configuration, don't remove; also used by visual designer.
    public static AppBuilder BuildAvaloniaApp()
        => AppBuilder.Configure<App>()
            .UsePlatformDetect()
            .WithInterFont()
            .LogToTrace();
}


[PhoenixVisualizer.Editor\Rendering\CanvasAdapter.cs]
using System;
using Avalonia;
using Avalonia.Media;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Editor.Rendering;

public sealed class CanvasAdapter : ISkiaCanvas
{
    private readonly DrawingContext _context;
    private readonly double _width;
    private readonly double _height;

    public float FrameBlend { get; set; }

    public CanvasAdapter(DrawingContext context, double width, double height)
    {
        _context = context;
        _width = width;
        _height = height;
    }

    public void Clear(uint argb)
    {
        var color = Color.FromUInt32(argb);
        _context.FillRectangle(new SolidColorBrush(color), new Rect(0, 0, _width, _height));
    }

    public void DrawLines(ReadOnlySpan<(float x, float y)> points, float thickness, uint argb)
    {
        if (points.Length < 2) return;
        var geometry = new StreamGeometry();
        using (var ctx = geometry.Open())
        {
            ctx.BeginFigure(new Point(points[0].x, points[0].y), false);
            for (int i = 1; i < points.Length; i++)
            {
                ctx.LineTo(new Point(points[i].x, points[i].y));
            }
            ctx.EndFigure(false);
        }
        var pen = new Pen(new SolidColorBrush(Color.FromUInt32(argb)), thickness);
        _context.DrawGeometry(null, pen, geometry);
    }

    public void FillCircle(float cx, float cy, float radius, uint argb)
    {
        var brush = new SolidColorBrush(Color.FromUInt32(argb));
        _context.DrawEllipse(brush, null, new Point(cx, cy), radius, radius);
    }
}


[PhoenixVisualizer.Editor\Rendering\RenderSurface.cs]
using System;
using System.Threading;
using Avalonia;
using Avalonia.Controls;
using Avalonia.Media;
using Avalonia.Threading;
using PhoenixVisualizer.Audio;
using PhoenixVisualizer.PluginHost;
using PhoenixVisualizer.Plugins.Avs;

namespace PhoenixVisualizer.Editor.Rendering;

public sealed class RenderSurface : Control
{
    private readonly AudioService _audio;
    private IVisualizerPlugin? _plugin = new AvsVisualizerPlugin();
    private Timer? _timer;

    // FFT smoothing
    private readonly float[] _smoothFft = new float[2048];
    private bool _fftInit;

    // Simple beat/BPM estimation
    private float _prevEnergy;
    private DateTime _lastBeat = DateTime.MinValue;
    private double _bpm;

    // Resize tracking
    private int _lastWidth;
    private int _lastHeight;

    public RenderSurface()
    {
        _audio = new AudioService();
    }

    public void SetPlugin(IVisualizerPlugin plugin)
    {
        _plugin?.Dispose();
        _plugin = plugin;
        System.Diagnostics.Debug.WriteLine($"[RenderSurface] SetPlugin: {plugin.DisplayName} ({plugin.Id})");
        if (Bounds.Width > 0 && Bounds.Height > 0)
        {
            _plugin.Initialize((int)Bounds.Width, (int)Bounds.Height);
        }
    }

    protected override void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e)
    {
        base.OnAttachedToVisualTree(e);
        _plugin?.Initialize((int)Bounds.Width, (int)Bounds.Height);
        _audio.Initialize();
        _timer = new Timer(_ => Dispatcher.UIThread.Post(InvalidateVisual, DispatcherPriority.Render), null, 0, 16);
    }

    protected override void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e)
    {
        _timer?.Dispose();
        _timer = null;
        _plugin?.Dispose();
        _audio.Dispose();
        base.OnDetachedFromVisualTree(e);
    }

    public bool Open(string path) => _audio.Open(path);
    public void Play() => _audio.Play();
    public void Pause() => _audio.Pause();
    public void Stop() => _audio.Stop();

    public override void Render(DrawingContext context)
    {
        var adapter = new CanvasAdapter(context, Bounds.Width, Bounds.Height);

        // Handle dynamic resize
        int w = (int)Bounds.Width;
        int h = (int)Bounds.Height;
        if (w != _lastWidth || h != _lastHeight)
        {
            _lastWidth = w;
            _lastHeight = h;
            _plugin?.Resize(w, h);
        }

        // Audio data
        var fft = _audio.ReadFft();
        var wave = _audio.ReadWaveform();
        double pos = _audio.GetPositionSeconds();
        double total = _audio.GetLengthSeconds();

        // Smooth FFT
        if (!_fftInit)
        {
            Array.Copy(fft, _smoothFft, Math.Min(fft.Length, _smoothFft.Length));
            _fftInit = true;
        }
        else
        {
            int n = Math.Min(fft.Length, _smoothFft.Length);
            const float alpha = 0.2f;
            for (int i = 0; i < n; i++)
            {
                _smoothFft[i] = _smoothFft[i] + alpha * (fft[i] - _smoothFft[i]);
            }
        }

        // Feature extraction
        int len = _smoothFft.Length;
        float energy = 0f;
        float volumeSum = 0f;
        float peak = 0f;
        float bass = 0f, mid = 0f, treble = 0f;
        int bassEnd = len / 3;
        int midEnd = 2 * len / 3;

        for (int i = 0; i < len; i++)
        {
            float v = MathF.Abs(_smoothFft[i]);
            volumeSum += v;
            energy += v * v;
            if (v > peak) peak = v;
            if (i < bassEnd) bass += v;
            else if (i < midEnd) mid += v;
            else treble += v;
        }

        float volume = volumeSum / len;
        float rms = MathF.Sqrt(energy / len);

        // crude beat detection via energy jump
        bool beat = false;
        var now = DateTime.UtcNow;
        if (energy > _prevEnergy * 1.5f && energy > 1e-6f)
        {
            beat = true;
            if (_lastBeat != DateTime.MinValue)
            {
                _bpm = 60.0 / (now - _lastBeat).TotalSeconds;
            }
            _lastBeat = now;
        }
        _prevEnergy = _prevEnergy * 0.9f + energy * 0.1f;

        var features = new AudioFeatures(
            pos,       // time seconds
            _bpm,      // bpm estimate
            beat,      // beat flag
            volume,    // average magnitude
            rms,       // rms
            peak,      // peak
            energy,    // energy
            _smoothFft,// fft
            wave,      // waveform
            bass,      // bass band
            mid,       // mid band
            treble,    // treble band
            null,
            null
        );

        try
        {
            _plugin?.RenderFrame(features, adapter);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Plugin render failed: {ex}");
        }
    }
}


[PhoenixVisualizer.Editor\ViewLocator.cs]
using System;
using Avalonia.Controls;
using Avalonia.Controls.Templates;
using PhoenixVisualizer.Editor.ViewModels;

namespace PhoenixVisualizer.Editor;

public class ViewLocator : IDataTemplate
{

    public Control? Build(object? param)
    {
        if (param is null)
            return null;

        var name = param.GetType().FullName!.Replace("ViewModel", "View", StringComparison.Ordinal);
        var type = Type.GetType(name);

        if (type != null)
        {
            return (Control)Activator.CreateInstance(type)!;
        }

        return new TextBlock { Text = "Not Found: " + name };
    }

    public bool Match(object? data)
    {
        return data is ViewModelBase;
    }
}


[PhoenixVisualizer.Editor\ViewModels\MainWindowViewModel.cs]
namespace PhoenixVisualizer.Editor.ViewModels;

public partial class MainWindowViewModel : ViewModelBase
{
    public string Greeting { get; } = "Welcome to Avalonia!";
}


[PhoenixVisualizer.Editor\ViewModels\ViewModelBase.cs]
using CommunityToolkit.Mvvm.ComponentModel;

namespace PhoenixVisualizer.Editor.ViewModels;

public class ViewModelBase : ObservableObject
{
}


[PhoenixVisualizer.Editor\Views\MainWindow.axaml]
<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="using:PhoenixVisualizer.Editor.ViewModels"
        xmlns:r="using:PhoenixVisualizer.Editor.Rendering"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="PhoenixVisualizer.Editor.Views.MainWindow"
        x:DataType="vm:MainWindowViewModel"
        Icon="/Assets/avalonia-logo.ico"
        Title="PhoenixVisualizer.Editor">

    <Design.DataContext>
        <!-- This only sets the DataContext for the previewer in an IDE,
             to set the actual DataContext for runtime, set the DataContext property in code (look at App.axaml.cs) -->
        <vm:MainWindowViewModel/>
    </Design.DataContext>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="250" MinWidth="200"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="300" MinWidth="250"/>
        </Grid.ColumnDefinitions>
        
        <!-- Left Panel: Preset Browser -->
        <Border Grid.Column="0" BorderBrush="Gray" BorderThickness="0,0,1,0" Padding="10">
            <StackPanel>
                <TextBlock Text="Preset Browser" FontSize="16" FontWeight="Bold" Margin="0,0,0,10"/>
                <TextBox Name="PresetInput" Text="points=256;mode=line;source=fft" Margin="0,0,0,10"/>
                <Button Content="Load Preset" HorizontalAlignment="Stretch" Margin="0,0,0,10" Click="OnLoadPreset"/>
                <Button Content="Save Preset" HorizontalAlignment="Stretch" Margin="0,0,0,10"/>
                <Separator Margin="0,10"/>
                <TextBlock Text="Recent Presets" FontSize="14" FontWeight="Bold" Margin="0,0,0,10"/>
                <ListBox Name="RecentPresets" Height="200">
                    <ListBoxItem Content="points=256;mode=line;source=fft"/>
                    <ListBoxItem Content="points=128;mode=bars;source=fft"/>
                    <ListBoxItem Content="points=512;mode=line;source=sin"/>
                </ListBox>
            </StackPanel>
        </Border>
        
        <!-- Center: Visualization Canvas -->
        <Border Grid.Column="1" BorderBrush="Gray" BorderThickness="1" Margin="5">
            <r:RenderSurface x:Name="RenderHost"/>
        </Border>
        
        <!-- Right Panel: Properties -->
        <Border Grid.Column="2" BorderBrush="Gray" BorderThickness="1,0,0,0" Padding="10">
            <StackPanel>
                <TextBlock Text="Properties" FontSize="16" FontWeight="Bold" Margin="0,0,0,10"/>
                
                <TextBlock Text="Points" FontWeight="Bold" Margin="0,10,0,5"/>
                <Slider Name="PointsSlider" Minimum="16" Maximum="1024" Value="256" TickFrequency="64" IsSnapToTickEnabled="True"/>
                <TextBlock Text="{Binding ElementName=PointsSlider, Path=Value, StringFormat='{}{0:F0}'}" HorizontalAlignment="Center"/>
                
                <TextBlock Text="Mode" FontWeight="Bold" Margin="0,10,0,5"/>
                <ComboBox Name="ModeCombo" SelectedIndex="0">
                    <ComboBoxItem Content="Line"/>
                    <ComboBoxItem Content="Bars"/>
                </ComboBox>
                
                <TextBlock Text="Source" FontWeight="Bold" Margin="0,10,0,5"/>
                <ComboBox Name="SourceCombo" SelectedIndex="0">
                    <ComboBoxItem Content="FFT"/>
                    <ComboBoxItem Content="Sine"/>
                </ComboBox>
                
                <Separator Margin="0,20"/>
                <TextBlock Text="Audio Controls" FontSize="14" FontWeight="Bold" Margin="0,0,0,10"/>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                    <Button Content="â–¶" Width="40" Height="30" Margin="2"/>
                    <Button Content="â¸" Width="40" Height="30" Margin="2"/>
                    <Button Content="â¹" Width="40" Height="30" Margin="2"/>
                </StackPanel>
            </StackPanel>
        </Border>
    </Grid>

</Window>


[PhoenixVisualizer.Editor\Views\MainWindow.axaml.cs]
using Avalonia.Controls;
using Avalonia.Interactivity;
using PhoenixVisualizer.PluginHost;
using PhoenixVisualizer.Plugins.Avs;
using PhoenixVisualizer.Editor.Rendering;

namespace PhoenixVisualizer.Editor.Views;

public partial class MainWindow : Window
{
    private RenderSurface? RenderSurfaceControl => this.FindControl<RenderSurface>("RenderHost");

    public MainWindow()
    {
        InitializeComponent();
        // spin up a default AVS plugin so the canvas isn't blank
        RenderSurfaceControl?.SetPlugin(new AvsVisualizerPlugin());
    }

    private void OnLoadPreset(object? sender, RoutedEventArgs e)
    {
        var tb = this.FindControl<TextBox>("PresetInput");
        if (tb is null || RenderSurfaceControl is null) return;

        var plug = PluginRegistry.Create("vis_avs") as IAvsHostPlugin ?? new AvsVisualizerPlugin();
        RenderSurfaceControl.SetPlugin(plug);
        plug.LoadPreset(tb.Text ?? string.Empty);
    }
}

[PhoenixVisualizer.Plots\Class1.cs]
using System;
using System.Collections.Generic;

namespace PhoenixVisualizer.Plots;

// Core plotting primitives for audio visualization
public sealed class LineSeries
{
    public float[] X { get; set; } = Array.Empty<float>();
    public float[] Y { get; set; } = Array.Empty<float>();
    public uint Color { get; set; } = 0xFFFF8800; // Orange
    public float Thickness { get; set; } = 2.0f;
}

public sealed class ScatterPlot
{
    public float[] X { get; set; } = Array.Empty<float>();
    public float[] Y { get; set; } = Array.Empty<float>();
    public uint Color { get; set; } = 0xFF44AAFF; // Blue
    public float PointSize { get; set; } = 4.0f;
}

public sealed class BarChart
{
    public float[] Values { get; set; } = Array.Empty<float>();
    public uint Color { get; set; } = 0xFF44AAFF; // Blue
    public float BarWidth { get; set; } = 2.0f;
    public float Spacing { get; set; } = 1.0f;
}

public sealed class PolarPlot
{
    public float[] Radii { get; set; } = Array.Empty<float>();
    public float[] Thetas { get; set; } = Array.Empty<float>();
    public uint Color { get; set; } = 0xFF44AAFF; // Blue
    public float Thickness { get; set; } = 2.0f;
}

// NEW: Matplotlib-inspired advanced plot types
public sealed class Heatmap
{
    public float[][] Data { get; set; } = Array.Empty<float[]>();
    public uint[] Colors { get; set; } = Array.Empty<uint>();
    public int Width { get; set; } = 0;
    public int Height { get; set; } = 0;
}

public sealed class SurfacePlot
{
    public float[] Data { get; set; } = Array.Empty<float>();
    public uint BaseColor { get; set; } = 0xFF44AAFF; // Blue
    public float HeightScale { get; set; } = 2.0f;
    public bool Wireframe { get; set; } = false;
}

// Audio-specific visualization helpers
public static class AudioPlots
{
    // Generate spectrum bars from FFT data
    public static BarChart CreateSpectrumBars(float[] fft, uint color = 0xFF44AAFF)
    {
        return new BarChart
        {
            Values = fft,
            Color = color,
            BarWidth = 2.0f,
            Spacing = 1.0f
        };
    }

    // Generate oscilloscope line from FFT data
    public static LineSeries CreateOscilloscope(float[] fft, uint color = 0xFFFF8800)
    {
        var x = new float[fft.Length];
        var y = new float[fft.Length];

        for (int i = 0; i < fft.Length; i++)
        {
            x[i] = (float)i / (fft.Length - 1);
            y[i] = fft[i];
        }

        return new LineSeries { X = x, Y = y, Color = color };
    }

    // Generate polar wheel from FFT data
    public static PolarPlot CreatePolarWheel(float[] fft, uint color = 0xFF44AAFF)
    {
        var radii = new float[fft.Length];
        var thetas = new float[fft.Length];

        for (int i = 0; i < fft.Length; i++)
        {
            thetas[i] = (float)i / fft.Length * 2 * (float)Math.PI;
            radii[i] = fft[i] * 0.5f + 0.5f; // Scale and offset
        }

        return new PolarPlot { Radii = radii, Thetas = thetas, Color = color };
    }

    // NEW: Matplotlib-inspired advanced plots

    // Generate waterfall/spectrogram from FFT data over time
    public static Heatmap CreateSpectrogram(float[][] fftHistory, uint[]? colors = null)
    {
        var defaultColors = new uint[] { 0xFF000000, 0xFF0000FF, 0xFF00FFFF, 0xFF00FF00, 0xFFFFFF00, 0xFFFF0000 };
        var finalColors = colors ?? defaultColors;

        return new Heatmap
        {
            Data = fftHistory,
            Colors = finalColors,
            Width = fftHistory.Length > 0 ? fftHistory[0].Length : 0,
            Height = fftHistory.Length
        };
    }

    // Generate 3D-like surface plot (simulated with height mapping)
    public static SurfacePlot CreateSurfacePlot(float[] fft, uint baseColor = 0xFF44AAFF)
    {
        return new SurfacePlot
        {
            Data = fft,
            BaseColor = baseColor,
            HeightScale = 2.0f,
            Wireframe = true
        };
    }

    // Generate animated scatter plot with beat detection
    public static ScatterPlot CreateBeatScatter(float[] fft, bool[] beats, uint beatColor = 0xFFFF0000)
    {
        var x = new float[fft.Length];
        var y = new float[fft.Length];

        for (int i = 0; i < fft.Length; i++)
        {
            x[i] = (float)i / (fft.Length - 1);
            y[i] = fft[i];
        }

        return new ScatterPlot { X = x, Y = y, Color = beatColor, PointSize = 4.0f };
    }
}


[PhoenixVisualizer.Plots\Colormaps.cs]
using System;
using System.Collections.Generic;

namespace PhoenixVisualizer.Plots;

/// <summary>
/// Handy-dandy color palettes ðŸŽ¨ for plots and visualizers.
/// Includes Matplotlib-esque ramps and a couple genre-based presets.
/// </summary>
public static class Colormaps
{
    // Stop values encoded as ARGB hex (alpha=FF for opaque)
    private static readonly uint[] ViridisStops =
    [
        0xFF440154, // purple
        0xFF472C7A, // indigo
        0xFF3B528B, // blue
        0xFF21908C, // teal
        0xFF5EC962, // green
        0xFFFDE725  // yellow
    ];

    private static readonly uint[] PlasmaStops =
    [
        0xFF0D0887, // deep purple
        0xFF6A00A8, // violet
        0xFFCB4679, // magenta
        0xFFF89441, // orange
        0xFFF0F921  // yellow
    ];

    private static readonly uint[] MagmaStops =
    [
        0xFF000004, // black
        0xFF3B0F70, // indigo
        0xFF8C2981, // purple
        0xFFDE4968, // pink
        0xFFF66E5B, // orange
        0xFFFEE08B  // yellow
    ];

    private static readonly uint[] InfernoStops =
    [
        0xFF000004, // black
        0xFF320A5A, // indigo
        0xFF7F1D4E, // maroon
        0xFFBA3655, // crimson
        0xFFF1711F, // orange
        0xFFFEE51A  // yellow
    ];

    // Genre â†’ palette mapping (just for fun ðŸŽ¶)
    private static readonly Dictionary<string, uint[]> GenrePalettes = new(StringComparer.OrdinalIgnoreCase)
    {
        ["rock"] = InfernoStops,
        ["metal"] = InfernoStops,
        ["trance"] = PlasmaStops,
        ["edm"] = PlasmaStops,
        ["jazz"] = ViridisStops,
        ["classical"] = MagmaStops,
    };

    /// <summary>Sample Viridis at position t âˆˆ [0,1].</summary>
    public static uint Viridis(float t) => Sample(ViridisStops, t);

    /// <summary>Sample Plasma at position t âˆˆ [0,1].</summary>
    public static uint Plasma(float t) => Sample(PlasmaStops, t);

    /// <summary>Sample Magma at position t âˆˆ [0,1].</summary>
    public static uint Magma(float t) => Sample(MagmaStops, t);

    /// <summary>Sample Inferno at position t âˆˆ [0,1].</summary>
    public static uint Inferno(float t) => Sample(InfernoStops, t);

    /// <summary>Grab a palette by genre name (fallback to Viridis).</summary>
    public static uint Genre(string genre, float t)
        => Sample(GenrePalettes.TryGetValue(genre, out var stops) ? stops : ViridisStops, t);

    private static uint Sample(uint[] stops, float t)
    {
        if (stops.Length == 0) return 0xFF000000;
        t = Math.Clamp(t, 0f, 1f);
        float scaled = t * (stops.Length - 1);
        int i = (int)scaled;
        if (i >= stops.Length - 1) return stops[^1];
        float frac = scaled - i;
        uint a = stops[i];
        uint b = stops[i + 1];
        return LerpArgb(a, b, frac);
    }

    private static uint LerpArgb(uint a, uint b, float t)
    {
        byte ar = (byte)((a >> 16) & 0xFF), ag = (byte)((a >> 8) & 0xFF), ab = (byte)(a & 0xFF);
        byte br = (byte)((b >> 16) & 0xFF), bg = (byte)((b >> 8) & 0xFF), bb = (byte)(b & 0xFF);
        byte rr = (byte)(ar + (br - ar) * t);
        byte gg = (byte)(ag + (bg - ag) * t);
        byte bb2 = (byte)(ab + (bb - ab) * t);
        return 0xFF000000u | ((uint)rr << 16) | ((uint)gg << 8) | bb2;
    }
}


[PhoenixVisualizer.Plots\PhoenixVisualizer.Plots.csproj]
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>


[PhoenixVisualizer.PluginHost\Contracts.cs]
namespace PhoenixVisualizer.PluginHost;

public record AudioFeatures(
    double TimeSeconds,
    double Bpm,
    bool Beat,
    float Volume,
    float Rms,
    float Peak,
    float Energy,
    float[] Fft,
    float[] Waveform,           // <-- new in PR
    float Bass,
    float Mid,
    float Treble,
    string? Genre,
    uint? SuggestedColorArgb
);

public interface IVisualizerPlugin
{
    string Id { get; }
    string DisplayName { get; }

    void Initialize(int width, int height);
    void Resize(int width, int height);
    void RenderFrame(AudioFeatures features, ISkiaCanvas canvas);
    void Dispose();
}

public interface IApeEffect : IVisualizerPlugin { }

public interface IAvsHostPlugin : IVisualizerPlugin
{
    void LoadPreset(string presetText);
}

public interface ISkiaCanvas
{
    void Clear(uint argb);
    void DrawLines(ReadOnlySpan<(float x, float y)> points, float thickness, uint argb);
    void FillCircle(float cx, float cy, float radius, uint argb);

    // 👀 Optional frame blending hint (0..1) for smoother visuals
    float FrameBlend { get; set; }
}


[PhoenixVisualizer.PluginHost\PhoenixVisualizer.PluginHost.csproj]
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>


[PhoenixVisualizer.PluginHost\PluginRegistry.cs]
using System;
using System.Collections.Generic;
using System.Linq;

namespace PhoenixVisualizer.PluginHost;

/// <summary>
/// Simple runtime registry to discover and create visualizer plugins.
/// </summary>
public static class PluginRegistry
{
    private static readonly Dictionary<string, (string displayName, Func<IVisualizerPlugin> factory)> _plugins = new();

    public static void Register(string id, string displayName, Func<IVisualizerPlugin> factory)
    {
        _plugins[id] = (displayName, factory);
    }

    public static IVisualizerPlugin? Create(string id)
        => _plugins.TryGetValue(id, out var entry) ? entry.factory() : null;

    public static IEnumerable<(string id, string displayName)> Available
        => _plugins.Select(kvp => (kvp.Key, kvp.Value.displayName));
}


[PhoenixVisualizer.Plugins.Ape.Phoenix\Class1.cs]
using System;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Plugins.Ape.Phoenix;

// Phoenix visualizer as an APE-style plugin
public sealed class PhoenixPlugin : IVisualizerPlugin
{
	public string Id => "phoenix";
	public string DisplayName => "Phoenix Visualizer";
	
	private int _width;
	private int _height;
	private float _time;
	private float _lastBpm;
	private bool _isActive;
	
	// Phoenix state
	private float _phoenixX;
	private float _phoenixY;
	private float _phoenixScale = 1.0f;
	private uint _phoenixColor = 0xFFFF8800; // Orange base
	private float _flameIntensity = 0.5f;
	
	public void Initialize(int width, int height)
	{
		_width = width;
		_height = height;
		_phoenixX = width * 0.5f;
		_phoenixY = height * 0.5f;
		_isActive = true;
	}
	
	public void Resize(int width, int height)
	{
		_width = width;
		_height = height;
		_phoenixX = width * 0.5f;
		_phoenixY = height * 0.5f;
	}
	
	public void RenderFrame(AudioFeatures features, ISkiaCanvas canvas)
	{
		if (!_isActive) return;
		
		_time = (float)features.TimeSeconds;
		
		// Update Phoenix based on audio
		UpdatePhoenix(features);
		
		// Clear canvas
		canvas.Clear(0xFF000000);
		
		// Draw Phoenix
		DrawPhoenix(canvas);
	}
	
	private void UpdatePhoenix(AudioFeatures features)
	{
		// BPM affects animation speed
		if (features.Bpm > 0)
		{
			_lastBpm = (float)features.Bpm;
			_phoenixScale = 0.8f + (float)((features.Bpm / 200.0f) * 0.4f); // Scale with BPM
		}
		
		// Energy affects flame intensity
		_flameIntensity = Math.Min(1.0f, features.Energy * 2.0f);
		
		// Beat detection for "burst" effect
		if (features.Beat)
		{
			_phoenixScale *= 1.2f; // Quick scale up on beat
		}
		
		// Frequency bands affect color
		UpdatePhoenixColor(features);
		
		// Gentle movement
		_phoenixX = _width * 0.5f + (float)(Math.Sin(_time * 0.5) * 50);
		_phoenixY = _height * 0.5f + (float)(Math.Cos(_time * 0.3) * 30);
	}
	
	private void UpdatePhoenixColor(AudioFeatures features)
	{
		// Base color from genre or fallback to frequency mapping
		if (!string.IsNullOrEmpty(features.Genre))
		{
			_phoenixColor = GetGenreColor(features.Genre);
		}
		else
		{
			// Frequency-based color mapping
			float bass = features.Bass;
			float mid = features.Mid;
			float treble = features.Treble;
			
			// Mix RGB based on frequency bands
			uint r = (uint)(bass * 255);
			uint g = (uint)(mid * 255);
			uint b = (uint)(treble * 255);
			
			_phoenixColor = (r << 16) | (g << 8) | b;
		}
	}
	
	private uint GetGenreColor(string genre)
	{
		return genre.ToLowerInvariant() switch
		{
			"blues" or "jazz" => 0xFF0000FF,      // Blue
			"bluegrass" => 0xFF00AAFF,             // Light blue
			"classical" => 0xFFFFFF00,             // Gold
			"metal" => 0xFF800080,                 // Purple
			"electronic" or "trance" => 0xFFFF00FF, // Pink
			"hip hop" or "rap" => 0xFF00FF00,      // Green
			"pop" => 0xFFFF8800,                   // Orange
			_ => 0xFFFF8800                        // Default orange
		};
	}
	
	private void DrawPhoenix(ISkiaCanvas canvas)
	{
		// Simple Phoenix representation (circle with flame effect)
		float size = 50.0f * _phoenixScale;
		
		// Draw main body
		canvas.FillCircle(_phoenixX, _phoenixY, size, _phoenixColor);
		
		// Draw flame effect based on energy
		if (_flameIntensity > 0.1f)
		{
			uint flameColor = BlendColors(_phoenixColor, 0xFFFF0000, _flameIntensity);
			canvas.FillCircle(_phoenixX, _phoenixY - size * 0.8f, size * 0.6f * _flameIntensity, flameColor);
		}
		
		// Draw wings (simple lines)
		uint wingColor = BlendColors(_phoenixColor, 0xFFFFFFFF, 0.3f);
		float wingLength = size * 1.2f;
		
		// Left wing
		canvas.DrawLines(new[] { (_phoenixX, _phoenixY), (_phoenixX - wingLength, _phoenixY - size * 0.5f) }, 3.0f, wingColor);
		// Right wing
		canvas.DrawLines(new[] { (_phoenixX, _phoenixY), (_phoenixX + wingLength, _phoenixY - size * 0.5f) }, 3.0f, wingColor);
	}
	
	private uint BlendColors(uint color1, uint color2, float ratio)
	{
		// Simple color blending
		uint r1 = (color1 >> 16) & 0xFF;
		uint g1 = (color1 >> 8) & 0xFF;
		uint b1 = color1 & 0xFF;
		
		uint r2 = (color2 >> 16) & 0xFF;
		uint g2 = (color2 >> 8) & 0xFF;
		uint b2 = color2 & 0xFF;
		
		uint r = (uint)(r1 * (1 - ratio) + r2 * ratio);
		uint g = (uint)(g1 * (1 - ratio) + g2 * ratio);
		uint b = (uint)(b1 * (1 - ratio) + b2 * ratio);
		
		return (r << 16) | (g << 8) | b;
	}
	
	public void LoadPreset(string preset)
	{
		// Phoenix plugin doesn't use text presets like AVS
		// But could load color schemes or animation styles
	}
	
	public void Dispose()
	{
		_isActive = false;
	}
}


[PhoenixVisualizer.Plugins.Ape.Phoenix\PhoenixVisualizer.Plugins.Ape.Phoenix.csproj]
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\PhoenixVisualizer.PluginHost\PhoenixVisualizer.PluginHost.csproj" />
  </ItemGroup>

</Project>


[PhoenixVisualizer.Plugins.Avs\AvsVisualizerPlugin.cs]
using System;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Plugins.Avs;

public sealed class AvsVisualizerPlugin : IAvsHostPlugin
{
    public string Id => "vis_avs";
    public string DisplayName => "AVS Runtime";

    private int _w, _h;

    // Mini-preset state
    private int _points = 512;
    private Mode _mode = Mode.Line;
    private Source _source = Source.Fft;

    public void Initialize(int width, int height) { _w = width; _h = height; }
    public void Resize(int width, int height)     { _w = width; _h = height; }
    public void Dispose() { }

    public void LoadPreset(string presetText)
    {
        // default values
        _points = 512; _mode = Mode.Line; _source = Source.Fft;
        if (string.IsNullOrWhiteSpace(presetText)) return;
        var parts = presetText.Split(new[] { ';', '\n', '\r', ',' }, StringSplitOptions.RemoveEmptyEntries);
        foreach (var raw in parts)
        {
            var kv = raw.Split('=', 2, StringSplitOptions.TrimEntries);
            if (kv.Length != 2) continue;
            var key = kv[0].Trim().ToLowerInvariant();
            var val = kv[1].Trim().ToLowerInvariant();
            switch (key)
            {
                case "points":
                    if (int.TryParse(val, out var p) && p > 1) _points = Math.Clamp(p, 2, 4096);
                    break;
                case "mode":
                    _mode = val switch { "bars" => Mode.Bars, "line" => Mode.Line, _ => _mode };
                    break;
                case "source":
                    _source = val switch { "fft" => Source.Fft, "wave" => Source.Wave, "sin" => Source.Sin, _ => _source };
                    break;
            }
        }
        System.Diagnostics.Debug.WriteLine($"[vis_avs] Loaded mini preset: points={_points} mode={_mode} source={_source}");
    }

    public void RenderFrame(AudioFeatures f, ISkiaCanvas canvas)
    {
        // solid background so we actually see something
        canvas.Clear(0xFF101010);

        switch (_mode)
        {
            case Mode.Line:
                RenderLine(f, canvas);
                break;
            case Mode.Bars:
                RenderBars(f, canvas);
                break;
        }
    }

    private void RenderLine(AudioFeatures f, ISkiaCanvas canvas)
    {
        if (_points < 2) return;
        Span<(float x, float y)> pts = _points <= 8192
            ? stackalloc (float x, float y)[_points]
            : new (float x, float y)[_points];

        for (int i = 0; i < _points; i++)
        {
            float t = (float)i / (_points - 1);
            float x = t * _w;
            float y = (float)(_h * 0.5);

            float v = SampleSource(f, t, i);
            // scale: center at mid-height, +/- 40% height
            y -= v * (float)(_h * 0.4);

            pts[i] = (x, y);
        }

        canvas.DrawLines(pts, 2f, 0xFF40C4FF);
    }

    private void RenderBars(AudioFeatures f, ISkiaCanvas canvas)
    {
        // If FFT isn't present yet, fall back to sine so we always see something
        int n = Math.Min(_points, Math.Max(2, f.Fft?.Length ?? 0));
        if (n < 2 && _source != Source.Sin) { _source = Source.Sin; n = _points; }

        float barW = Math.Max(1f, (float)_w / n);
        Span<(float x, float y)> seg = stackalloc (float, float)[2];
        for (int i = 0; i < n; i++)
        {
            float t = (float)i / Math.Max(1, n - 1);
            float v = SampleSource(f, t, i);
            v = MathF.Min(1f, MathF.Max(0f, v));

            float h = v * (_h - 10);
            float x = i * barW;

            seg[0] = (x + barW * 0.5f, _h - 5);
            seg[1] = (x + barW * 0.5f, _h - 5 - h);
            canvas.DrawLines(seg, Math.Max(1f, barW * 0.6f), 0xFFFFA000);
        }
    }

    private float SampleSource(AudioFeatures f, float t, int i)
    {
        switch (_source)
        {
            case Source.Fft:
                if (f.Fft is { Length: > 0 })
                {
                    int idx = (int)(t * (f.Fft.Length - 1));
                    float mag = MathF.Abs(f.Fft[idx]);
                    // soft log scale
                    return MathF.Min(1f, (float)Math.Log(1 + 6 * mag));
                }
                break;
            case Source.Wave:
                if (f.Waveform is { Length: > 0 })
                {
                    int idx = (int)(t * (f.Waveform.Length - 1));
                    return 0.5f + 0.5f * f.Waveform[idx];
                }
                break;
            case Source.Sin:
                // Time-based sine so you see motion even with no audio
                float phase = (float)(f.TimeSeconds * 2.0 * Math.PI * 0.5); // 0.5 Hz
                return 0.5f + 0.5f * MathF.Sin(phase + t * MathF.Tau);
        }
        return 0f;
    }

    private enum Mode { Line, Bars }
    private enum Source { Fft, Wave, Sin }
}


[PhoenixVisualizer.Plugins.Avs\PhoenixVisualizer.Plugins.Avs.csproj]
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\PhoenixVisualizer.PluginHost\PhoenixVisualizer.PluginHost.csproj" />
  </ItemGroup>

</Project>


[PhoenixVisualizer.Visuals\BarsVisualizer.cs]
using System;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Visuals;

public sealed class BarsVisualizer : IVisualizerPlugin
{
    public string Id => "bars";
    public string DisplayName => "Simple Bars";

    private int _w, _h;

    public void Initialize(int width, int height) { _w = width; _h = height; }
    public void Resize(int width, int height)     { _w = width; _h = height; }

    public void RenderFrame(AudioFeatures f, ISkiaCanvas canvas)
    {
        canvas.Clear(0xFF101010); // opaque background

        if (f.Fft is null || f.Fft.Length == 0) return;

        int n = Math.Min(64, f.Fft.Length);
        float barW = Math.Max(1f, (float)_w / n);
        Span<(float x, float y)> seg = stackalloc (float, float)[2];

        for (int i = 0; i < n; i++)
        {
            // log-ish scale + clamp
            float v = f.Fft[i];
            float mag = MathF.Min(1f, (float)Math.Log(1 + 8 * Math.Max(0, v)));
            float h = mag * (_h - 10);

            float x = i * barW;
            seg[0] = (x + barW * 0.5f, _h - 5);
            seg[1] = (x + barW * 0.5f, _h - 5 - h);
            canvas.DrawLines(seg, Math.Max(1f, barW * 0.6f), 0xFF40C4FF);
        }
    }

    public void Dispose() { }
}


[PhoenixVisualizer.Visuals\EnergyVisualizer.cs]
using System;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Visuals;

// Ring visualizer that swells with audio energy ðŸŽµ
public sealed class EnergyVisualizer : IVisualizerPlugin
{
    public string Id => "energy";
    public string DisplayName => "Energy Ring";

    private int _width;
    private int _height;

    public void Initialize(int width, int height)
    {
        _width = width;
        _height = height;
    }

    public void Resize(int width, int height)
    {
        _width = width;
        _height = height;
    }

    public void RenderFrame(AudioFeatures features, ISkiaCanvas canvas)
    {
        // Keep the background dark so the glow pops âœ¨
        canvas.Clear(0xFF000000);

        float size = Math.Min(_width, _height) * 0.4f;
        // Energy can be tiny, so give it a little boost and clamp
        float norm = Math.Clamp(features.Rms * 10f, 0f, 1f);
        float radius = size * norm;
        uint color = features.Beat ? 0xFFFFFF00 : 0xFF00FFFF;
        canvas.FillCircle(_width / 2f, _height / 2f, radius, color);
    }

    public void Dispose()
    {
        // Nothing to clean up here ðŸ˜Š
    }
}


[PhoenixVisualizer.Visuals\PhoenixVisualizer.Visuals.csproj]
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\PhoenixVisualizer.Core\PhoenixVisualizer.Core.csproj" />
    <ProjectReference Include="..\PhoenixVisualizer.PluginHost\PhoenixVisualizer.PluginHost.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="SkiaSharp" Version="2.88.8" />
  </ItemGroup>

</Project>


[PhoenixVisualizer.Visuals\PulseVisualizer.cs]
using System;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Visuals;

// Pulsing circle visualizer driven by energy ðŸš¨
public sealed class PulseVisualizer : IVisualizerPlugin
{
    public string Id => "pulse";
    public string DisplayName => "Pulse Circle";

    private int _width;
    private int _height;

    public void Initialize(int width, int height) => Resize(width, height);

    public void Resize(int width, int height)
    {
        _width = width;
        _height = height;
    }

    public void RenderFrame(AudioFeatures features, ISkiaCanvas canvas)
    {
        canvas.Clear(0xFF000000);
        float size = Math.Min(_width, _height);
        float baseRadius = size * 0.15f;

        // Energy can spike way above 1, so cap it to keep the circle on screen ðŸš«ðŸŽ¯
        float energy = MathF.Min(1f, features.Energy);
        float radius = baseRadius + energy * size * 0.35f;

        uint color = features.Beat ? 0xFFFFFFFFu : 0xFFFFAA00u;
        canvas.FillCircle(_width / 2f, _height / 2f, radius, color);
    }

    public void Dispose() { }
}



[PhoenixVisualizer.Visuals\SanityVisualizer.cs]
using System;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Visuals;

/// <summary>
/// A tiny plugin that draws a bouncing line based on time so you can
/// confirm the render pipeline even when no audio is playing. ðŸŽ§
/// </summary>
public sealed class SanityVisualizer : IVisualizerPlugin
{
    public string Id => "sanity";
    public string DisplayName => "Sanity Check";

    private int _w;
    private int _h;

    public void Initialize(int width, int height) => (_w, _h) = (width, height);
    public void Resize(int width, int height) => (_w, _h) = (width, height);

    public void RenderFrame(AudioFeatures f, ISkiaCanvas canvas)
    {
        try
        {
            // Solid background so the line stands out
            canvas.Clear(0xFF000000);

            // Bounce a vertical line left/right based on TimeSeconds
            // Handle case when no audio is loaded (TimeSeconds might be 0 or invalid)
            double timeSeconds = f.TimeSeconds;
            if (timeSeconds <= 0 || double.IsNaN(timeSeconds) || double.IsInfinity(timeSeconds))
            {
                // Fallback to system time if audio time is invalid
                timeSeconds = DateTime.UtcNow.Ticks / (double)TimeSpan.TicksPerSecond;
            }
            
            float phase = (float)(timeSeconds % 2.0);     // 0..2
            float t = phase <= 1f ? phase : 2f - phase;     // ping-pong
            float x = t * _w;

            Span<(float x, float y)> seg = stackalloc (float, float)[2]
            {
                (x, 0),
                (x, _h)
            };
            canvas.DrawLines(seg, 3f, 0xFF40C4FF);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"[SanityVisualizer] RenderFrame failed: {ex.Message}");
            // Fallback: draw a simple static line in the center
            canvas.Clear(0xFF000000);
            var seg = new (float x, float y)[2]
            {
                (_w * 0.5f, 0),
                (_w * 0.5f, _h)
            };
            canvas.DrawLines(seg, 3f, 0xFF40C4FF);
        }
    }

    public void Dispose() { }
}



[PhoenixVisualizer.Visuals\SpectrumVisualizer.cs]
using System;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Visuals;

// Smooth spectrum bars splashed with rainbow colors ðŸŒˆ
public sealed class SpectrumVisualizer : IVisualizerPlugin
{
    public string Id => "spectrum";
    public string DisplayName => "Spectrum Bars";

    private int _width;
    private int _height;

    public void Initialize(int width, int height) => Resize(width, height);
    public void Resize(int width, int height)
    {
        _width = width;
        _height = height;
    }

    public void RenderFrame(AudioFeatures features, ISkiaCanvas canvas)
    {
        canvas.Clear(0xFF000000);
        var fft = features.Fft;
        int bins = 64; // keep it light ðŸ’¡
        int len = fft.Length;
        int step = Math.Max(1, len / bins);
        float barWidth = _width / (float)bins;
        float maxHeight = _height * 0.9f;
        for (int i = 0; i < bins; i++)
        {
            int start = i * step;
            int end = Math.Min(start + step, len);
            float sum = 0f;
            for (int j = start; j < end; j++) sum += MathF.Abs(fft[j]);
            float avg = sum / (end - start);
            float height = Math.Clamp(avg * 10f, 0f, 1f) * maxHeight;
            float x = i * barWidth + barWidth / 2f;
            var points = new (float x, float y)[] { (x, _height), (x, _height - height) };
            uint color = HsvToArgb((1f - i / (float)(bins - 1)) * 270f, 1f, 1f);
            canvas.DrawLines(points, barWidth * 0.8f, color);
        }
    }

    public void Dispose() { }

    // Tiny HSVâ†’ARGB helper ðŸŽ¨
    private static uint HsvToArgb(float h, float s, float v)
    {
        float c = v * s;
        float x = c * (1 - MathF.Abs((h / 60f % 2) - 1));
        float m = v - c;
        float r, g, b;
        if (h < 60) { r = c; g = x; b = 0; }
        else if (h < 120) { r = x; g = c; b = 0; }
        else if (h < 180) { r = 0; g = c; b = x; }
        else if (h < 240) { r = 0; g = x; b = c; }
        else if (h < 300) { r = x; g = 0; b = c; }
        else { r = c; g = 0; b = x; }
        byte R = (byte)Math.Clamp((r + m) * 255f, 0, 255);
        byte G = (byte)Math.Clamp((g + m) * 255f, 0, 255);
        byte B = (byte)Math.Clamp((b + m) * 255f, 0, 255);
        return 0xFF000000u | ((uint)R << 16) | ((uint)G << 8) | B;
    }
}


[PhoenixVisualizer.Visuals\WaveformVisualizer.cs]
using System;
using PhoenixVisualizer.PluginHost;

namespace PhoenixVisualizer.Visuals;

// Time-domain waveform visualizer ðŸ©µ
public sealed class WaveformVisualizer : IVisualizerPlugin
{
    public string Id => "waveform";
    public string DisplayName => "Waveform";

    private int _width;
    private int _height;

    public void Initialize(int width, int height) => Resize(width, height);
    public void Resize(int width, int height)
    {
        _width = width;
        _height = height;
    }

    public void RenderFrame(AudioFeatures features, ISkiaCanvas canvas)
    {
        canvas.Clear(0xFF000000);
        var wave = features.Waveform;
        if (wave.Length < 2) return;
        int len = wave.Length;
        Span<(float x, float y)> pts = stackalloc (float x, float y)[len];
        for (int i = 0; i < len; i++)
        {
            float nx = len > 1 ? (float)i / (len - 1) : 0f;
            float x = nx * (_width - 1);
            float y = (float)(_height * 0.5 - wave[i] * (_height * 0.4));
            pts[i] = (x, y);
        }
        canvas.DrawLines(pts, 1.5f, 0xFF00FF00);
    }

    public void Dispose() { }
}


[README.md]
# Phoenix Visualizer

Cross-platform Avalonia visualizer studio with an AVS-compatible runtime at its core. The first flagship visual is a Phoenix plugin, but the app is designed to host many visualizers (AVS-style presets, APE-style effects, and managed plugins). Each track gets one primary vibe (genre-driven), nuanced by BPM, energy, and frequency bands. Includes a real-world frequency-to-visible-color fallback when genre is missing.

## Features (MVP)

- Music playback: Open file, Play/Pause, Stop, Seek, Volume (MP3 first)
- Real-time analysis: FFT (1024/2048), BPM detection, energy/peaks
- Genre detection: Primary ID3 tag, fallback via spectrum color mapping
- Phoenix visualizer: One vibe per track; animation and effects respond to audio
- Spectrum visualizer: Real-time bars/curve, color-coded to frequencyâ†’visible light
- Screensaver mode: Future (leaving out of MVP)

## Color and Vibe Logic

- One primary vibe per track (keeps the experience focused and code simple)
- Genre â†’ base palette and animation style (examples):
  - Blues/Jazz: deep blues; smooth, flowing
  - Bluegrass: sky/light blue; lively, bouncy
  - Classical: gold/yellow; elegant, graceful
  - Metal: purple/deep red; sharp, aggressive
  - Love/Trance: pink/gold; gentle, spiraling
  - Hip hop/Rap: silver/green; rippling, rhythmic
  - Pop: orange/bright yellow; peppy, energetic
  - Electronic: neon; strobing, fast
- Frequency bands influence details within the vibe:
  - Bass (20â€“250 Hz) â†’ body glow/flame intensity
  - Mid (250â€“2000 Hz) â†’ aura/eyes
  - Treble (2â€“20 kHz) â†’ feather tips/tail sparkles

### Spectrum-to-Color Fallback (real-world mapping)

If genre is unavailable/ambiguous, compute a weighted color from the spectrum using approximate frequencyâ†’visible color mapping:

- 20â€“250 Hz â†’ reds/oranges
- 250â€“2000 Hz â†’ yellows/greens
- 2000â€“20000 Hz â†’ blues/violets

This mapping also colors the spectrum visualizer so users can â€œsee the music.â€

## Project Structure

- `PhoenixVisualizer.App` â€” Avalonia UI host app
- `PhoenixVisualizer.Core` â€” config, models, genre/vibe mapping, utilities
- `PhoenixVisualizer.Audio` â€” playback + analysis (ManagedBass/BPM/FFT)
- `PhoenixVisualizer.Visuals` â€” legacy direct-render visuals (if needed)
- `PhoenixVisualizer.PluginHost` â€” shared plugin interfaces and `AudioFeatures`
- `PhoenixVisualizer.ApeHost` â€” managed APE-style host interfaces/stubs
- `PhoenixVisualizer.AvsEngine` â€” AVS runtime (Superscope-first), Skia renderer
- `PhoenixVisualizer.Plugins.Avs` â€” vis_AVS plugin that wraps the AVS engine
- `PhoenixVisualizer.Plugins.Ape.Phoenix` â€” Phoenix visual as an APE-style plugin
- `PhoenixVisualizer.Plots` â€” Matplotlib-inspired plotting primitives (for scopes, wheels, spectrograms)
- `PhoenixVisualizer.Editor` â€” Avalonia-based visualization editor UI
- `libs_etc/WAMPSDK` â€” Winamp SDK materials (future AVS compatibility)
- `Directory.Build.props` â€” sets `WinampSdkDir` relative to this folder

## Tech Stack

- .NET 8, Avalonia 11
- NAudio for playback and audio processing
- SkiaSharp for custom 2D drawing
- Newtonsoft.Json for config (Core)

## Build

```
dotnet build
```

## Run

```
dotnet run --project PhoenixVisualizer.App
```

## Prerequisites

**None required** - The app uses NAudio which has full .NET 8 support and no external dependencies.

## Near-term Roadmap

- UI (Host): Replace welcome screen with transport controls + info + spectrum panel
- Audio: Wire playback; expose FFT/BPM/energy to engine
- AVS Engine: Superscope subset (per-frame/point vars, math, conds) + Skia renderer
- vis_AVS plugin: host AVS presets via the engine
- Plugins API: finalize `IVisualizerPlugin` and `AudioFeatures`
- Editor: initial layout (preset browser, canvas, properties), load/run AVS preset
- Phoenix plugin: scaffold (reads features; minimal draw stub)

## Notes

- Windows dev confirmed with .NET SDK 8.x
- All project assets and SDK materials live under `PhoenixVisualizer/`
- Docs index: `PhoenixVisualizer/docs/INDEX.md`




[TODO.md]
# PhoenixVisualizer TODO - Current State Audit

## ðŸŽ¯ **CURRENT STATUS: PHASE 1-3 COMPLETE, PHASE 4 IN PROGRESS**

The PhoenixVisualizer is in a much more advanced state than previously documented. Most core functionality is working.

## âœ… **COMPLETED FEATURES (Phases 1-3)**

### Phase 1 â€“ Core AVS and Host Wiring âœ… **COMPLETE**
- âœ… **Engine**: Superscope subset (per-frame/per-point vars, math, conditionals)
- âœ… **Audio feed**: FFT (1024/2048), BPM, energy, beat detection
- âœ… **Renderer**: Skia lines/points, clear/fade operations
- âœ… **vis_AVS plugin**: Wraps engine and drives frames from host
- âœ… **App**: Basic transport UI + spectrum panel + settings

### Phase 2 â€“ Editor + Plots âœ… **COMPLETE**
- âœ… **Editor UI**: Preset browser, canvas viewport, properties panel
- âœ… **Plots library**: LineSeries, Polar/Wheel, Bar/Stem
- âœ… **Colormaps**: viridis/plasma/magma/inferno + genre palettes
- âœ… **Designer nodes**: Sources (FFT/BPM), transforms, styles, compose

### Phase 3 â€“ Phoenix Plugin âœ… **COMPLETE**
- âœ… **Phoenix plugin scaffold**: Reads AudioFeatures, minimal draw stub
- âœ… **Color/vibe mapping**: Genre primary, spectrum fallback
- âœ… **States**: idle/active/cocoon/burst (hooks: beat/quiet/drop)

## ðŸš§ **IN PROGRESS (Phase 4)**

### Phase 4 â€“ Compatibility & Effects ðŸš§ **MOSTLY COMPLETE**
- âœ… **AVS**: Real Winamp superscope preset parsing (init:, per_frame:, per_point:, beat:)
- âœ… **Real Winamp superscope preset parsing**: Full format support
- âœ… **Preset import**: Loader for common text-based presets
- âœ… **Enhanced audio processing**: Gain, smoothing, noise gate, AGC
- âœ… **Random preset scheduler**: Musical structure-aware preset switching
- âœ… **Multiple visualization plugins**: 7 different visualizers working
- âœ… **Settings system**: Comprehensive audio/visualizer configuration
- ðŸ”„ **APE host**: Managed APE interface (partially implemented)
- ðŸ”„ **NS-EEL expression evaluator**: For superscope math (planned)

## ðŸ†• **NEW FEATURES NOT IN ORIGINAL TODO**

### Advanced Audio Processing
- âœ… **Input Gain Control**: -24dB to +24dB adjustment
- âœ… **Auto Gain Control (AGC)**: Keeps levels steady
- âœ… **Smoothing**: Configurable EMA over FFT magnitude
- âœ… **Noise Gate**: Configurable threshold for low-level noise
- âœ… **Beat Sensitivity**: Configurable energy multiple for beat detection
- âœ… **Frame Blending**: Visual frame interpolation

### Random Preset System
- âœ… **OnBeat Mode**: Switch presets on detected beats
- âœ… **Interval Mode**: Time-based preset switching
- âœ… **Stanza Mode**: Musical structure-aware switching (beats per bar, bars per stanza)
- âœ… **Cooldown System**: Prevents rapid preset switching
- âœ… **Silence Detection**: Optional preset switching during quiet periods

### Multiple Visualization Plugins
- âœ… **Simple Bars**: Basic spectrum bars
- âœ… **Spectrum Bars**: Enhanced frequency visualization
- âœ… **Waveform**: Time-domain audio display
- âœ… **Pulse Circle**: Beat-reactive circular visualization
- âœ… **Energy Ring**: Energy-based ring visualization
- âœ… **Sanity Check**: Bouncing line test visualizer
- âœ… **AVS Runtime**: Winamp-compatible preset system

### Settings & Configuration
- âœ… **Plugin Selection**: Choose between AVS and Phoenix
- âœ… **Audio Settings**: Sample rate, buffer size configuration
- âœ… **Visualizer Sensitivity**: Fine-tune all audio processing parameters
- âœ… **Hotkey Support**: Y/U/Space/R/Enter controls
- âœ… **Preset Management**: Import, load, save presets

## ðŸ”§ **KNOWN ISSUES TO FIX**

### Critical Issues
- âŒ **Play Button Not Working**: Audio controls not responding (regression from recent changes)
- âŒ **Sanity Check Visualizer Failing**: Crashes or doesn't render properly

### Minor Issues
- âš ï¸ **AudioService._ringIndex Warning**: Field assigned but never used (CS0414)
- âš ï¸ **Stop/Pause Behavior**: Both controls currently pause (NAudio limitation)

## ðŸŽ¯ **NEXT PRIORITIES (Phase 5+)**

### Phase 5 â€“ Advanced AVS Features
- [ ] **NS-EEL Expression Evaluator**: Full Winamp superscope math support
- [ ] **More AVS Effects**: Blur, color operations, advanced transforms
- [ ] **Preset Browser**: Built-in preset management and categorization
- [ ] **Effect Chains**: Multiple effects in sequence

### Phase 6 â€“ Performance & Optimization
- [ ] **GPU Acceleration**: Skia GPU rendering optimization
- [ ] **Memory Management**: Optimize FFT buffers and rendering
- [ ] **Cross-platform Testing**: Linux/macOS compatibility
- [ ] **Performance Profiling**: Identify bottlenecks

### Phase 7 â€“ Advanced Features
- [ ] **Screensaver Mode**: Full-screen visualization
- [ ] **Video Export**: Record visualizations to video files
- [ ] **MIDI Integration**: External MIDI control
- [ ] **Network Streaming**: Remote visualization control

## ðŸ§ª **TESTING STATUS**

### Working Features
- âœ… Audio playback and analysis
- âœ… Multiple visualization plugins
- âœ… Settings and configuration
- âœ… Preset loading and management
- âœ… Random preset scheduling
- âœ… AVS preset parsing

### Needs Testing
- ðŸ”„ Phoenix plugin with different audio types
- ðŸ”„ Settings persistence across app restarts
- ðŸ”„ Hotkey functionality
- ðŸ”„ Preset import from various formats

## ðŸ“ **DEVELOPMENT NOTES**

- **Windows Development**: .NET 8 SDK confirmed working
- **Dependencies**: NAudio, SkiaSharp, Avalonia 11
- **Architecture**: Plugin-based with shared AudioFeatures interface
- **Performance**: 60+ FPS rendering with 2048-point FFT
- **Audio Formats**: MP3, WAV, FLAC, OGG supported

## ðŸš€ **IMMEDIATE ACTIONS NEEDED**

1. **Fix Play Button**: Restore audio control functionality
2. **Fix Sanity Check**: Resolve visualizer crash/rendering issues
3. **Clean Up Warnings**: Remove unused _ringIndex field
4. **Test Core Features**: Verify all working features still function
5. **Update Documentation**: Reflect current working state

---

*Last Updated: 2025-08-16 - Based on comprehensive codebase audit*



