using System; using System.Collections.Generic; using System.Linq; using PhoenixVisualizer.Core.Effects.Interfaces; using PhoenixVisualizer.Core.Effects.Models; using PhoenixVisualizer.Core.Models; namespace PhoenixVisualizer.Core.Effects.Nodes { public abstract class BaseEffectNode : IEffectNode { public virtual string Id { get; protected set; } public virtual string Name { get; protected set; } public virtual string Description { get; protected set; } public virtual string Category { get; protected set; } public virtual Version Version { get; protected set; } public virtual bool IsEnabled { get; set; } = true; public virtual EffectGraph Graph { get; set; } public virtual IReadOnlyList<EffectPort> InputPorts => _inputPorts.AsReadOnly(); public virtual IReadOnlyList<EffectPort> OutputPorts => _outputPorts.AsReadOnly(); protected readonly List<EffectPort> _inputPorts; protected readonly List<EffectPort> _outputPorts; protected readonly object _processingLock; protected BaseEffectNode() { _inputPorts = new List<EffectPort>(); _outputPorts = new List<EffectPort>(); _processingLock = new object(); if (string.IsNullOrEmpty(Id)) Id = Guid.NewGuid().ToString(); if (Version == null) Version = new Version(1, 0, 0); InitializePorts(); } protected abstract void InitializePorts(); protected abstract object ProcessCore(Dictionary<string, object> inputs, AudioFeatures audioFeatures); public virtual object Process(Dictionary<string, object> inputs, AudioFeatures audioFeatures) { if (!IsEnabled) return GetDefaultOutput(); lock (_processingLock) { try { return ProcessCore(inputs, audioFeatures); } catch (Exception ex) { OnProcessingError(ex); return GetDefaultOutput(); } } } public virtual bool ValidateConfiguration() { return _inputPorts.All(p => !p.IsRequired || !string.IsNullOrEmpty(p.Name)) && _outputPorts.All(p => !string.IsNullOrEmpty(p.Name)); } public virtual void Reset() { lock (_processingLock) { OnReset(); } } public virtual void Initialize() { lock (_processingLock) { OnInitialize(); } } public virtual string GetSettingsSummary() { return $\
Name
Category
-
Enabled:
IsEnabled
\; } protected virtual void OnReset() { } protected virtual void OnInitialize() { } protected virtual void OnProcessingError(Exception ex) { } protected virtual object GetDefaultOutput() { return null; } } }
